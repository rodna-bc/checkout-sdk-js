{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/embedded-checkout/embedded-checkout-events.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///external \"card-validator\"","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/signin-email/signin-email-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/payment/is-vaulted-instrument.ts","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///./src/hosted-form/iframe-content/hosted-input-events.ts","webpack:///./src/common/iframe/is-iframe-event.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/address/map-to-internal-address.ts","webpack:///./src/billing/is-billing-address-like.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///./src/cart/map-to-internal-line-items.ts","webpack:///./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack:///external \"local-storage-fallback\"","webpack:///external \"shallowequal\"","webpack:///./src/hosted-form/hosted-field-events.ts","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/cart/map-to-internal-line-item.ts","webpack:///external \"reselect\"","webpack:///./src/shipping/map-to-internal-shipping-option.ts","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/common/utility/amount-transformer.ts","webpack:///./src/common/url/parse-url.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/customer/map-to-internal-customer.ts","webpack:///./src/order/map-to-internal-order.ts","webpack:///./src/cart/map-to-internal-cart.ts","webpack:///./src/promotion/map-to-discount-notifications.ts","webpack:///external \"@bigcommerce/bigpay-client\"","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack:///./src/hosted-form/iframe-content/card-expiry-formatter.ts","webpack:///./src/hosted-form/iframe-content/card-number-formatter.ts","webpack:///./src/coupon/map-to-internal-coupon.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///external \"iframe-resizer\"","webpack:///external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/payment/payment-request-transformer.ts","webpack:///./src/payment/payment-request-sender.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/signin-email/signin-email-state.ts","webpack:///./src/signin-email/signin-email-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/signin-email/signin-email-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/coupon/map-to-internal-gift-certificate.ts","webpack:///./src/common/iframe/iframe-event-poster.ts","webpack:///./src/common/iframe/iframe-event-listener.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack:///./src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/embedded-checkout/errors/not-embeddable-error.ts","webpack:///./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack:///./src/embedded-checkout/embedded-checkout.ts","webpack:///./src/embedded-checkout/loading-indicator.ts","webpack:///./src/embedded-checkout/resizable-iframe-creator.ts","webpack:///./src/embedded-checkout/embed-checkout.ts","webpack:///./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack:///./src/common/error/errors/custom-error.ts","webpack:///./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack:///./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///external \"messageformat\"","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-config-error.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-value-error.ts","webpack:///./src/common/storage/browser-storage.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack:///./src/common/iframe/iframe-resizer.ts","webpack:///./src/common/error/error-action-creator.ts","webpack:///./src/common/utility/get-environment.ts","webpack:///./src/common/log/console-logger.ts","webpack:///./src/common/log/noop-logger.ts","webpack:///./src/common/log/get-default-logger.ts","webpack:///./src/common/log/create-logger.ts","webpack:///./src/coupon/coupon-action-creator.ts","webpack:///./src/coupon/coupon-request-sender.ts","webpack:///./src/coupon/gift-certificate-action-creator.ts","webpack:///./src/coupon/gift-certificate-request-sender.ts","webpack:///./src/customer/customer-strategy-action-creator.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack:///./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack:///./src/remote-checkout/remote-checkout-request-sender.ts","webpack:///./src/remote-checkout/remote-checkout-action-creator.ts","webpack:///./src/customer/customer-action-creator.ts","webpack:///./src/customer/customer-request-sender.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack:///./src/customer/strategies/amazon-pay-v2/amazon-pay-v2-customer-strategy.ts","webpack:///./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack:///./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack:///./src/customer/strategies/default/default-customer-strategy.ts","webpack:///./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack:///./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack:///./src/customer/strategies/square/square-customer-strategy.ts","webpack:///./src/geography/country-action-creator.ts","webpack:///./src/geography/country-request-sender.ts","webpack:///./src/order/order-request-sender.ts","webpack:///./src/spam-protection/errors/spam-protection-not-completed-error.ts","webpack:///./src/order/order-action-creator.ts","webpack:///./src/order/errors/order-finalization-not-required-error.ts","webpack:///./src/payment/payment-strategy-type.ts","webpack:///./src/payment/payment-strategy-action-creator.ts","webpack:///./src/cart/cart-comparator.ts","webpack:///./src/cart/errors/cart-changed-error.ts","webpack:///./src/checkout/checkout-validator.ts","webpack:///./src/spam-protection/errors/spam-protection-challenge-not-completed-error.ts","webpack:///./src/spam-protection/errors/carding-protection-challenge-not-completed-error.ts","webpack:///./src/spam-protection/errors/carding-protection-failed-error.ts","webpack:///./src/spam-protection/payment-human-verification-handler.ts","webpack:///./src/common/dom/mutation-observer.ts","webpack:///./src/spam-protection/errors/spam-protection-failed-error.ts","webpack:///./src/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack:///./src/spam-protection/google-recaptcha.ts","webpack:///./src/spam-protection/google-recaptcha-script-loader.ts","webpack:///./src/spam-protection/create-spam-protection.ts","webpack:///./src/hosted-form/errors/invalid-hosted-form-error.ts","webpack:///./src/hosted-form/hosted-field.ts","webpack:///./src/hosted-form/hosted-form.ts","webpack:///./src/hosted-form/hosted-form-order-data-transformer.ts","webpack:///./src/hosted-form/hosted-form-factory.ts","webpack:///./src/spam-protection/spam-protection-action-creator.ts","webpack:///./src/spam-protection/spam-protection-request-sender.ts","webpack:///./src/store-credit/store-credit-action-creator.ts","webpack:///./src/store-credit/store-credit-request-sender.ts","webpack:///./src/payment/payment-action-creator.ts","webpack:///./src/payment/payment-strategy-registry.ts","webpack:///./src/common/browser-info/get-browser-info.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2.ts","webpack:///./src/payment/errors/payment-argument-invalid-error.ts","webpack:///./src/payment/errors/payment-method-cancelled-error.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack:///./src/order/order-params.ts","webpack:///./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack:///./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack:///./src/payment/strategies/affirm/affirmJs.ts","webpack:///./src/payment/strategies/affirm/affirm-script-loader.ts","webpack:///./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack:///./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack:///./src/address/is-internal-address-equal.ts","webpack:///./src/common/utility/omit-private.ts","webpack:///./src/address/map-from-internal-address.ts","webpack:///./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-strategy.ts","webpack:///./src/common/utility/cancellable-promise.ts","webpack:///./src/payment/strategies/bluesnapv2/bluesnapv2-payment-strategy.ts","webpack:///./src/payment/strategies/bolt/bolt-payment-strategy.ts","webpack:///./src/payment/is-nonce-like.ts","webpack:///./src/common/overlay/overlay.ts","webpack:///./src/common/overlay/overlay-style.ts","webpack:///./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack:///./src/payment/is-credit-card-like.ts","webpack:///./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack:///./src/payment/strategies/cardinal/cardinal.ts","webpack:///./src/payment/strategies/braintree/is-braintree-error.ts","webpack:///./src/payment/strategies/braintree/map-to-braintree-shipping-address-override.ts","webpack:///./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack:///./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack:///./src/payment/strategies/cardinal/cardinal-client.ts","webpack:///./src/payment/strategies/chasepay/chasepay.ts","webpack:///./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack:///./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-form.ts","webpack:///./src/payment/strategies/converge/converge-payment-strategy.ts","webpack:///./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack:///./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack:///./src/payment/strategies/klarnav2/klarna-supported-countries.ts","webpack:///./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack:///./src/payment/strategies/klarna/klarna-script-loader.ts","webpack:///./src/payment/strategies/klarnav2/klarnav2-payment-strategy.ts","webpack:///./src/payment/strategies/klarnav2/klarnav2-script-loader.ts","webpack:///./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack:///./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack:///./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack:///./src/payment/strategies/offline/offline-payment-strategy.ts","webpack:///./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack:///./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-strategy.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack:///./src/common/error/errors/unsupported-browser-error.ts","webpack:///./src/payment/strategies/square/square-payment-strategy.ts","webpack:///./src/payment/strategies/square/square-script-loader.ts","webpack:///./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack:///./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack:///./src/payment/strategies/wepay/wepay-risk-client.ts","webpack:///./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack:///./src/payment/errors/payment-method-declined-error.ts","webpack:///./src/payment/strategies/zip/zip-payment-strategy.ts","webpack:///./src/payment/strategies/zip/zip-script-loader.ts","webpack:///./src/payment/create-payment-strategy-registry.ts","webpack:///./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack:///./src/payment/instrument/instrument-action-creator.ts","webpack:///./src/common/date-time/add-minutes.ts","webpack:///./src/common/date-time/is-future.ts","webpack:///./src/payment/instrument/instrument-response-transformer.ts","webpack:///./src/payment/instrument/map-to-account-instrument.ts","webpack:///./src/payment/instrument/map-to-card-instrument.ts","webpack:///./src/payment/instrument/instrument-request-sender.ts","webpack:///./src/shipping/shipping-country-action-creator.ts","webpack:///./src/shipping/shipping-country-request-sender.ts","webpack:///./src/shipping/shipping-strategy-action-creator.ts","webpack:///./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack:///./src/shipping/strategies/amazon-pay-v2/amazon-pay-v2-shipping-strategy.ts","webpack:///./src/shipping/strategies/default/default-shipping-strategy.ts","webpack:///./src/common/data-store/create-data-store-projection.ts","webpack:///./src/signin-email/signin-email-action-creator.ts","webpack:///./src/signin-email/signin-email-request-sender.ts","webpack:///./src/common/utility/clone-result.ts","webpack:///./src/common/selector/create-shallow-equal-selector.ts","webpack:///./src/checkout/create-checkout-selectors.ts","webpack:///./src/checkout/checkout-store-selector.ts","webpack:///./src/checkout/checkout-store-error-selector.ts","webpack:///./src/checkout/checkout-store-status-selector.ts","webpack:///./src/common/error/error-message-transformer.ts","webpack:///./src/common/utility/to-single-line.ts","webpack:///./src/checkout/checkout-service.ts","webpack:///./src/checkout/create-checkout-service-error-transformer.ts","webpack:///./src/checkout/create-checkout-service.ts","webpack:///./src/payment/create-payment-client.ts","webpack:///./src/customer/create-customer-strategy-registry.ts","webpack:///./src/shipping/create-shipping-strategy-registry.ts","webpack:///./src/locale/language-service.ts","webpack:///./src/locale/create-language-service.ts","webpack:///./src/currency/currency-formatter.ts","webpack:///./src/currency/currency-service.ts","webpack:///./src/currency/create-currency-service.ts","webpack:///./src/analytics/analytics-step-tracker.ts","webpack:///./src/analytics/noop-step-tracker.ts","webpack:///./src/analytics/create-step-tracker.ts","webpack:///./src/analytics/is-analytics-step-tracker-window.ts","webpack:///./src/bundles/checkout-sdk.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack:///./src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","EmbeddedCheckoutEventType","InstrumentActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","GiftCertificateActionType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","ButtonType","ButtonColor","BillingAddressFormat","ConfigActionType","ACKNOWLEDGE","FINALIZE","isPlainObject","CountryActionType","ShippingCountryActionType","SignInEmailActionType","ContentType","isVaultedInstrument","instrument","Boolean","instrumentId","isHostedVaultedInstrument","isFormattedVaultedInstrument","formattedInstrument","formattedPayload","bigpay_token","token","StoreCreditActionType","HostedInputEventType","isIframeEvent","HOSTED","OFFLINE","mapToInternalAddress","address","consignments","addressId","id","isBillingAddressLike","length","firstName","lastName","company","addressLine1","address1","addressLine2","address2","city","province","stateOrProvince","provinceCode","stateOrProvinceCode","postCode","postalCode","country","countryCode","phone","customFields","PaymentActionType","_requestSender","loadPaymentMethods","options","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","joinIncludes","includes","join","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","reduce","result","map","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerUnitPrice","integerUnitPriceAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","HostedFieldEventType","isEqual","objectA","objectB","Array","isArray","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keysB","isObjectEqual","INTERNAL_USE_ONLY","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","listPrice","salePrice","downloadsPageUrl","downloadPageUrl","brand","sku","categoryNames","productId","option","addedByPromotion","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","SpamProtectionActionType","CustomerActionType","_decimalPlaces","Math","round","pow","parseUrl","test","anchor","document","createElement","href","port","indexOf","hostname","hash","origin","protocol","pathname","search","withMemoizedCombiner","creator","combiner","args","pop","combinerArgs","ErrorActionType","bindMethodDecorator","_","descriptor","method","boundMethod","set","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","mapToInternalCustomer","customer","billingAddress","addresses","customerId","isGuest","storeCredit","email","fullName","customerGroupName","customerGroup","mapToInternalOrder","order","orderMeta","payments","items","currency","orderId","lineItems","code","customerCanBeCreated","payment","mapToInternalOrderPayment","subtotal","baseAmount","coupon","discountedAmount","coupons","sum","orderToken","callbackUrl","discountNotifications","giftCertificate","providerId","totalDiscountedAmount","appliedGiftCertificates","detail","remainingBalance","remaining","balance","purchaseDate","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","grandTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","step","helpText","instructions","returnUrl","socialDataObject","physicalItems","digitalItems","lineItem","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","mapToInternalCart","checkout","promotions","notifications","cart","promotion","banners","banner","push","placeholders","discountType","messageHtml","giftCertificates","certificate","used","required","isShippingRequired","taxSubtotal","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","EmbeddedContentEventType","format","month","year","trimmedMonth","slice","trimmedYear","toObject","card","maxLength","info","lengths","unformattedValue","unformat","gaps","gapIndex","output","replace","couponTypes","mapToInternalCoupon","displayName","couponType","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","getConsignmentByAddress","shippingAddress","_removeLineItems","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","customItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","window","location","_cardExpiryFormatter","_cardNumberFormatter","transform","checkoutState","getBillingAddress","getCustomer","getOrder","paymentMethod","paymentMethods","getPaymentMethod","gatewayId","getShippingAddress","shippingOption","getShippingOption","storeConfig","getStoreConfig","contextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","getOrderMeta","internalCustomer","authToken","paymentData","getPaymentToken","vaultAccessToken","additionalAction","_transformPaymentMethod","quoteMeta","geoCountryCode","source","storeProfile","transformWithHostedFormData","values","data","paymentMethodMeta","selectedShippingOption","_transformHostedInputValues","gateway","initializationData","ccCvv","cardCodeVerification","ccNumber","cardNumberVerification","cardCode","ccExpiry","cardExpiry","ccName","cardName","cardNumber","submitPayment","reject","_transformResponse","initializeOffsitePayment","statusText","isPrivate","joinErrors","_factoryMethods","register","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","label","fieldType","itemtype","processCountry","subdivisions","requiresState","processProvince","hasPostalCodes","processsPostCode","provider","braintreepaypal","authorizenet","elavon","stripe","stripev3","cybersource","converge","bluesnapv2","paymetric","normalize","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","createCartSelector","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","bigpayToken","some","getInstruments","cardInstruments","accountInstruments","account","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrderOrThrow","createOrderSelectorFactory","createPaymentSelector","providerType","internalPayment","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","mapToInternalGiftCertificate","targetOrigin","_targetWindow","_targetOrigin","event","successType","errorType","toPromise","postMessage","setTarget","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","removeListener","splice","trigger","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","loadPaypalCommerce","clientId","disableFunding","updatedOptions","scriptSrc","async","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","_checkoutActionCreator","_amazonPayV2PaymentProcessor","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","region","extractAmazonCheckoutSessionId","amazonButtonOptions","sandbox","productType","PayOnly","PayAndShip","createCheckoutSession","shopPath","placement","Cart","createButton","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","googlePayButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","actions","res","_onError","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","_paypalCommerceRequestSender","paypalCommerce","buttonParams","onClick","_handleClickButtonProvider","createOrder","onApprove","_validateStyleParams","paramsScript","_getParamsScript","Buttons","fundingSource","setupPayment","orderID","order_id","updatedStyle","color","layout","height","tagline","horizontal","intent","isPayPalCreditAvailable","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","PAYPALCOMMERCE","AMAZON_PAY_V2","createCheckoutButtonRegistry","NotEmbeddableErrorType","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","StyleConfigured","getItem","setItem","now","encodeURIComponent","visibility","lastAttempt","Number","MissingContent","removeItem","EmbeddedCheckout","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","parentOrigin","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","paymentMethodData","cardType","cardNetwork","lastFour","cardDetails","gatewayMerchantId","googleMerchantName","googleMerchantId","apiVersion","apiVersionMinor","merchantInfo","authJwt","platformToken","merchantName","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","supportedCards","billingAddressRequired","billingAddressParameters","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","btoa","paymentGatewayId","storeCountry","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","tokenizationData","androidPayCards","lastTwo","binData","googlePayBraintreePaymentDataRequest","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","last4","err","stripeVersion","stripePublishableKey","fieldErrors","_namespace","rawValue","withNamespace","getItemOnce","Json","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","amazonpay","signout","Checkout","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeLanguage","signInButton","init","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepayadyenv2","googlepayauthorizenet","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","shouldExecuteSpamCheck","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","PaymentStrategyType","_orderActionCreator","_spamProtectionActionCreator","execute","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_googleRecaptcha","handle","_isPaymentHumanVerificationRequest","_initialize","additional_action_required","human_verification_token","recaptchaSitekey","cardingProtectionElement","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","_memoized","recaptcha","sitekey","event$","_widgetId","getResponse","reset","a","b","_event$","_recaptcha","element","TIMEOUT","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","createSpamProtection","MutationObserverFactory","formId","_type","_containerId","_placeholder","_accessibilityLabel","_eventPoster","_eventListener","_cardInstrument","overflow","getType","AttachRequested","accessibilityLabel","cardInstrument","fontUrls","_getFontUrls","placeholder","AttachSucceeded","AttachFailed","_isAttachErrorEvent","_handleAttachErrorEvent","submitForm","fields","SubmitRequested","SubmitSucceeded","SubmitFailed","_isSubmitErrorEvent","validateForm","ValidateRequested","Validated","isValid","lastRetry","links","fontFamily","family","_fields","_payloadTransformer","_eventCallbacks","_paymentHumanVerificationHandler","_handleEnter","onBlur","onCardTypeChange","onFocus","onValidate","Blurred","CardTypeChanged","Focused","Entered","_cardType","BinChanged","_bin","bin","getBin","getCardType","_getFirstField","otherFields","otherField","submit","fieldOptions","_getCardInstrument","MissingPaymentInstrument","spamProtectionElementId","spamProtectionElement","checkoutSettings","googleRecaptchaSitekey","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","SubmitPaymentRequested","SubmitPaymentFailed","shouldSaveInstrument","promise","vault_payment_instrument","InitializeOffsitePaymentRequested","race","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_getToken","KLARNAV2","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","getBrowserInfo","color_depth","screen","colorDepth","java_enabled","navigator","javaEnabled","userLanguage","screen_height","screen_width","time_zone_offset","getTimezoneOffset","AdyenActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","invalidFields","isCardState","encryptedSecurityCode","encryptedExpiryMonth","OrderIncludes","_paymentActionCreator","_locale","adyenv2","_paymentInitializeOptions","environment","originKey","paymentMethodsResponse","_adyenClient","_mountPaymentComponent","_paymentComponent","CreditCard","Bancontact","_mountCardVerificationComponent","_cardVerificationComponent","componentState","_componentState","encryptedCardNumber","credit_card_number_confirmation","expiry_month","expiry_year","encryptedExpiryYear","verification_value","browser_info","credit_card_token","_processAdditionalAction","unmount","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","widgetSize","_handleAction","threeDS2ContainerId","additionalActionOptions","onBeforeLoad","adyenAction","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","ThreeDS2Challenge","QRCode","mount","cardVerificationComponent","adyenClient","cardVerificationContainerId","SecuredFields","onChange","_updateComponentState","paymentComponent","ACH","GiroPay","iDEAL","SEPA","hasVaultedInstruments","AliPay","Sofort","Vipps","WeChatPayQR","provider_data","_stylesheetLoader","configuration","loadStylesheet","AdyenCheckout","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","unit_price","qty","item_image_url","item_url","categories","_getCategories","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_paymentStrategyActionCreator","_signInCustomer","click","paymentToken","buttonId","walletButton","_bindEditButton","orderRequest","redirect_url","_showLoadingSpinner","changeAction","clone","cloneNode","replaceWith","bindButton","siteLink","cancellable","cancel","_initializeOptions","frame","_createIframe","closeElement","mainElement","_element","_closeElement","_mainElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","_createElements","classLayout","classClose","classOverlayText","background","transitionDuration","hasCloseButton","innerHtml","overlayText","addClassLayout","innerText","getOverlayStyle","_addEventListener","_removeEventListener","onClickClose","handleTransition","propertyName","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","getSessionId","appendSessionId","processedPayment","creditCard","cardholderName","cvv","expirationDate","endpoint","_braintreePaymentProcessor","_is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","isVaultingEnabled","_formattedPayload","vaultPaymentInstrument","device_info","paypal_account","visaInitOptions","_cardinalClient","prepare","_getClientToken","start","hostedForm","iin","runBinProcess","getThreeDSecureData","three_ds_result","_getOrderData","CardinalSignatureValidationErrors","ChasePayEventType","_isConfigured","_sdk","_getClientSDK","SetupCompleted","off","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","reqTokenId","expDate","substr","accountNum","accountMask","extraData","PaReq","TermUrl","callback_url","MD","_hostedFormFactory","_isHostedPaymentFormEnabled","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","paymentSettings","bigpayBaseUrl","_hostedForm","isHostedPaymentFormEnabled","orderActionCreator","paymentActionCreator","hostedFormFactory","_threeDSecureFlow","_googlePayOptions","statusCode","GooglePay","googlePayToken","supportedCountries","supportedCountriesRequiringStates","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","_needsStateCode","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","_klarnav2ScriptLoader","klarnaPayments","_klarnaPayments","_loadPaymentsWidget","klarnav2","_updateOrder","payment_method_category","Payments","orderPayload","_shouldSubmitFullPayload","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_paypalCommercePaymentProcessor","paypalcommerce","overlay","_getOrderId","approveUrl","paymentPayPal","_getOverlayElements","paramsWindow","_getParamsWindow","closeWindow","isResolve","isRemoveOverlay","messageHandler","_popup","operation","updateParent","popupTick","setInterval","closed","clearInterval","focus","fragment","createDocumentFragment","continueText","marginTop","textDecoration","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripeConnectedAccount","_stripeV3Client","elements","cardElement","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","save_payment_method","billing_details","publishableKey","stripeAccount","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentHumanVerificationHandler","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","ADYENV2_GOOGLEPAY","AFFIRM","AFTERPAY","AMAZON","AUTHORIZENET_GOOGLE_PAY","AMAZONPAYV2","BLUESNAPV2","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","PAYPAL_COMMERCE","PAYPAL_COMMERCE_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","BOLT","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","_isAccountInstrument","defaultInstrument","default_instrument","external_id","trustedShippingAddress","trusted_shipping_address","method_type","iban","issuer","mapToAccountInstrument","last_4","expiryMonth","expiryYear","mapToCardInstrument","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","updateAddressRequestBody","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","ProjectionActionType","sendSignInEmail","emailRequest","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getSignInEmail","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","val","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateSubscriptionsError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getSignInEmailError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingSubscriptions","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isSendingSignInEmail","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_signInEmailActionCreator","_subscriptionsActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInEmailRequest","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","executeSpamCheck","CheckoutService","createCheckoutService","setHost","createPaymentClient","orderRequestSender","spamProtectionRequestSender","subscriptionsActionCreator","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","AnalyticStepId","ANALYTIC_STEPS","CUSTOMER","SHIPPING","BILLING","PAYMENT","checkoutService","storage","analytics","checkoutSteps","_checkoutStarted","_completedSteps","_viewedSteps","_analyticStepOrder","trackCheckoutStarted","extraItemsData","saveExtraItemsData","track","getTrackingPayload","revenue","tax","trackOrderComplete","readExtraItemsData","clearExtraItemData","trackStepViewed","stepId","getIdFromStep","hasStepViewed","trackViewed","backfill","trackStepCompleted","hasStepCompleted","trackCompleted","shippingMethod","getPaymentMethodName","shippingMethodId","completedStepId","affiliation","toShopperCurrency","products","getProducts","getShopperCurrency","getStoreProfile","getStorageKey","ORDER_ITEMS_STORAGE_KEY","itemsData","product_id","giftCertificateItems","physicalAndDigitalItems","itemAttributes","image_url","variant","createStepTracker","stepTrackerConfig","isAnalyticsEnabled","isAnalyticsTrackerWindow","_googlePayScriptLoader","_googlePayInitializer","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_amazonPayV2ScriptLoader","_amazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","amazonPayV2Client","amazonPayV2Region","createAmazonPayV2PaymentProcessor","_subscriptionsRequestSender","_subscriptionActionCreator","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,K,gBClFrDhC,EAAOD,QAAUkC,QAAQ,U,cCAzBjC,EAAOD,QAAUkC,QAAQ,4B,cCAzBjC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,S,eCAzBjC,EAAOD,QAAUkC,QAAQ,yB,6BCMzB,IAAYC,EAAZ,2CAAYA,GACR,8DACA,8DACA,wDAEA,4DACA,4DACA,sDAEA,4DACA,4DACA,sDAEA,mEACA,mEACA,6DAEA,iEACA,iEACA,2DAnBJ,CAAYA,MAAqB,M,eCNjClC,EAAOD,QAAUkC,QAAQ,mB,6BCEzB,IAAYE,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEACA,0EACA,4EACA,wEAfJ,CAAYA,MAA0B,M,6BCEtC,IAAYC,EAAZ,2CAAYA,GACR,kDACA,wDACA,wDACA,oDACA,0DACA,0DACA,wDACA,8DACA,8DACA,4DACA,kEACA,kEACA,yEACA,2EACA,uEAfJ,CAAYA,MAAyB,M,6BCFrC,IAAYC,EAAZ,2CAAYA,GACR,gEACA,sEACA,sEACA,8DACA,oEACA,oEACA,yDACA,+DACA,+DACA,6DACA,mEACA,mEAZJ,CAAYA,MAA0B,M,mECA1BC,E,gBAAZ,SAAYA,GACR,qDACA,iCACA,yCACA,iDACA,qDACA,mCACA,+CACA,uCACA,uCACA,2DACA,oDACA,kDACA,wDAbJ,CAAYA,MAAoB,KAqBhC,kBACI,WACWC,GADX,MAGI,YAOR,SAAyBC,GACrB,OAAQA,GACR,KAAKF,EAAqBG,sBACtB,MAAO,iEAEX,KAAKH,EAAqBI,YACtB,MAAO,sDAEX,KAAKJ,EAAqBK,oBACtB,MAAO,8DAEX,KAAKL,EAAqBM,gBACtB,MAAO,0DAEX,KAAKN,EAAqBO,sBAC1B,KAAKP,EAAqBQ,mBACtB,MAAO,+DAEX,KAAKR,EAAqBS,aACtB,MAAO,uDAEX,KAAKT,EAAqBU,eACtB,MAAO,0EAEX,KAAKV,EAAqBW,eACtB,MAAO,yDAEX,KAAKX,EAAqBY,oBACtB,MAAO,+EAEX,KAAKZ,EAAqBa,qBACtB,MAAO,2FAEX,KAAKb,EAAqBc,uBACtB,MAAO,kEAEX,QACI,MAAO,+DA5CDC,CAAgBd,KAAS,K,OAFxB,EAAAA,UAIP,EAAK/B,KAAO,mBACZ,EAAKgC,KAAO,e,EAEpB,OAT8C,yBAS9C,EATA,CAA8C,K,sCCjB9C,IAAYc,EAAZ,2CAAYA,GACR,kDACA,kDACA,4CAEA,sDACA,sDACA,gDAPJ,CAAYA,MAAkB,M,6BCD9B,IAAYC,EAAZ,2CAAYA,GACR,4CACA,4CACA,sCAEA,6DACA,6DACA,uDAEA,gDACA,gDACA,0CAEA,oDACA,oDACA,8CAfJ,CAAYA,MAAe,M,6BCA3B,IAAYC,EAAZ,2CAAYA,GACR,6DACA,6DACA,uDAEA,+DACA,+DACA,yDAPJ,CAAYA,MAAuB,M,6BCDnC,IAAYC,EAAZ,2CAAYA,GACR,mEACA,mEACA,6DAEA,yDACA,yDACA,mDAPJ,CAAYA,MAAwB,M,6BCEpC,IAAYC,EAAZ,2CAAYA,GACR,oDACA,0DACA,0DAEA,wDACA,8DACA,8DAPJ,CAAYA,MAAwB,M,6BCApC,IAAYC,EAAZ,2CAAYA,GACR,gDACA,gDACA,0CAEA,kDACA,kDACA,4CAPJ,CAAYA,MAAgB,M,8BCH5B,IAAYC,EAAZ,2CAAYA,GACR,uCACA,iCACA,mCACA,2BACA,6BACA,yBANJ,CAAYA,MAAyB,M,6BCErC,IAAYC,EAAZ,2CAAYA,GACR,wDACA,wDACA,kDAEA,0DACA,0DACA,oDAPJ,CAAYA,MAAoB,M,wCCGhC,kBAII,WAAYC,G,ICZuBnC,EAAaE,E,mBDYhD,EACI,YAAMiC,GAAW,sCAAoC,K,OAJzD,EAAAtD,KAAO,gBACP,EAAAgC,KAAO,WCV4Bb,EDehB,ECf6BE,EDevB,EAAWA,UCdhClB,OAAOoD,eACPpD,OAAOoD,eAAepC,EAAQE,GAE9BF,EAAOqC,UAAYnC,EDaoB,mBAA5BoC,MAAMC,kBACbD,MAAMC,kBAAkB,EAAM,GAE9B,EAAKC,MAAQ,IAAKF,MAAM,EAAKH,SAAUK,M,EAGnD,OAfoD,yBAepD,EAfA,CAAoDF,O,oCEFpD,IAAYG,EAAZ,2CAAYA,GACR,mEACA,mEACA,6DAEA,qEACA,qEACA,+DAPJ,CAAYA,MAAyB,M,6BCFrC,IAAYC,EAAZ,2CAAYA,GACR,yEACA,yEACA,mEAEA,2EACA,2EACA,qEAEA,yEACA,yEACA,mEAEA,+DACA,+DACA,yDAEA,sEACA,sEACA,gEAEA,gDArBJ,CAAYA,MAAwB,M,gBCJpCrE,EAAOD,QAAUkC,QAAQ,+B,cCAzBjC,EAAOD,QAAUkC,QAAQ,mB,cCAzBjC,EAAOD,QAAUkC,QAAQ,gC,gDCInBqC,EAAmB,CACrBC,KAAM,GACNC,QAAS,GACTC,OAAQ,GAOZ,cAMI,WACIC,EACA,G,IAAA,kBAAEZ,EAAA,EAAAA,QAASa,EAAA,EAAAA,OAFf,OAOU,OAAEJ,EAAA,EAAAA,KAAMC,EAAA,EAAAA,QAASC,EAAA,EAAAA,O,OAEvB,cAAMX,GAAW,sCAAoC,MAEhDtD,KAAO,eACZ,EAAKgC,KAAO,UACZ,EAAK+B,KAAOA,EACZ,EAAKC,QAAUA,EACf,EAAKC,OAASA,EACd,EAAKE,OAASA,GAAU,G,EAEhC,OAxBuD,yBAwBvD,EAxBA,CAAuD,K,oCCqGvD,IAAYC,EAIAC,EAqBAC,EAzBZ,+GAAYF,GACR,cACA,gBAFJ,CAAYA,MAAU,KAItB,SAAYC,GACR,oBACA,gBACA,gBAHJ,CAAYA,MAAW,KAqBvB,SAAYC,GAIR,YAIA,cARJ,CAAYA,MAAoB,M,6BCxIhC,IAAYC,EAAZ,2CAAYA,GACR,8CACA,8CACA,wCAHJ,CAAYA,MAAgB,M,8BCJ5B,oEAAO,IAAMC,EAAc,cACdC,EAAW,Y,6BCDxB,6CAGe,SAASC,EAAchE,GAClC,OAAO,wBAAoBA,K,6BCA/B,IAAYiE,EAAZ,2CAAYA,GACR,oDACA,oDACA,8CAHJ,CAAYA,MAAiB,M,6BCA7B,IAAYC,EAAZ,2CAAYA,GACR,qEACA,qEACA,+DAHJ,CAAYA,MAAyB,M,6BCArC,IAAYC,EAAZ,2CAAYA,GACR,yDACA,yDACA,mDAHJ,CAAYA,MAAqB,M,6BCJjC,IAAKC,GAAL,SAAKA,GACD,0BACA,sCAFJ,CAAKA,MAAW,KAKD,O,6BCHA,SAASC,EAAoBC,GACxC,OAAOC,QAASD,EAAiCE,cAG9C,SAASC,EAA0BH,GACtC,OACIC,QAASD,EAAuCE,gBAC/CF,EAAW1D,eAAe,cAC1B0D,EAAW1D,eAAe,SAI5B,SAAS8D,EAA6BJ,GACzC,IAAMK,EAAuBL,EAA4DM,iBAEzF,QAAKD,IAI8C,iBAArCA,EAAoBE,cAC9BN,QAAQI,EAAoBE,cAAgBF,EAAoBE,aAAaC,QApBrF,uG,6BCIA,IAAYC,EAAZ,2CAAYA,GACR,2DACA,2DACA,qDAHJ,CAAYA,MAAqB,M,wCCAjC,cACI,WAAYnC,GAAZ,MACI,YAAMA,GAAW,wGAAsG,K,OAEvH,EAAKtD,KAAO,sCACZ,EAAKgC,KAAO,oC,EAEpB,OAPiE,yBAOjE,EAPA,C,MAAiE,G,oCCGjE,IAAY0D,EADZ,kCACA,SAAYA,GACR,kDACA,4CACA,wCACA,iCACA,iCACA,mDACA,iCACA,iCACA,kDACA,4CACA,qCAXJ,CAAYA,MAAoB,M,mCCPjB,SAASC,EACpBxE,EACAa,GAEA,OAAOb,EAAOa,OAASA,EAJ3B,mC,wCCKA,cACI,WAAYsB,GAAZ,MACI,YAAMA,GAAW,0CAAwC,K,OAEzD,EAAKtD,KAAO,uBACZ,EAAKgC,KAAO,mB,EAEpB,OAPkD,yBAOlD,EAPA,C,MAAkD,G,qCCPlD,oEAAO,IAAM4D,EAAS,sBACTC,EAAU,wB,6BCUR,SAASC,EACpBC,EACAC,GAEA,IAAIC,EAQJ,OCnBW,SAA8BF,GAGzC,YAAoC,IAFbA,EAEMG,GDUzBC,CAAqBJ,GAEdC,GAAgBA,EAAaI,SACpCH,EAAYD,EAAa,GAAGE,IAF5BD,EAAYF,EAAQG,GAKjB,CACHA,GAAID,EACJI,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBC,aAAcT,EAAQU,SACtBC,aAAcX,EAAQY,SACtBC,KAAMb,EAAQa,KACdC,SAAUd,EAAQe,gBAClBC,aAAchB,EAAQiB,oBACtBC,SAAUlB,EAAQmB,WAClBC,QAASpB,EAAQoB,QACjBC,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,cArC9B,mC,6BEMA,IAAYC,EAAZ,2CAAYA,GACR,oDACA,oDACA,8CAEA,2EACA,2EACA,qEAPJ,CAAYA,MAAiB,M,yECG7B,aACI,WACYC,GAAA,KAAAA,iBAsChB,OAnCI,YAAAC,mBAAA,SAAmBC,GAAnB,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,IAAwBC,8BAEnD,EAAKL,eAAeC,mBAAmBC,GAClCI,MAAK,SAAA5D,GACF,IAAM6D,EAAO,CACTC,gBAAiB9D,EAASF,QAAQ,uBAClCiE,YAAa/D,EAASF,QAAQ,mBAGlC2D,EAASC,KAAK,uBAAa,IAAwBM,4BAA6BhE,EAASH,KAAMgE,IAC/FJ,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAwBC,yBAA0BpE,WAMnG,YAAAqE,kBAAA,SAAkBC,EAAkBd,GADpC,WAEI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,IAAwBa,gCAA4BC,EAAW,CAAEF,SAAQ,KAEpG,EAAKhB,eAAee,kBAAkBC,EAAUd,GAC3CI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,IAAwBe,2BAA4BzE,EAASH,KAAM,CAAEyE,SAAQ,KACxGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAwBO,wBAAyB1E,EAAU,CAAEsE,SAAQ,YAVtH,sBADC,K,sCAeL,EAxCA,GAAqB,O,6BCPrB,oBAIA,aACI,WACYhB,GAAA,KAAAA,iBA0BhB,OAvBI,YAAAC,mBAAA,SAAmB,G,IAAEoB,QAAA,YAAAA,QAGjB,OAAOC,KAAKtB,eAAelH,IAFf,2BAEwB,CAChCuI,QAAO,EACP7E,QAAS,CACL+E,OAAQ,IAAYC,OACpB,iBAAkB,QAK9B,YAAAT,kBAAA,SAAkBC,EAAkB,G,IAAEK,QAAA,YAAAA,QAC5BI,EAAM,4BAA4BT,EAExC,OAAOM,KAAKtB,eAAelH,IAAI2I,EAAK,CAChCJ,QAAO,EACP7E,QAAS,CACL+E,OAAQ,IAAYC,OACpB,iBAAkB,QAIlC,EA5BA,G,oCCNA,6CAEe,SAASE,EAAgBC,GACpC,OAAO,eAAKA,GAAUC,KAAK,O,4DCQhB,SAASC,EACpBC,EACAC,EACAC,GAEA,YAFA,IAAAA,MAAA,MAEQrJ,OAAOsJ,KAAKH,GACfI,QAAO,SAACC,EAAQ3I,GAAQ,gCAClB2I,EACCL,EAAQtI,GAAoB4I,KAAI,SAACC,GACjC,MAAY,qBAAR7I,ECfL,SACX6I,EACAN,GAEA,IAAMO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI2D,EAAK3D,GACT6D,SAAU,GACV/J,KAAM6J,EAAK7J,KACXgK,OAAQH,EAAKG,OACbC,oBAAqBJ,EAAKG,OAC1BE,SAAU,EACVC,cAAeL,EAAkBM,UAAUP,EAAKG,QAChDK,2BAA4BP,EAAkBM,UAAUP,EAAKG,QAC7DM,iBAAkBR,EAAkBM,UAAUP,EAAKG,QACnDO,8BAA+BT,EAAkBM,UAAUP,EAAKG,QAChEQ,gBAAiB,EACjBC,SAAU,EACVC,OAAQb,EAAKa,OACbC,UAAWd,EAAKc,UAChB3I,KAAM,4BACN4I,WAAY,GACZC,UAAW,MDPQC,CAAqCjB,EAAMN,GAG/C,YACHM,EASpB,SAAmC7H,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,IApBC+I,CAA0B/J,GAC1BuI,EACAC,SAGT,I,iDE/BXhK,EAAOD,QAAUkC,QAAQ,2B,eCAzBjC,EAAOD,QAAUkC,QAAQ,iB,6BCMzB,IAAYuJ,EAAZ,2CAAYA,GACR,kDACA,qDACA,sDAHJ,CAAYA,MAAoB,M,+BCFjB,SAASC,EAAQC,EAAcC,EAAczD,GACxD,OAAIwD,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDC,MAAMC,QAAQH,IAAYE,MAAMC,QAAQF,GAsCpD,SAAsBD,EAAgBC,EAAgBzD,GAClD,GAAIwD,EAAQ9E,SAAW+E,EAAQ/E,OAC3B,OAAO,EAGX,IAAK,IAAIkF,EAAQ,EAAG,EAASJ,EAAQ9E,OAAQkF,EAAQ,EAAQA,IACzD,IAAKL,EAAQC,EAAQI,GAAQH,EAAQG,GAAQ5D,GACzC,OAAO,EAIf,OAAO,EAhDQ6D,CAAaL,EAASC,EAASzD,IAGtC0D,MAAMC,QAAQH,KAAYE,MAAMC,QAAQF,KAIvCD,aAAmBM,MAAUL,aAAmBK,KA0B7D,SAAqBN,EAAeC,GAChC,OAAOD,EAAQO,YAAcN,EAAQM,UA1BtBC,CAAYR,EAASC,KAG3BD,aAAmBM,MAAUL,aAAmBK,QAIhDN,aAAmBS,QAAYR,aAAmBQ,OAc/D,SAAuBT,EAAiBC,GACpC,OAAOD,EAAQU,aAAeT,EAAQS,WAdvBC,CAAcX,EAASC,KAG7BD,aAAmBS,QAAYR,aAAmBQ,SAgC/D,SACIT,EACAC,EACAzD,GAEA,IAAMoE,EAASpE,GAAWA,EAAQqE,UAC5BC,EAAQF,EAAS3L,OAAOsJ,KAAKyB,GAASY,OAAOA,GAAU3L,OAAOsJ,KAAKyB,GACnEe,EAAQH,EAAS3L,OAAOsJ,KAAK0B,GAASW,OAAOA,GAAU3L,OAAOsJ,KAAK0B,GAEzE,GAAIa,EAAM5F,SAAW6F,EAAM7F,OACvB,OAAO,EAGX,IAAK,IAAIkF,EAAQ,EAAG,EAASU,EAAM5F,OAAQkF,EAAQ,EAAQA,IAAS,CAChE,IAAMtK,EAAMgL,EAAMV,GAElB,IAAKH,EAAQ7J,eAAeN,GACxB,OAAO,EAGX,IAAKiK,EAAQC,EAAQlK,GAAMmK,EAAQnK,GAAM0G,GACrC,OAAO,EAIf,OAAO,EArDIwE,CAAchB,EAASC,EAASzD,KAGpCwD,IAAYC,GAjCvB,mC,cCJA3L,EAAOD,QAAUkC,QAAQ,6B,6BCAzB,kCAAO,IAAM0K,EAAoB,2E,8BCAjC,8CAUe,SAASC,EACpBvC,EACA7H,EACAuH,EACAC,QAAA,IAAAA,MAAA,MAEA,IAAMM,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAK2D,EAAKL,GACVO,SAAUF,EAAKE,SACfC,OAAQH,EAAKwC,kBACbpC,oBAAqBJ,EAAKyC,kBAC1BpC,SAAUL,EAAK0C,eACfpC,cAAeL,EAAkBM,UAAUP,EAAKwC,mBAChDhC,2BAA4BP,EAAkBM,UAAUP,EAAKyC,mBAC7D9B,gBAAiBV,EAAkBM,UAAUP,EAAK0C,gBAClDjC,iBAAkBR,EAAkBM,UAAUP,EAAK2C,WACnDjC,8BAA+BT,EAAkBM,UAAUP,EAAK4C,WAChEC,iBAAmB7C,EAAqB8C,gBACxC3M,KAAM6J,EAAK7J,KACXyK,SAAUZ,EAAKY,SACfmC,MAAO/C,EAAK+C,MACZC,IAAKhD,EAAKgD,IACVC,cAAejD,EAAKiD,cACpBjC,UAAWhB,EAAKgB,UAChBkC,UAAWlD,EAAKkD,UAChBnC,YAAaf,EAAKnC,SAAW,IAAIkC,KAAI,SAAAoD,GAAU,OAC3ChN,KAAMgN,EAAOhN,KACbU,MAAOsM,EAAOtM,UAElBuM,iBAAkBpD,EAAKoD,iBACvBjL,KAAI,K,cC1CZxC,EAAOD,QAAUkC,QAAQ,a,6BCQV,SAASyL,EAA4BF,EAAwBG,GACxE,MAAO,CACHC,YAAaJ,EAAOI,YACpB5N,OAAQwN,EAAOhL,KACfqL,MAAOL,EAAOM,KACdpH,GAAI8G,EAAO9G,GACXqH,SAAUJ,EACVK,cAAeR,EAAOQ,cACtBzD,SAAUiD,EAAOjD,SACjB0D,YAAaT,EAAOS,aAd5B,mC,6BCCA,IAAYC,EAAZ,2CAAYA,GACR,uDACA,6DACA,6DACA,uDACA,uDACA,iDANJ,CAAYA,MAAwB,M,6BCEpC,IAAYC,EAAZ,2CAAYA,GACR,uDACA,uDACA,iDAEA,yDACA,yDACA,mDAPJ,CAAYA,MAAkB,M,6BCN9B,iBACI,WAAoBC,GAAA,KAAAA,iBAKxB,OAHI,YAAAxD,UAAA,SAAUJ,GACN,OAAO6D,KAAKC,MAAM9D,EAAS6D,KAAKE,IAAI,GAAIjF,KAAK8E,kBAErD,EANA,G,oCCAA,8CAIe,SAASI,EAAS/E,GAC7B,IAAK,kBAAkBgF,KAAKhF,GACxB,MAAM,IAAI,IAAqB,sCAInC,IAAMiF,EAASC,SAASC,cAAc,KAEtCF,EAAOG,KAAOpF,EAId,IAAMqF,EAAOJ,EAAOI,OAA8D,IAAtDrF,EAAIsF,QAAWL,EAAOM,SAAQ,IAAIN,EAAOI,MACjEJ,EAAOI,KACP,GAEJ,MAAO,CACHG,KAAMP,EAAOO,KACbD,SAAUN,EAAOM,SACjBH,KAAMH,EAAOG,KACbK,OAAWR,EAAOS,SAAQ,KAAKT,EAAOM,UAAWF,EAAO,IAAMA,EAAO,IACrEM,SAAUV,EAAOU,SACjBN,KAAI,EACJK,SAAUT,EAAOS,SACjBE,OAAQX,EAAOW,U,mFCpBR,SAASC,EACpBC,GAEA,OAAO,W,IAAE,sDACL,IAAMC,EAAWC,EAAKC,MAItB,OAAQH,EAAe,sCAAIE,EAAM,Y,IAAC,sDAG9B,IAAMtF,EAASqF,EAAQ,aAAIG,GAE3B,MAAsB,mBAAXxF,EACA,kBAAQA,GAGZA,S,6BCvBnB,IAAYyF,EAAZ,2CAAYA,GACR,2BADJ,CAAYA,MAAe,M,6BCOZ,IATmB,CAC9B,uCACA,sCACA,WACA,yBACA,WACA,uB,0CCsCG,SAASC,EAAsCC,EAAWtO,EAAauO,GAC1E,GAAgC,mBAArBA,EAAW7O,MAClB,OAAO6O,EAGX,IAAIC,EAAYD,EAAW7O,MAE3B,MAAO,CACHJ,IAAA,WACI,IAAMmP,EAAcD,EAAOvO,KAAK6H,MAOhC,OALA3I,OAAOC,eAAe0I,KAAM9H,EAAK,yCAC1BuO,GAAU,CACb7O,MAAO+O,KAGJA,GAEXC,IAAG,SAAChP,GACA8O,EAAS9O,IAjDN,IARf,SAAuBiP,EAAa3O,EAAWuO,GAC3C,OAAKvO,GAAQuO,EAINF,EAAoBM,EAAQ3O,EAAKuO,GASrC,SAA2DI,GAC9D,IAAMC,EAAe,YAAG,a,+CAAsB,OAAR,yBAAQ,EAAzB,CAAiBD,GAiBtC,OAfAxP,OAAO0P,oBAAoBF,EAAOtO,WAC7ByO,SAAQ,SAAA9O,GACL,IAAMuO,EAAapP,OAAO4P,yBAAyBJ,EAAOtO,UAAWL,GAEhEuO,GAAsB,gBAARvO,GAInBb,OAAOC,eACHwP,EAAgBvO,UAChBL,EACAqO,EAAoBM,EAAOtO,UAAWL,EAAKuO,OAIhDK,EA9BII,CAAmBL,K,6BCRlC,8CAWe,SAASM,EAAsBC,EAAoBC,GAC9D,IAAM9J,EAAY6J,EAAS7J,WAAa8J,EAAe9J,WAAa,GAC9DC,EAAW4J,EAAS5J,UAAY6J,EAAe7J,UAAY,GAEjE,MAAO,CACH8J,WAAYF,EAASE,WAAa,IAAIxG,KAAI,SAAA7D,GAAW,mBAAqBA,MAC1EsK,WAAYH,EAAShK,GACrBoK,QAASJ,EAASI,QAClBC,YAAaL,EAASK,YACtBC,MAAON,EAASM,OAASL,EAAeK,OAAS,GACjDnK,UAAS,EACTC,SAAQ,EACRtG,KAAMkQ,EAASO,UAAY,CAACpK,EAAWC,GAAU8C,KAAK,KACtDsH,kBAAmBR,EAASS,eAAiBT,EAASS,cAAc3Q,Q,gHCP7D,SAAS4Q,EAAmBC,EAAcC,QAAA,IAAAA,MAAA,IACrD,IAkF2BC,EACrBC,EAnFAzH,EAAgBsH,EAAMI,SAAS1H,cAC/BO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI2K,EAAMK,QACVF,MAAO,YAAuBH,EAAMM,UAAWN,EAAMI,SAAS1H,cAAe,aAC7E2H,QAASL,EAAMK,QACfD,SAAUJ,EAAMI,SAASG,KACzBC,qBAAsBR,EAAMQ,qBAC5BC,QAASC,EAA0BV,EAAME,SAAUD,EAAUQ,SAC7DE,SAAU,CACNxH,OAAQ6G,EAAMY,WACdtH,cAAeL,EAAkBM,UAAUyG,EAAMY,aAErDC,OAAQ,CACJC,iBAAkB,iBAAOd,EAAMe,SAAS,SAACC,EAAKH,GAC1C,OAAOG,EAAMH,EAAOC,mBACrB,GACHC,QAASf,EAAMe,QAAQhI,IAAI,MAE/BM,SAAU,CACNF,OAAQ6G,EAAMtE,eACdpC,cAAeL,EAAkBM,UAAUyG,EAAMtE,iBAErD/G,MAAOsL,EAAUgB,WACjBC,YAAajB,EAAUiB,YACvBC,sBAAuB,GACvBC,iBAuDuBlB,EAvDgBF,EAAME,SAwD3CC,EAAQ,iBAAOD,EAAU,CAAEmB,WAAY,oBAEtC,CACHC,sBAAuB,iBAAOnB,GAAO,SAACa,EAAKhI,GAAS,OAAAA,EAAKG,OAAS6H,IAAK,GACvEO,wBAAyB,gBAAMpB,EAAMpH,KAAI,SAAAC,GAAQ,OAC7CuH,KAAMvH,EAAKwI,OAAOjB,KAClBO,iBAAkB9H,EAAKG,OACvBsI,iBAAkBzI,EAAKwI,OAAOE,UAC9BN,gBAAiB,CACbO,QAAS3I,EAAKG,OAASH,EAAKwI,OAAOE,UACnCnB,KAAMvH,EAAKwI,OAAOjB,KAClBqB,aAAc,QAEjB,UApELC,WAAYC,EAA4B9B,GACxC5M,OAAQ4M,EAAM5M,OACd2O,gBAAiB/B,EAAM+B,gBACvBC,eAAgBhC,EAAMgC,eACtBC,WAAYjC,EAAMiC,WAClBC,SAAU,CACN/I,OAAQ6G,EAAMmC,kBACd7I,cAAeL,EAAkBM,UAAUyG,EAAMmC,mBACjDC,qBAAsBpC,EAAMqC,2BAC5BC,4BAA6BrJ,EAAkBM,UAAUyG,EAAMqC,6BAEnE3C,YAAa,CACTvG,OAAQoJ,EAAiBvC,EAAME,WAEnCsC,MAAOxC,EAAMwC,MACbC,SAAU,CACNtJ,OAAQ6G,EAAMyC,SACdnJ,cAAeL,EAAkBM,UAAUyG,EAAMyC,WAErDC,SAAU,CACNvJ,OAAQ6G,EAAM2C,kBACdrJ,cAAeL,EAAkBM,UAAUyG,EAAM2C,oBAErDC,WAAY,CACRzJ,OAAQ6G,EAAM6C,YACdvJ,cAAe0G,EAAM8C,uBAmBjC,SAASC,EAA2B3P,GAChC,MAAO,kBAAkBA,EAG7B,SAASmP,EAAiBrC,GACtB,IAAMlH,EAAO,eAAKkH,EAAU,CAAEmB,WAAY,gBAE1C,OAAOrI,EAAOA,EAAKG,OAAS,EAqBhC,SAASuH,EAA0BR,EAA0BO,QAAA,IAAAA,MAAA,IACzD,IAAMzH,EAAO,eAAKkH,EAAU8C,GAE5B,OAAKhK,EAIE,CACH3D,GAAI2D,EAAKqI,WACTjO,OAAQ2P,EAA2B/J,EAAKwI,OAAOyB,MAC/CC,SAAUlK,EAAKwI,OAAO2B,aACtBC,UAAW3C,EAAQ2C,WAPZ,GAWf,SAASJ,EAAsBvC,GAC3B,MAA8B,oBAAvBA,EAAQY,YAA2D,gBAAvBZ,EAAQY,WAG/D,SAASS,EAA4B9B,GACjC,IAAMqD,EAAiE,GAUvE,OATc,yBACPrD,EAAMM,UAAUgD,cAChBtD,EAAMM,UAAUiD,cAGjBtE,SAAQ,SAAAjG,GAOlB,IAAiCwK,EANzBH,EAAiBrK,EAAK3D,KAMGmO,EAN2BxK,EAO1C,CAAC,KAAM,KAAM,MAEdH,QAAO,SAACgJ,EAAYtB,GAC7B,IAAMvH,EAAOwK,EAASC,aAAe,eAAKD,EAASC,aAAa,SAAAzK,GAAQ,OAAAA,EAAKuH,OAASA,KAEtF,OAAKvH,GAIL6I,EAAWtB,GAAQ,CACfpR,KAAMqU,EAASrU,KACfoN,YAAaiH,EAASrU,KACtBuU,MAAOF,EAAStK,SAChBd,IAAKY,EAAK2K,KACVC,UAAW5K,EAAK6K,KAChBC,YAAa9K,EAAK2K,KAClBI,YAAa/K,EAAKgL,QAClBC,YAAajL,EAAKuH,MAGfsB,GAdIA,IAeZ,QAzBIwB,I,8ECrII,SAASa,EAAkBC,GACtC,ICZ+CC,EACzCC,EDWA3L,EAAgByL,EAASG,KAAKlE,SAAS1H,cACvCO,EAAoB,IAAI,IAAkBP,GAEhD,MAAO,CACHrD,GAAI8O,EAASG,KAAKjP,GAClB8K,MAAO,YAAuBgE,EAASG,KAAKhE,UAAW5H,GACvD0H,SAAU+D,EAASG,KAAKlE,SAASG,KACjCM,OAAQ,CACJC,iBAAkB,iBAAOqD,EAASG,KAAKvD,SAAS,SAACC,EAAKH,GAClD,OAAOG,EAAMH,EAAOC,mBACrB,GACHC,QAASoD,EAASG,KAAKvD,QAAQhI,IAAI,MAEvCM,SAAU,CACNF,OAAQgL,EAASG,KAAK5I,eACtBpC,cAAeL,EAAkBM,UAAU4K,EAASG,KAAK5I,iBAE7DyF,uBC7B2CiD,ED6BOD,EAASC,WC5BzDC,EAAwC,IAE7CD,GAAc,IAAInF,SAAQ,SAAAsF,IACtBA,EAAUC,SAAW,IAAIvF,SAAQ,SAAAwF,GAC9BJ,EAAcK,KAAK,CACfC,aAAc,GACdC,aAAc,KACdnS,QAAS,GACToS,YAAaJ,EAAOZ,aAKzBQ,GDgBHjD,gBAAiB,CACbE,sBAAuB,iBAAO6C,EAASW,kBAAkB,SAAC9D,EAAK+D,GAC3D,OAAO/D,EAAM+D,EAAYC,OAC1B,GACHzD,wBAAyB,gBAAM4C,EAASW,iBAAiB/L,IAAI,KAA+B,SAEhGmJ,SAAU,CACN/I,OAAQgL,EAAShC,kBACjB7I,cAAeL,EAAkBM,UAAU4K,EAAShC,mBACpDC,qBAAsB+B,EAAS9B,2BAC/BC,4BAA6BrJ,EAAkBM,UAAU4K,EAAS9B,4BAClE4C,SAAU,eAAKd,EAASG,KAAKhE,UAAUgD,eAAe,SAAAE,GAAY,OAAAA,EAAS0B,uBAE/EvE,SAAU,CACNxH,OAAQgL,EAASxD,SACjBrH,cAAeL,EAAkBM,UAAU4K,EAASxD,WAExDjB,YAAa,CACTvG,OAAQgL,EAAS9E,SAAW8E,EAAS9E,SAASK,YAAc,GAEhEyF,YAAa,CACThM,OAAQgL,EAAS1B,SACjBnJ,cAAeL,EAAkBM,UAAU4K,EAAS1B,WAExDD,MAAO2B,EAAS3B,MAChBC,SAAU,CACNtJ,OAAQgL,EAAS1B,SACjBnJ,cAAeL,EAAkBM,UAAU4K,EAAS1B,WAExDC,SAAU,CACNvJ,OAAQgL,EAASxB,kBACjBrJ,cAAeL,EAAkBM,UAAU4K,EAASxB,oBAExDC,WAAY,CACRzJ,OAAQgL,EAASvB,WACjBtJ,cAAeL,EAAkBM,UAAU4K,EAASvB,cArEhE,mC,eEAAjU,EAAOD,QAAUkC,QAAQ,+B,6BC2CzB,IAAYwU,EAOAC,EAUAC,EAQAC,EAOAC,EAhCZ,+GAAYJ,GACR,UACA,UACA,UACA,UAJJ,CAAYA,MAAkB,KAO9B,SAAYC,GACR,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAPJ,CAAYA,MAA2B,KAUvC,SAAYC,GACR,cACA,oBACA,cACA,sBACA,gBALJ,CAAYA,MAAoB,KAQhC,SAAYC,GACR,WACA,WACA,WACA,WAJJ,CAAYA,MAAyB,KAOrC,SAAYC,GACR,0BACA,oBAFJ,CAAYA,MAAqB,M,6BCzEjC,YAKA,aACI,WACYC,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAsFhB,OAnFI,YAAAC,WAAA,sBACI,OAAO1N,KAAKwN,cACPG,WAAW,yDACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUC,OACnD,MAAM,IAAI,IAGd,OAAO,EAAKJ,QAAQG,UAAUC,WAI1C,YAAAC,QAAA,sBACI,OAAO9N,KAAKwN,cACPG,WAAW,iEACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUG,aACnD,MAAM,IAAI,IAGd,OAAO,EAAKN,QAAQG,UAAUG,iBAI1C,YAAAC,kBAAA,sBACI,OAAOhO,KAAKwN,cACPG,WAAW,iEACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUK,cACnD,MAAM,IAAI,IAGd,OAAO,EAAKR,QAAQG,UAAUK,kBAI1C,YAAAC,WAAA,sBACI,OAAOlO,KAAKwN,cACPG,WAAW,yDACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUO,OACnD,MAAM,IAAI,IAGd,OAAO,EAAKV,QAAQG,UAAUO,WAI1C,YAAAC,mBAAA,sBACI,OAAOpO,KAAKwN,cACPG,WAAW,kEACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUS,eACnD,MAAM,IAAI,IAGd,OAAO,EAAKZ,QAAQG,UAAUS,mBAI1C,YAAAC,iBAAA,sBACI,OAAOtO,KAAKwN,cACPG,WAAW,gEACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUW,aACnD,MAAM,IAAI,IAGd,OAAO,EAAKd,QAAQG,UAAUW,iBAI1C,YAAAC,kBAAA,sBACI,OAAOxO,KAAKwN,cACPG,WAAW,iEACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQG,YAAc,EAAKH,QAAQG,UAAUa,cACnD,MAAM,IAAI,IAGd,OAAO,EAAKhB,QAAQG,UAAUa,kBAG9C,EAzFA,G,wDCFA,aAaI,WACYC,GAAA,KAAAA,yBAPJ,KAAAC,gBAGJ,GAgIR,OAzHI,YAAAC,WAAA,SAAWC,GACP7O,KAAK8O,aAAeD,GAGxB,YAAAE,UAAA,sBACI,IAAK/O,KAAK8O,aACN,MAAM,IAAI,IAAoB,IAAwBE,uBAQ1D,OALKhP,KAAKiP,UACNjP,KAAKiP,QAAUjP,KAAK0O,uBAAuBhB,aACtC1O,MAAK,SAAA6O,GAAU,OAAAA,EAAO5V,OAAO,CAAEiX,cAAe,EAAKJ,mBAGrD9O,KAAKiP,SAGhB,YAAAE,UAAA,WASI,OARKnP,KAAKoP,UACNpP,KAAKoP,QAAUC,QAAQC,IAAI,CACvBtP,KAAK+O,YACL/O,KAAK0O,uBAAuBR,eAE/BlP,MAAK,SAAC,G,IAAC6O,EAAA,KAAoB,OAAZ,KAAmB5V,OAAO,CAAE4V,OAAM,QAG/C7N,KAAKoP,SAGhB,YAAAG,kBAAA,WASI,OARKvP,KAAKwP,kBACNxP,KAAKwP,gBAAkBH,QAAQC,IAAI,CAC/BtP,KAAK+O,YACL/O,KAAK0O,uBAAuBN,uBAE3BpP,MAAK,SAAC,G,IAAC6O,EAAA,KAA4B,OAApB,KAAmC5V,OAAO,CAAE4V,OAAM,QAGnE7N,KAAKwP,iBAGhB,YAAAC,OAAA,WASI,OARKzP,KAAK0P,OACN1P,KAAK0P,KAAOL,QAAQC,IAAI,CACpBtP,KAAK+O,YACL/O,KAAK0O,uBAAuBZ,YAE/B9O,MAAK,SAAC,G,IAAC6O,EAAA,KAA0B,OAAlB,KAA+B5V,OAAO,CAAE4V,OAAM,QAG3D7N,KAAK0P,MAGhB,YAAAC,iBAAA,SAAiB/Q,GACb,IAAMgR,EAAWhR,GAAWA,EAAQuP,OAAS,SAAW,UACpD0B,EAAS7P,KAAK2O,gBAAgBiB,GAmBlC,OAjBKC,IACDA,EAASR,QAAQC,IAAI,CACjBtP,KAAK+O,YACL/O,KAAK0O,uBAAuBV,sBAE/BhP,MAAK,SAAC,G,IAAC6O,EAAA,KAA2B,OAAnB,KAAiC5V,OAAO,oBAAE4V,OAAM,EAAEiC,OAAO,GAASlR,OACjFU,OAAM,SAAAC,GACH,GAAIA,GAAwB,qCAAfA,EAAM+I,KACf,MAAO,CAAEyH,gBAAYnQ,EAAWoQ,SAAU,WAAM,OAAAX,QAAQY,YAG5D,MAAM1Q,KAGVS,KAAK2O,gBAAgBiB,GAAYC,GAG9BA,GAGX,YAAAK,gBAAA,WASI,OARKlQ,KAAKmQ,gBACNnQ,KAAKmQ,cAAgBd,QAAQC,IAAI,CAC7BtP,KAAK+O,YACL/O,KAAK0O,uBAAuBJ,qBAE/BtP,MAAK,SAAC,G,IAAC6O,EAAA,KAA0B,OAAlB,KAA+B5V,OAAO,CAAE4V,OAAM,QAG3D7N,KAAKmQ,eAGhB,YAAAC,0BAAA,WASI,OARKpQ,KAAKqQ,aACNrQ,KAAKqQ,WAAahB,QAAQC,IAAK,CAC3BtP,KAAK+O,YACL/O,KAAK0O,uBAAuBF,sBAE3BxP,MAAK,SAAC,G,IAAC6O,EAAA,KAAuB,OAAf,KAAyB5V,OAAO,CAAE4V,OAAM,QAGzD7N,KAAKqQ,YAGhB,YAAAL,SAAA,sBACI,OAAOX,QAAQC,IAAI,CACftP,KAAKsQ,UAAUtQ,KAAK0P,MACpB1P,KAAKsQ,UAAUtQ,KAAK2O,gBAAgB4B,SACpCvQ,KAAKsQ,UAAUtQ,KAAK2O,gBAAgBR,QACpCnO,KAAKsQ,UAAUtQ,KAAKmQ,eACpBnQ,KAAKsQ,UAAUtQ,KAAKqQ,cACrBrR,MAAK,WACJ,EAAK0Q,UAAO9P,EACZ,EAAKuQ,mBAAgBvQ,EACrB,EAAK+O,gBAAkB,GACvB,EAAK0B,gBAAazQ,MAIlB,YAAA0Q,UAAR,SAAkB5Z,GACd,OAAOA,EACHA,EAAOsI,MAAK,SAAAwR,GAAO,OAAAA,EAAIR,cACvBX,QAAQY,WAEpB,EA1IA,G,oCCHA,IAAYQ,EAAZ,2CAAYA,GACR,qCADJ,CAAYA,MAAwB,M,6BCApC,IAEA,2BA+BA,OA9BI,YAAAC,OAAA,SAAO9Y,GACG,uCAAC,OAAA+Y,OAAA,IAAQ,EAAR,KAAY,OAAAC,OAAA,IAAO,EAAP,KACbC,EAAeF,EAAMG,MAAM,EAAG,GAC9BC,EAA8B,IAAhBH,EAAKtT,OAAesT,EAAKE,OAAO,GAAMF,EAAOA,EAAKE,MAAM,EAAG,GAAKH,EAAMG,MAAM,GAGhG,OAAIlZ,EAAM0F,OAAS,EACRqT,EAIP/Y,EAAM0F,OAAS,IAAMyT,EACdF,EAGDA,EAAY,MAAwBE,GAGlD,YAAAC,SAAA,SAASpZ,GACC,uCAAC,OAAA+Y,OAAA,IAAQ,EAAR,KAAY,OAAAC,OAAA,IAAO,EAAP,KAEnB,MAAK,QAAQzL,KAAKwL,IAAW,QAAQxL,KAAKyL,GAInC,CACHD,MAAwB,IAAjBA,EAAMrT,OAAe,IAAIqT,EAAUA,EAAMG,MAAM,EAAG,GACzDF,KAAsB,IAAhBA,EAAKtT,OAAe,KAAKsT,EAASA,EAAKE,MAAM,EAAG,IAL/C,CAAEH,MAAO,GAAIC,KAAM,KAQtC,EA/BA,G,oCCJA,mBAKA,2BA8BA,OA7BI,YAAAF,OAAA,SAAO9Y,GACK,IAAAqZ,EAAA,oBAAAA,KAER,IAAKA,EACD,OAAOrZ,EAGX,IAAMsZ,EAAY,cAAI,yBAAetZ,GAAOkJ,KAAI,SAAAqQ,GAAQ,qBAAIA,EAAKC,aAC3DC,EAAmBrR,KAAKsR,SAAS1Z,GAAOkZ,MAAM,EAAGI,GAEvD,OAAOD,EAAKM,KACPvO,QAAO,SAAAwO,GAAY,OAAAH,EAAiB/T,OAASkU,KAC7C5Q,QAAO,SAAC6Q,EAAQD,EAAUhP,GAAU,MACjC,CACIiP,EAAOX,MAAM,EAAGU,EAAWhP,GAC3BiP,EAAOX,MAAMU,EAAWhP,IAC1BlC,KAnBO,OAoBV+Q,IAGX,YAAAC,SAAA,SAAS1Z,GAGL,OAFQ,oBAAAqZ,KAMDrZ,EAAM8Z,QAAQ,IAAI7O,OA9BR,IA8BiC,KAAM,IAH7CjL,GAKnB,EA9BA,G,oCCFA,sCAAM+Z,EAAc,CAChB,oBACA,sBACA,qBACA,oBACA,iBAQW,SAASC,EAAoBhJ,GACxC,MAAO,CACHN,KAAMM,EAAON,KACblH,SAAUwH,EAAOiJ,YACjBlF,aAAcgF,EAAYlM,QAAQmD,EAAOkJ,e,mEClBrCC,E,gBAAZ,SAAYA,GACR,mEACA,uDACA,qDACA,uDACA,mEALJ,CAAYA,MAAuB,KAanC,kBACI,WACW9Y,GADX,MAGI,YAOR,SAAyBC,GACrB,OAAQA,GACR,KAAK6Y,EAAwBC,uBACzB,MAAO,oFAEX,KAAKD,EAAwB/C,sBACzB,MAAO,mFAEX,KAAK+C,EAAwBE,uBACzB,MAAO,oFAEX,KAAKF,EAAwBG,6BACzB,MAAO,mFAEX,QACI,MAAO,8EAtBDnY,CAAgBd,KAAS,K,OAFxB,EAAAA,UAIP,EAAK/B,KAAO,sBACZ,EAAKgC,KAAO,kB,EAEpB,OATiD,yBASjD,EATA,CAAiD,K,oCCfjD,oDAGe,SAASiZ,EACpBjZ,EACAqG,EACAN,GAEA,OAOmBmT,EAPD7S,IAQD6S,EAAOlZ,MAAQkZ,EAAO7S,MAP5B,iBAAO,aAAGA,GAAQ,qBAAW,4BAAkBrG,EAAMqG,EAAM8S,QAASpT,KAGxE,qBAAW,4BAAkB/F,EAAMqG,EAAON,IAGrD,IAAuBmT,I,6DCVR,SAASE,EACpBC,GAgBA,OAAO,mBAdP,W,IAAgC,sDAC5B,IAAMH,EAASG,EAAGzb,KAAI,MAAPyb,EAAE,0BAAMvS,MAASmG,IAEhC,OAAIiM,aAAkB,aACX,eAAKA,GAAQI,KAAK,yBAGP,mBAAXJ,EACA,mBAAQ,SAAAK,GAAS,sBAAKL,EAAOK,IAAQD,KAAK,4BAG9CJ,KCjBA,SAASM,EAAgBC,GACpC,OAAOA,GAAmC,kBAAnBA,EAAMC,SCAlB,SAASC,EACpBrM,EACAtO,EACAuO,GAEA,IAAMqM,EAAkB,IAAIC,QAE5B,SAASC,EAA6BtM,GAAtC,WACI,OAAO,W,UAAE,kDACL,IAAMuM,EAAU9M,EAAKA,EAAK7I,OAAS,GAC3BsV,GAAA,QAAAA,UAAA,IAAAA,SAER,IAAKA,EACD,OAAOlM,EAAO5P,KAAI,MAAX4P,EAAM,0BAAM,GAASP,IAGhC,IAAM+M,EAAkBJ,EAAgBtb,IAAI,IAAS,GAUrD,OARKsb,EAAgBtb,IAAI,IACrBsb,EAAgBlM,IAAI,EAAMsM,GAGzBA,EAAgBhb,KACjBgb,EAAgBhb,GAAOoa,EAAY5L,KAGhC,EAAAwM,EAAgBhb,IAAKpB,KAAI,kCAAC,GAASqP,KAIlD,MAAO,CACH3O,IAAG,WACC,GAAgC,mBAArBiP,EAAW7O,MAClB,MAAM,IAAI+C,MAAM,yCAGpB,IAAM/C,EAAQob,EAAelc,KAAKkJ,KAAMyG,EAAW7O,OAInD,OAFAP,OAAOC,eAAe0I,KAAM9H,EAAK,yCAAKuO,GAAU,CAAE7O,MAAK,KAEhDA,I,0FCrCJ,SAASub,EACpBC,EACAC,GAEA,YAFA,IAAAA,MAAA,IAEO/Q,MAAMC,QAAQ8Q,GACjB,YAAa,yBACND,EACAC,ICLA,SACXD,EACAE,GAEA,IAAMC,EAAY,eAAK,iBAAOD,GAAoB,SAAAE,GAAM,OAACA,MACnDC,EAAY,eAAK,iBAAOH,IAE9B,OAAO,YAAa,yBACT,qBAAWF,EAAcG,GACzBE,IDFPC,CAAcN,EAAcC,G,iEEfpC3c,EAAOD,QAAUkC,QAAQ,mB,cCAzBjC,EAAOD,QAAUkC,QAAQ,kD,6BCAzB,6CAEe,SAASgb,EAAStb,EAAaub,GAC1C,OAAItR,MAAMC,QAAQlK,GACPA,EAAOyI,KAAI,SAAAlJ,GAAS,OAAA+b,EAAS/b,EAAOgc,MAG3C,wBAAcvb,GACP,oBAAU,iBAAOA,EAAQub,IAAY,SAAC/S,EAAQjJ,EAAOM,GACxD2I,EAAO3I,GAAOyb,EAAS/b,EAAOgc,KAC/B,IAGAvb,I,sFCCX,aACI,WACYwb,EACAC,GADA,KAAAD,yBACA,KAAAC,uBA0EhB,OAvEI,YAAAC,aAAA,SAAa3W,EAAYwB,GAAzB,WACI,OAAO,iBACH,aAAG,uBAAa,IAAmBoV,wBACnC,gBACIhU,KAAK8T,qBAAqBG,WAAW,yCAAKrV,GAAO,CAAEgU,UAAU,KAC7D,iBAAM,WAAM,SAAKiB,uBAAuBE,aAAa3W,EAAIwB,GACpDI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KAAW,8BAAa,IAAmBiZ,sBAAuBjZ,WAErFuX,KACE,sBAAW,SAAAjT,GAAS,mBAAiB,IAAmB4U,mBAAoB5U,QAIpF,YAAA6U,oBAAA,SAAoBxV,GAApB,WACI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,IAAmBuB,wBACnC,EAAKF,qBAAqBG,aAC1B,iBAAM,kE,gFAIF,GAHMI,EAAQ5B,EAAM6B,aACdC,EAAUF,EAAMG,OAAOC,sBAEZF,EAAQG,WACrB,MAAM,IAAI,IAAiB,IAAqBnb,uBAGnC,SAAMyG,KAAK6T,uBAAuBE,aAAaQ,EAAQG,WAAY9V,I,OAEpF,OAFQ3D,EAAS,SAA2E,KAErF,CAAP,EAAO,uBAAa,IAAmBiZ,sBAAuBjZ,eAEpEuX,KACE,sBAAW,SAAAjT,GAAS,mBAAiB,IAAmB4U,mBAAoB5U,SAIpF,YAAAoV,eAAA,SACI1Z,EACA2D,GAFJ,WAII,OAAO,SAAA6T,GAAS,WAAI,cAAW,SAAA5T,GAC3B,IACMqN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAAmB+V,0BAE9C,EAAKhB,uBAAuBc,eAAezI,EAAS9O,GAAInC,EAAM2D,GACzDI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAmBgW,wBAAyB7Z,IACvE4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAmBwV,qBAAsB3Z,YAK1F,YAAA4Z,oBAAA,SAAoBpW,GAApB,WACI,OAAO,SAAA6T,GACH,IACMvG,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,OAAO,EAAKya,aAAa7H,EAAS9O,GAAIwB,KAGlD,EA7EA,G,oGCAA,aACI,WACYqW,EACApB,GADA,KAAAoB,4BACA,KAAApB,yBAyVhB,OAtVI,YAAAqB,uBAAA,SACIC,EACAvW,GAFJ,WAII,OAAO,SAAA6T,GACH,IAAM4B,EAAQ5B,EAAM6B,WAGpB,IAFiBD,EAAMnI,SAAS0I,cAG5B,MAAM,IAAI,IAAiB,IAAqBtb,iBAGpD,IAAM8b,EAAsBf,EAAMnX,aAAamY,wBAAwBF,EAAYG,iBAEnF,IAAKF,EACD,MAAM,IAAI,IAAqB,kDAGnC,IAAM/M,EAAY,EAAKkN,iBACnBJ,EAAY9M,UACZ+M,EACAf,EAAMhI,KAAKmJ,WAGf,OAAKnN,EAAU/K,OAIR,EAAKmY,kBAAkB,CAC1BrY,GAAIgY,EAAoBhY,GACxBkY,gBAAiBH,EAAYG,gBAC7BjN,UAAS,GACVzJ,EAJI,CAIK6T,GAPD,EAAKiD,kBAAkBN,EAAoBhY,GAAIwB,EAA/C,CAAwD6T,KAW3E,YAAAkD,qBAAA,SACIR,EACAvW,GAFJ,WAII,OAAO,SAAA6T,GACH,IAAM4B,EAAQ5B,EAAM6B,WACdc,EAAsBf,EAAMnX,aAAamY,wBAAwBF,EAAYG,iBAEnF,OAAO,EAAKM,2BAA2B,CACnCxY,GAAIgY,GAAuBA,EAAoBhY,GAC/CkY,gBAAiBH,EAAYG,gBAC7BjN,UAAW,EAAKwN,cACZV,EAAY9M,UACZ+M,EACAf,EAAMhI,KAAKmJ,YAEhB5W,EARI,CAQK6T,KAIpB,YAAAqD,qBAAA,SACI1Y,EACAwB,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACdpI,EAAWmI,EAAMnI,SAAS0I,cAC1B1X,EAAemX,EAAMnX,aAAa6Y,kBAExC,IAAK7J,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAK4D,IAAiBA,EAAaI,OAC/B,MAAM,IAAI,IAAiB,IAAqBjE,qBAGpD,IAAM2c,EAAwB,CAC1B5Y,GAAIF,EAAa,GAAGE,GACpB6Y,iBAAkB7Y,GAGhB8Y,EAAkB,CACpB9Y,GAAIF,EAAa,GAAGE,IAGxByB,EAASC,KAAK,uBAAa,IAAsBqX,mCAA+BvW,EAAWsW,IAE3F,EAAKjB,0BAA0BQ,kBAAkBvJ,EAAS9O,GAAI4Y,EAAuBpX,GAChFI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBACV,IAAsBsX,8BACtBnb,EACAib,IAGJrX,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BACX,IAAsB8W,2BACtBjb,EACA8a,YAMpB,YAAAI,oBAAA,SAAoB1X,GAApB,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMqN,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cAE3C,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAAsByX,+BAEjD,EAAK1C,uBAAuBE,aAAa7H,EAAS9O,GAAI,yCAC/CwB,GAAO,CACV4X,OAAQ,CACJC,QAAS,CAAC,IAAiBC,8BAGlC1X,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAsB6X,6BAA8B1b,IAC/E4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAsBqX,0BAA2Bxb,YAK9F,YAAAyb,cAAA,SACI5Z,EACA2B,GAFJ,WAII,OAAO,SAAA6T,GACH,IAAM0C,EAAc,EAAK2B,6BAA6B7Z,EAASwV,GACzDvV,EAAeuV,EAAM6B,WAAWpX,aAAa6Y,kBAMnD,OAJI7Y,GAAgBA,EAAaI,SAC5B6X,EAA6C/X,GAAKF,EAAa,GAAGE,IAGhE,EAAKwY,2BAA2BT,EAAavW,EAA7C,CAAsD6T,KAIrE,YAAAsE,mBAAA,SACI7Z,EACA0B,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMqN,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cAE3C,IAAK1I,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB9D,iBAGpDuF,EAASC,KAAK,uBAAa,IAAsBkY,8BAEjD,EAAK/B,0BAA0B8B,mBAAmB7K,EAAS9O,GAAIF,EAAc0B,GACxEI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAsBmY,4BAA6Bhc,IAC9E4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAsB2X,yBAA0B9b,YAKjG,YAAAqa,kBAAA,SACIN,EACAvW,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMqN,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cAE3C,IAAK1I,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB9D,iBAGpD,IAAM4c,EAAkB,CAAE9Y,GAAI+X,EAAY/X,IAE1CyB,EAASC,KAAK,uBAAa,IAAsBqY,gCAA4BvX,EAAWsW,IAExF,EAAKjB,0BAA0BQ,kBAAkBvJ,EAAS9O,GAAI+X,EAAavW,GACtEI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAsBsY,2BAA4Bnc,EAAMib,IACnFrX,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAsB8X,wBAAyBjc,EAAU8a,YAK1G,YAAAR,kBAAA,SACI4B,EACA1Y,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMqN,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cACrCsB,EAAkB,CAAE9Y,GAAIka,GAE9B,IAAKpL,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB9D,iBAGpDuF,EAASC,KAAK,uBAAa,IAAsByY,gCAA4B3X,EAAWsW,IAExF,EAAKjB,0BAA0BS,kBAAkBxJ,EAAS9O,GAAIka,EAAe1Y,GACxEI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAsB0Y,2BAA4Bvc,EAAMib,IACnFrX,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAsBkY,wBAAyBrc,EAAU8a,YAK1G,YAAAwB,qBAAA,SACIvC,EACAvW,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMqN,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cAE3C,IAAK1I,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB9D,iBAGpD,IAAM4c,EAAkB,CAAE9Y,GAAI+X,EAAY/X,IAE1CyB,EAASC,KAAK,uBAAa,IAAsBqX,mCAA+BvW,EAAWsW,IAE3F,EAAKjB,0BAA0BQ,kBAAkBvJ,EAAS9O,GAAI+X,EAAavW,GACtEI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAsBsX,8BAA+Bnb,EAAMib,IACtFrX,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAsB8W,2BAA4Bjb,EAAU8a,YAKrG,YAAAN,2BAAR,SACIT,EACAvW,GAFJ,WAII,OAAO,SAAA6T,GACH,IAAMvG,EAAWuG,EAAM6B,WAAWpI,SAAS0I,cAE3C,IAAK1I,IAAaA,EAAS9O,GACvB,MAAM,IAAI,IAAiB,IAAqB9D,iBAGpD,OAAI,EAAKqe,4BAA4BxC,GAC1B,EAAKM,kBAAkBN,EAAavW,EAApC,CAA6C6T,GAGjD,EAAKsE,mBAAmB,CAAC5B,GAAcvW,EAAvC,CAAgD6T,KAIvD,YAAAqE,6BAAR,SACIxB,EACA7C,GAEA,IACMpG,EADQoG,EAAM6B,WACDjI,KAAKmJ,UAExB,IAAKnJ,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAE9C,kBAAEiS,EAAA,EAAAA,cAAe,IAAAuM,mBAAA,IAAc,EAAd,KAEvB,MAAO,CACHtC,gBAAe,EACfjN,UAAW,yBAAKgD,EAAkBuM,GAAc9W,KAAI,SAAAC,GAAQ,OACxD8W,OAAQ9W,EAAK3D,GACbuE,SAAUZ,EAAKY,eAKnB,YAAA4T,iBAAR,SACIlN,EACA8M,EACA9I,GAEA,IAAKA,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAGpD,OAAO4G,KAAK8X,kBAAkB3C,EAAY4C,YAAa1L,GAAMvL,KAAI,SAAAkX,GAC7D,IAAMC,EAAa,eAAK5P,GAAW,SAAAkD,GAAY,OAAAA,EAASsM,SAAWG,EAAaH,UAEhF,OAAO,yCACAG,GAAY,CACfrW,SAAUsW,EAAcD,EAAarW,SAAWsW,EAAWtW,SAAYqW,EAAarW,cAEzFqB,QAAO,SAAAuI,GAAY,OAAAA,EAAS5J,SAAW,MAGtC,YAAAkU,cAAR,SACIxN,EACA8M,EACA9I,GAEA,IAAK8I,EACD,OAAO9M,EAGX,IAAKgE,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAGpD,OAAOiP,EACF6P,OAAOlY,KAAK8X,kBAAkB3C,EAAY4C,YAAa1L,IACvDrJ,QAAO,SAAAuI,GAAY,OAAAA,EAAS5J,SAAW,MAGxC,YAAAmW,kBAAR,SAA0BC,EAAuB1L,GAC7C,OAAO0L,EAAYjX,KAAI,SAAA+W,GACnB,IAAM9W,EAAO,eAAKsL,EAAKhE,UAAUgD,eAAe,SAAAE,GAAY,OAAAA,EAASnO,KAAOya,KAE5E,MAAO,CACHA,OAAM,EACNlW,SAAUZ,EAAOA,EAAKY,SAAW,OAKrC,YAAAgW,4BAAR,SACIQ,GAIA,QAFsBA,EAEC/a,IAE/B,EA5VA,G,wECPMgb,EAAmB,CACjB,wCACA,uCACA,sCACA,WACA,sBAGR,aACI,WACY1Z,GAAA,KAAAA,iBAmDhB,OAhDI,YAAAqY,mBAAA,SACIrC,EACAxX,EACA,G,IAAA,kBAAE6C,EAAA,EAAAA,QAAS,IAAAyW,OAAUC,QAAA,YAAAA,QAEftW,EAAM,6BAA6BuU,EAAU,gBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CACjClF,KAAMiC,EACNsZ,OAAQ,CACJC,QAAS,YAAoB2B,EAAkB3B,IAEnDvb,QAAO,EACP6E,QAAO,KAIf,YAAA0V,kBAAA,SACIf,EACAS,EACA,G,IAAA,kBAAEpV,EAAA,EAAAA,QAAS,IAAAyW,OAAUC,QAAA,YAAAA,QAEbrZ,EAAA,EAAAA,GAAI,6BACN+C,EAAM,6BAA6BuU,EAAU,iBAAiBtX,EAC9DlC,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe4Z,IAAInY,EAAK,CAChClF,KAAI,EACJub,OAAQ,CACJC,QAAS,YAAoB2B,EAAkB3B,IAEnDvb,QAAO,EACP6E,QAAO,KAIf,YAAA2V,kBAAA,SACIhB,EACA4C,EACA,G,IAAEvX,QAAA,YAAAA,QAEII,EAAM,6BAA6BuU,EAAU,iBAAiB4C,EAC9Dpc,EAAU,CAAE+E,OAAQ,IAAYC,QAChCuW,EAAU,YAAa2B,GAE7B,OAAOpY,KAAKtB,eAAe6Z,OAAOpY,EAAK,CAAEqW,OAAQ,CAAEC,QAAO,GAAIvb,QAAO,EAAE6E,QAAO,KAEtF,EArDA,G,oCCfe,SAASyY,EAAe5S,GACnC,OAAU6S,OAAOC,SAAS9S,OAAM,wFAAwFA,EAD5H,mC,uHCiBA,0BACY,KAAA+S,qBAAuB,IAAI,IAC3B,KAAAC,qBAAuB,IAAI,IAmHvC,OAjHI,YAAAC,UAAA,SAAUrQ,EAAkBsQ,GACxB,IAAMzR,EAAiByR,EAAczR,eAAe0R,oBAC9C7M,EAAW4M,EAAc5M,SAAS0I,cAClCxN,EAAW0R,EAAc1R,SAAS4R,cAClCjR,EAAQ+Q,EAAc/Q,MAAMkR,WAC5BC,EAAgBJ,EAAcK,eAAeC,iBAAiB5Q,EAAQ9I,SAAU8I,EAAQ6Q,WACxF/D,EAAkBwD,EAAcxD,gBAAgBgE,qBAChDpc,EAAe4b,EAAc5b,aAAa6Y,kBAC1CwD,EAAiBT,EAAc5b,aAAasc,oBAC5CC,EAAcX,EAActE,OAAOkF,iBACnCC,EAAgBb,EAActE,OAAOC,mBACrCmF,EAAiBd,EAAce,YAAYC,qBAC3CC,EAAcjB,EAAcK,eAAea,wBAC3ChS,EAAY8Q,EAAc/Q,MAAMkS,eAChCC,EAAmB9S,GAAYC,GAAkB,YAAsBD,EAAUC,GAEjF8S,EAAYP,GAAkBpR,EAAQ4R,cACvC,YAAoB5R,EAAQ4R,cAAgB,YAA6B5R,EAAQ4R,cAC/EtB,EAActQ,QAAQ6R,kBAAiB,KAAKT,EAAeU,iBAC9DxB,EAActQ,QAAQ6R,kBAE1B,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqBvgB,qBAGpD,MAAO,CACH2gB,iBAAkB/R,EAAQ+R,iBAC1BJ,UAAS,EACT/S,SAAU8S,EACV7S,eAAgBA,GAAkB,YAAqBA,GACvDiO,gBAAiBA,GAAmB,YAAqBA,EAAiBpY,GAC1Eqc,eAAgBA,GAAkB,YAA4BA,GAAgB,GAC9ElN,KAAMH,GAAY,YAAkBA,GACpCnE,MAAOA,GAAS,YAAmBA,EAAOC,GAC1CA,UAAS,EACTQ,QAASA,EAAQ4R,YACjBlB,cAAeA,GAAiBlZ,KAAKwa,wBAAwBtB,GAC7DuB,UAAW,CACPtC,QAAS,yCACF4B,GAAW,CACdW,eAAgBf,GAAiBA,EAAce,kBAGvDC,OAAQ,8BACRlI,MAAO,eAAKgH,GAAeA,EAAYmB,aAAc,CACjD,YACA,UACA,gBACA,gBAKZ,YAAAC,4BAAA,SAA4BC,EAA2BC,GAC3C,IAAAZ,EAAA,EAAAA,UAAWjO,EAAA,EAAAA,SAAUsI,EAAA,EAAAA,OAAQzM,EAAA,EAAAA,MAAOC,EAAA,EAAAA,UAAW,IAAAQ,eAAA,IAAU,EAAV,KAAc0Q,EAAA,EAAAA,cAAe8B,EAAA,EAAAA,kBAC9E7F,EAAcjJ,GAAYA,EAAShP,aAAa,GAChDoY,EAAkBH,GAAeA,EAAYG,gBAC7CiE,EAAiBpE,GAAeA,EAAY8F,uBAElD,MAAO,CACHd,UAAS,EACTjB,cAAeA,GAAiBlZ,KAAKwa,wBAAwBtB,GAC7D9R,SAAUW,GAASA,EAAMV,gBAAkB6E,GAAY,YAAsBA,EAAS9E,SAAUW,EAAMV,gBACtGA,eAAgBU,GAASA,EAAMV,gBAAkB,YAAqBU,EAAMV,gBAC5EiO,gBAAiBA,GAAmBpJ,GAAY,YAAqBoJ,EAAiBpJ,EAAShP,cAC/Fqc,eAAgBA,GAAkB,YAA4BA,GAAgB,GAC9ElN,KAAMH,GAAY,YAAkBA,GACpCnE,MAAOA,GAAS,YAAmBA,EAAOC,GAC1CA,UAAS,EACTQ,QAASxI,KAAKkb,4BAA4BJ,EAAQtS,GAClDiS,UAAW,CACPtC,QAAS,yCACF6C,GAAiB,CACpBN,eAAgBlG,GAAUA,EAAOD,QAAQmG,kBAGjDC,OAAQ,8BACRlI,MAAO+B,GAAU,eAAKA,EAAOiF,YAAYmB,aAAc,CACnD,YACA,UACA,gBACA,gBAKJ,YAAAJ,wBAAR,SAAgCtB,GAC5B,MAA6B,iBAAzBA,EAAcxS,QAA8BwS,EAAciC,QAI1DjC,EAAckC,oBAAsBlC,EAAckC,mBAAmBD,QAC9D,yCAAKjC,GAAa,CAAE9b,GAAI8b,EAAckC,mBAAmBD,UAG7DjC,EAPI,yCAAKA,GAAa,CAAEiC,QAASjC,EAAc9b,MAUlD,YAAA8d,4BAAR,SAAoCJ,EAA2BtS,GAC3D,MAAO,iBAAkBA,EAAS,yCAEvBA,GAAO,CACV6S,MAAOP,EAAOQ,qBACdC,SAAUT,EAAOU,wBAA0Bxb,KAAK4Y,qBAAqBtH,SAASwJ,EAAOU,0BACtF,yCAEIhT,GAAO,CACV6S,MAAOP,EAAOW,SACdC,SAAU1b,KAAK2Y,qBAAqB3H,SAAS8J,EAAOa,YAAc,IAClEC,OAAQd,EAAOe,UAAY,GAC3BN,SAAUvb,KAAK4Y,qBAAqBtH,SAASwJ,EAAOgB,YAAc,OAGlF,EArHA,G,oCCVA,iBAKI,WACY7M,GAAA,KAAAA,UA6BhB,OA1BI,YAAA8M,cAAA,SAAc1J,GAAd,WACI,OAAO,IAAIhD,SAAQ,SAACY,EAAS+L,GACzB,EAAK/M,QAAQ8M,cAAc1J,GAAS,SAAC9S,EAAYnE,GACzCmE,EACAyc,EAAO,EAAKC,mBAAmB1c,IAE/B0Q,EAAQ,EAAKgM,mBAAmB7gB,WAMhD,YAAA8gB,yBAAA,SAAyB7J,EAA6BxL,GAAtD,WACI,OAAO,IAAIwI,SAAQ,WACf,EAAKJ,QAAQiN,yBAAyB7J,EAAS,KAAMxL,OAIrD,YAAAoV,mBAAR,SAA2B7gB,GACvB,MAAO,CACHF,QAASE,EAASF,QAClBD,KAAMG,EAAS2f,KACf5f,OAAQC,EAASD,OACjBghB,WAAY/gB,EAAS+gB,aAGjC,EAnCA,G,oCCPe,SAASC,EAAUlkB,GAC9B,OAAkC,KAA3B,GAAGA,GAAMuN,QAAQ,OAAyC,KAA1B,GAAGvN,GAAMuN,QAAQ,KAD5D,mC,kECQA,YACI,WAAYrK,EAAoBZ,GAAhC,MACI,YAAMY,EAAU,CACZZ,QAASA,GAAW,yFACtB,K,OAEF,EAAKtD,KAAO,qBACZ,EAAKgC,KAAO,gB,EAEpB,OATgD,yBAShD,EATA,CAAgD,K,OCahD,SAASmjB,EAAWhhB,GAChB,OAAOA,EAAOuF,QAAO,SAACC,EAAkBtB,GACpC,OAAIA,EACO,yBAAIsB,EAAQ,CAAAtB,IAGhBsB,IACR,IAAIP,KAAK,K,wBCtBhB,WAGI,aAFQ,KAAAgc,gBAAyD,GAG7Dtc,KAAKuc,SAAS,WAAW,SAACnhB,EAAUZ,GAAY,WAAI,IAAaY,EAAU,CAAEZ,QAAO,OACpFwF,KAAKuc,SAAS,YAAY,SAACnhB,EAAUZ,GAAY,ODL1C,SACXY,EACAZ,GAEQ,IAAAS,EAAA,EAAAA,KACA,IAAAI,cAAA,IAAS,EAAT,KAER,OAAO,IAAI,IAAaD,EAAU,CAC9BZ,QAAS6hB,EAAWhhB,IAAWJ,EAAKsO,QAAUtO,EAAKuhB,OAAShiB,EAC5Da,OAAQA,EAAOiC,OACXjC,EAAOyF,KAAI,SAAAtG,GAAW,OAAG8N,KAAMrN,EAAK/B,KAAMsB,QAAO,MACjD,CAAC,CAAE8N,KAAMrN,EAAK/B,KAAMsB,QAASS,EAAKsO,QAAUtO,EAAKuhB,UCNJC,CAA6BrhB,EAAUZ,MACxFwF,KAAKuc,SAAS,cAAc,SAACnhB,EAAUZ,GAAY,OCN5C,SACXY,EACAZ,GAEQ,IAAAS,EAAA,EAAAA,KAER,OAAO,IAAI,IAAaG,EAAU,CAC9BZ,QAASA,GAAWS,EAAKsO,QAAUtO,EAAKuhB,MACxCnhB,OAAQ,CAAC,CACLiN,KAAMrN,EAAKqN,MAAQrN,EAAK/B,KACxBsB,QAASS,EAAKsO,QAAUtO,EAAKuhB,UDJkBE,CAA+BthB,EAAUZ,MAC5FwF,KAAKuc,SAAS,WAAW,SAACnhB,EAAUZ,GAAY,mBAA4BY,EAAUZ,MACtFwF,KAAKuc,SAAS,WAAW,SAAAnhB,GAAY,WAAI,IAAaA,MA6D9D,OA1DI,YAAAmhB,SAAA,SAASrjB,EAAcyjB,GACnB3c,KAAKsc,gBAAgBpjB,GAAQyjB,GAGjC,YAAAC,YAAA,SAAYxhB,EAAoBZ,GAG5B,OAFsBwF,KAAKsc,gBAAgBtc,KAAK6c,SAASzhB,KAAc4E,KAAKsc,gBAAgB/L,SAEvEnV,EAAUZ,IAG3B,YAAAqiB,SAAR,SAAiBzhB,GACb,GAAwB,IAApBA,EAASD,OACT,MAAO,UAGX,GAAI6E,KAAK8c,+BAA+B1hB,EAASH,MAC7C,MAAO,aAGX,GAAI+E,KAAK+c,6BAA6B3hB,EAASH,MAAO,CAClD,IAAM+hB,EAAe,eAAK5hB,EAASH,KAAK/B,KAAK+jB,MAAM,MAEnD,OAAOD,GAAgBhd,KAAKsc,gBAAgBU,GACxCA,EACA,WAGR,IAAMzd,EAAQ,eAAKnE,EAASH,MAAQG,EAASH,KAAKI,QAElD,OAAIkE,GAASA,EAAM+I,MAAQtI,KAAKsc,gBAAgB/c,EAAM+I,MAC3C/I,EAAM+I,KAGV,WAGH,YAAAwU,+BAAR,SACII,GAEA,IAAMC,EAA0BD,EAEhC,OAAQld,KAAK+c,6BAA6BG,IACG,iBAAlCC,EAAwBX,OACS,iBAAjCW,EAAwBjkB,MACW,iBAAnCikB,EAAwBhiB,QACW,iBAAnCgiB,EAAwB5T,QAG/B,YAAAwT,6BAAR,SACIG,GAEA,IAAME,EAAwBF,EAE9B,MAA+C,iBAAjCE,EAAsB/hB,QACO,iBAAhC+hB,EAAsBZ,OACS,iBAA/BY,EAAsBlkB,MACW,iBAAjCkkB,EAAsBjiB,QAEzC,EArEA,G,+CEAe,SAASkiB,EACpBhJ,EACAjC,GAEA,OAOJ,SAA4BA,GACxB,OAAOA,EAAOlZ,OAAS,IAAgBokB,WARnCC,CAAmBnL,GACZ,YAASiC,GAAO,SAAAzc,GAAS,OAAAA,IAAUwa,EAAOC,WAG9CgC,E,YCRI,SAAS3C,EAAW8L,EAAiBC,GAChD,YAAiB7d,IAAb6d,GAA0B,YAAQD,EAAcC,GACzCD,EAGJC,ECLI,SAASC,EACpBrlB,EACAH,EACAN,G,MAEA,OAAIS,GAAUA,EAAOG,eAAeN,IAAQ,YAAQG,EAAOH,GAAMN,GACtDS,EAGJ,yCACAA,KAAa,MACfH,GAAMN,EAAK,I,6BCGP+lB,EAAqC,CAC9CtiB,OAAQ,GACRuiB,SAAU,ICVC,SAASC,EACpBxJ,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAAqC,CACjD0G,KAAM+C,EACNziB,OAAQ,0BAAgB0iB,EAAeV,GACvCO,SAAUI,GAGPC,CAAQ5J,EAAOjC,GAG1B,SAAS0L,EACL/C,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAyBglB,8BAC9B,KAAK,IAAyBC,yBAC9B,KAAK,IAAmBjK,sBACxB,KAAK,IAAgBkK,mBACjB,OAAO1M,EAAQqJ,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQhL,gBAE1D,QACI,OAAO0T,GAIf,SAASgD,EACL1iB,EACA+W,GAEA,YAHA,IAAA/W,MAAoCsiB,EAActiB,QAG1C+W,EAAOlZ,MACf,KAAK,IAAmB8a,sBACxB,KAAK,IAAmBE,sBACpB,OAAOwJ,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAmBuU,mBACpB,OAAOuJ,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,KAAK,IAAyBgM,8BAC9B,KAAK,IAAyBH,8BAC1B,OAAOR,EAAUriB,EAAQ,mBAAeuE,GAE5C,KAAK,IAAyB0e,2BAC1B,OAAOZ,EAAUriB,EAAQ,cAAe+W,EAAOC,SAEnD,KAAK,IAAwBkM,6BAC7B,KAAK,IAAwBC,6BAC7B,KAAK,IAAyBC,yBAC9B,KAAK,IAAyBN,yBAC1B,OAAOT,EAAUriB,EAAQ,4BAAwBuE,GAErD,KAAK,IAAwB8e,0BAC7B,KAAK,IAAyBC,sBAC1B,OAAOjB,EAAUriB,EAAQ,uBAAwB+W,EAAOC,SAE5D,QACI,OAAOhX,GAIf,SAAS2iB,EACLJ,EACAxL,GAEA,YAHA,IAAAwL,MAAwCD,EAAcC,UAG9CxL,EAAOlZ,MACf,KAAK,IAAmB8a,sBACpB,OAAO0J,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmB1J,sBACxB,KAAK,IAAmBC,mBACpB,OAAOuJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAyBS,8BAC1B,OAAOX,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAyBU,2BAC9B,KAAK,IAAyBJ,8BAC1B,OAAOR,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAyBa,yBAC9B,KAAK,IAAwBF,6BACzB,OAAOb,EAAUE,EAAU,uBAAuB,GAEtD,KAAK,IAAwBY,6BAC7B,KAAK,IAAwBE,0BAC7B,KAAK,IAAyBC,sBAC9B,KAAK,IAAyBR,yBAC1B,OAAOT,EAAUE,EAAU,uBAAuB,GAEtD,QACI,OAAOA,G,YCdA,MA9Ef,SAASgB,EAAgBC,EAAoBC,EAAgBlgB,GACjD,cAAAmgB,mBAAA,IAAc,EAAd,mDAGR,IAAKF,EACD,OAAOC,EAMX,IAAKA,GAAYD,IAAiBC,EAC9B,OAAOD,EAMX,IAAIG,EAAqB,EACrBC,EAAiB,EAEfC,EAAsB,SAAIC,EAAkB3B,EAAiBC,GAI/D,OAHAuB,GAAsBG,IAAkB3B,EAAe,EAAI,EAC3DyB,GAAkBE,IAAkB1B,EAAW,EAAI,EAE5C0B,GAGLte,EAASie,EAAShe,KAAI,SAACse,EAAS5c,GAClC,IAAM6c,EAAcR,GAAgBA,EAAarc,GAEjD,OAAI,YAAc6c,IAAgB,YAAcD,GACxCL,EAAYM,EAAaD,GAClBF,EACH,EAAYG,EAAaD,GACzBC,EACAD,GAIDF,EACHxN,EAAQ2N,EAAaD,GACrBC,EACAD,GAIJ,kBAAQC,IAAgB,kBAAQD,GACzBF,EACHN,EAAaS,EAAaD,GAC1BC,EACAD,GAIDF,EACHxN,EAAQ2N,EAAaD,GACrBC,EACAD,MAOR,OAAIJ,IAAuBF,EAASxhB,QAAWuhB,GAAgBA,EAAavhB,SAAWwhB,EAASxhB,OACrFuhB,EAKPI,IAAmBH,EAASxhB,OACrBwhB,EAGJje,GChDI,MA/Bf,SAASye,EAA8BC,EAAmBC,GACtD,OAAKD,EAMAC,GAAaD,IAAkBC,EAO5BnoB,OAAOsJ,KAAK6e,GACf5e,QAAO,SAACC,EAAQ3I,GACb,IAAMslB,EAAe3c,EAAO3I,GACtBulB,EAAW+B,EAAUtnB,GAE3B,OAAI,YAAcslB,IAAiB,YAAcC,GACtCC,EAAU7c,EAAQ3I,EAAKonB,EAAY9B,EAAcC,IAGxD,kBAAQD,IAAiB,kBAAQC,GAC1BC,EAAU7c,EAAQ3I,EAAK,EAAaslB,EAAcC,IAGtDC,EAAU7c,EAAQ3I,EAAKulB,KAC/B8B,GApBIA,EANAC,G,uBCKF,EAA2B,CACpCnkB,OAAQ,GACRuiB,SAAU,ICNC,SAAS6B,EACpBpL,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAA2B,CACvC0G,KAAM,EACN1f,OAAQ,0BAAgB,EAAegiB,GACvCO,SAAU,GAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,EACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAyBglB,8BAC9B,KAAK,IAAmBhK,sBACxB,KAAK,IAAsB+C,4BAC3B,KAAK,IAAsBO,2BAC3B,KAAK,IAAsBJ,2BAC3B,KAAK,IAAsBhB,8BAC3B,KAAK,IAAsBO,6BAC3B,KAAK,IAAiB+I,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAA0BC,8BAC/B,KAAK,IAA0BC,+BAC3B,OAAO,EAAY9E,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQhG,MAE9D,QACI,OAAO0O,GAIf,SAAS,EACL6C,EACAxL,GAEA,YAHA,IAAAwL,MAA8B,EAAcA,UAGpCxL,EAAOlZ,MACf,KAAK,IAAmB8a,sBACpB,OAAO0J,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmBzJ,mBACxB,KAAK,IAAmBD,sBACpB,OAAOwJ,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GAIf,SAAS,EACLviB,EACA+W,GAEA,YAHA,IAAA/W,MAA0B,EAAcA,QAGhC+W,EAAOlZ,MACf,KAAK,IAAmB8a,sBACxB,KAAK,IAAmBE,sBACpB,OAAOwJ,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAmBuU,mBACpB,OAAOuJ,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,G,YChDF,EAAqC,CAC9C0f,KAAM,GACN1f,OAAQ,GACRuiB,SAAU,IC1BRkC,EAA8C,CAAEC,sBAAuB,IACvEC,EAAiD,GACjDC,EAAoD,GAE3C,SAASC,EACpB7L,EACAjC,G,UAEA,YAHA,IAAAiC,MAAA,GAGKjC,EAAOnT,MAASmT,EAAOnT,KAAKS,SAIjB,0BAAqC,CACjDqb,KAAM,2BAAe,KACjB,EAAC3I,EAAOnT,KAAKS,UAAW,E,IAE5BrE,OAAQ,2BAAe,KACnB,EAAC+W,EAAOnT,KAAKS,UAAW,E,IAE5Bke,SAAU,2BAAe,KACrB,EAACxL,EAAOnT,KAAKS,UAAW,E,KAIzBue,CAAQ5J,EAAOjC,GAfXiC,EAkBf,SAAS,EACL0G,EACA3I,G,MAEA,YAHA,IAAA2I,MAAA,GAGQ3I,EAAOlZ,MACf,KAAK,IAAyBinB,0BAC1B,OAAK/N,EAAOnT,MAASmT,EAAOnT,KAAKmhB,YAI1B,EAAYrF,EAAM,CACrBgF,uBAAqB,KACjB,EAAC3N,EAAOnT,KAAKmhB,cAAc,E,KALxBrF,EASf,KAAK,IAAyBsF,4BAC1B,OAAO3C,EAAU3C,EAAM,wBAAyB,IAGpD,OAAOA,EAGX,SAAS,EACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAA,GAGQ+W,EAAOlZ,MACf,KAAK,IAAyBonB,0BAC9B,KAAK,IAAyBH,0BAC1B,OAAOzC,EAAUriB,EAAQ,uBAAmBuE,GAEhD,KAAK,IAAyB2gB,uBAC1B,OAAO7C,EAAUriB,EAAQ,kBAAmB+W,EAAOC,SAEvD,KAAK,IAAyBmO,4BAC9B,KAAK,IAAyBH,4BAC1B,OAAO3C,EAAUriB,EAAQ,yBAAqBuE,GAElD,KAAK,IAAyB6gB,yBAC1B,OAAO/C,EAAUriB,EAAQ,oBAAqB+W,EAAOC,SAEzD,QACI,OAAOhX,GAIf,SAAS,EACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAA,GAGQxL,EAAOlZ,MACf,KAAK,IAAyBonB,0BAC1B,OAAO5C,EAAUE,EAAU,kBAAkB,GAEjD,KAAK,IAAyB2C,uBAC9B,KAAK,IAAyBJ,0BAC1B,OAAOzC,EAAUE,EAAU,kBAAkB,GAEjD,KAAK,IAAyB4C,4BAC1B,OAAO9C,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAyB6C,yBAC9B,KAAK,IAAyBJ,4BAC1B,OAAO3C,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,G,YChFF,EAA6B,CACtC3e,KAAM,GACN5D,OAAQ,GACRuiB,SAAU,ICfC,SAAS8C,EACpBrM,EACAjC,GAQA,YATA,IAAAiC,MAAA,GAGgB,0BAA6B,CACzC0G,KAAM,EACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,EACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAiBynB,oBAClB,OAAO,EAAY5F,EAAM3I,EAAOC,SAEpC,QACI,OAAO0I,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAA4B,EAAcA,QAGlC+W,EAAOlZ,MACf,KAAK,IAAiBynB,oBAClB,OAAOjD,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAiBghB,iBAClB,OAAOlD,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAgC,EAAcA,UAGtCxL,EAAOlZ,MACf,KAAK,IAAiB2nB,oBAClB,OAAOnD,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAiB+C,oBACtB,KAAK,IAAiBC,iBAClB,OAAOlD,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GC3CR,IAAM,GAA6B,CACtCviB,OAAQ,GACRuiB,SAAU,ICXC,SAASkD,GACpBzM,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA6B,CACzC0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAmBgb,sBACxB,KAAK,IAAiBwL,qBACtB,KAAK,IAAsBtJ,8BAC3B,KAAK,IAAiBuJ,sBACtB,KAAK,IAAgBvB,mBACjB,OAAO,EAAarD,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQvJ,SAE/D,QACI,OAAOiS,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAA,IAGQ+W,EAAOlZ,MACf,KAAK,IAAiB6nB,qBACtB,KAAK,IAAiBrB,qBAClB,OAAOhC,EAAUriB,EAAQ,wBAAoBuE,GAEjD,KAAK,IAAiBohB,kBAClB,OAAOtD,EAAUriB,EAAQ,mBAAoB+W,EAAOC,SAExD,KAAK,IAAiB4O,sBACtB,KAAK,IAAiBtB,sBAClB,OAAOjC,EAAUriB,EAAQ,yBAAqBuE,GAElD,KAAK,IAAiBshB,mBAClB,OAAOxD,EAAUriB,EAAQ,oBAAqB+W,EAAOC,SAEzD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAA,IAGQxL,EAAOlZ,MACf,KAAK,IAAiB6nB,qBAClB,OAAOrD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiB8B,qBACtB,KAAK,IAAiBsB,kBAClB,OAAOtD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiBqD,sBAClB,OAAOvD,EAAUE,EAAU,oBAAoB,GAEnD,KAAK,IAAiB+B,sBACtB,KAAK,IAAiBuB,mBAClB,OAAOxD,EAAUE,EAAU,oBAAoB,GAEnD,QACI,OAAOA,GCjER,IAAM,GAAsC,CAC/CviB,OAAQ,GACRuiB,SAAU,ICXC,SAASuD,GACpB9M,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsC,CAClD0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAmBgb,sBACxB,KAAK,IAAsB+C,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAiBsJ,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAA0BC,8BAC/B,KAAK,IAA0BC,+BAC3B,OAAO,EAAa9E,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQxF,kBAE/D,QACI,OAAOkO,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAqC,GAAcA,QAG3C+W,EAAOlZ,MACf,KAAK,IAA0BkoB,8BAC/B,KAAK,IAA0BxB,8BAC3B,OAAOlC,EAAUriB,EAAQ,iCAA6BuE,GAE1D,KAAK,IAA0ByhB,2BAC3B,OAAO3D,EAAUriB,EAAQ,4BAA6B+W,EAAOC,SAEjE,KAAK,IAA0BiP,+BAC/B,KAAK,IAA0BzB,+BAC3B,OAAOnC,EAAUriB,EAAQ,kCAA8BuE,GAE3D,KAAK,IAA0B2hB,4BAC3B,OAAO7D,EAAUriB,EAAQ,6BAA8B+W,EAAOC,SAElE,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAyC,GAAcA,UAG/CxL,EAAOlZ,MACf,KAAK,IAA0BkoB,8BAC3B,OAAO1D,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0BgC,8BAC/B,KAAK,IAA0ByB,2BAC3B,OAAO3D,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0B0D,+BAC3B,OAAO5D,EAAUE,EAAU,6BAA6B,GAE5D,KAAK,IAA0BiC,+BAC/B,KAAK,IAA0B0B,4BAC3B,OAAO7D,EAAUE,EAAU,6BAA6B,GAE5D,QACI,OAAOA,GCpFR,IAAM,GAA+B,GCG7B,SAAS4D,GACpBnN,EACAjC,GAMA,YAPA,IAAAiC,MAAA,IAGgB,0BAAuE,CACnF0G,KAAM,IAGHkD,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAyBilB,yBAC9B,KAAK,IAAmBjK,sBACpB,OAAO,EAAY6G,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQjL,UAE9D,QACI,OAAO2T,G,YCQF,GAAuC,CAChDA,KAAM,GACN1f,OAAQ,GACRuiB,SAAU,ICjCC,SAAS6D,GACpBpN,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+D,CAC3E0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,G,QAEA,YAHA,IAAA2I,MAAkC,GAAcA,MAGxC3I,EAAOlZ,MACf,KAAK,KAA2BwoB,oBAC5B,OAAO,EAAY3G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAI3B,KAAK,KAA2BC,sBAC5B,OAAO,EAAY7G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAK3B,OAAO5G,EAGX,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAsC,GAAcA,QAG5C+W,EAAOlZ,MACf,KAAK,KAA2B2oB,oBAChC,KAAK,KAA2BH,oBAC5B,OAAO,EAAYrmB,EAAQ,CACvBymB,qBAAiBliB,EACjBmiB,wBAAoBniB,IAG5B,KAAK,KAA2BoiB,iBAC5B,OAAO,EAAY3mB,EAAQ,CACvBymB,gBAAiB1P,EAAOC,QACxB0P,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA2BuiB,sBAChC,KAAK,KAA2BL,sBAC5B,OAAO,EAAYvmB,EAAQ,CACvB6mB,uBAAmBtiB,EACnBuiB,0BAAsBviB,IAG9B,KAAK,KAA2BwiB,mBAC5B,OAAO,EAAY/mB,EAAQ,CACvB6mB,kBAAmB9P,EAAOC,QAC1B8P,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA2B2iB,gBAChC,KAAK,KAA2BC,gBAC5B,OAAO,EAAYjnB,EAAQ,CACvBknB,iBAAa3iB,EACb4iB,oBAAgB5iB,IAGxB,KAAK,KAA2B6iB,aAC5B,OAAO,EAAYpnB,EAAQ,CACvBknB,YAAanQ,EAAOC,QACpBmQ,eAAgBpQ,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGnD,KAAK,KAA2BgjB,iBAChC,KAAK,KAA2BC,iBAC5B,OAAO,EAAYtnB,EAAQ,CACvBunB,kBAAchjB,EACdijB,qBAAiBjjB,IAGzB,KAAK,KAA2BkjB,cAC5B,OAAO,EAAYznB,EAAQ,CACvBunB,aAAcxQ,EAAOC,QACrBwQ,gBAAiBzQ,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGpD,KAAK,KAA2BqjB,yBAChC,KAAK,KAA2BC,0BAC5B,OAAO,EAAY3nB,EAAQ,CACvB4nB,4BAAwBrjB,EACxBsjB,+BAA2BtjB,IAGnC,KAAK,KAA2BujB,wBAC5B,OAAO,EAAY9nB,EAAQ,CACvB4nB,uBAAwB7Q,EAAOC,QAC/B6Q,0BAA2B9Q,EAAOnT,KAAKS,WAG/C,QACI,OAAOrE,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAA0C,GAAcA,UAGhDxL,EAAOlZ,MACf,KAAK,KAA2B2oB,oBAC5B,OAAO,EAAYjE,EAAU,CACzBwF,gBAAgB,EAChBrB,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA2BsiB,iBAChC,KAAK,KAA2BN,oBAC5B,OAAO,EAAY9D,EAAU,CACzBwF,gBAAgB,EAChBrB,wBAAoBniB,IAG5B,KAAK,KAA2BqiB,sBAC5B,OAAO,EAAYrE,EAAU,CACzByF,kBAAkB,EAClBlB,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA2B0iB,mBAChC,KAAK,KAA2BR,sBAC5B,OAAO,EAAYhE,EAAU,CACzByF,kBAAkB,EAClBlB,0BAAsBviB,IAG9B,KAAK,KAA2ByiB,gBAC5B,OAAO,EAAYzE,EAAU,CACzB0F,aAAa,EACbd,eAAgBpQ,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGnD,KAAK,KAA2B+iB,aAChC,KAAK,KAA2BH,gBAC5B,OAAO,EAAY1E,EAAU,CACzB0F,aAAa,EACbd,oBAAgB5iB,IAGxB,KAAK,KAA2B8iB,iBAC5B,OAAO,EAAY9E,EAAU,CACzB2F,cAAc,EACdV,gBAAiBzQ,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGpD,KAAK,KAA2BojB,cAChC,KAAK,KAA2BH,iBAC5B,OAAO,EAAY/E,EAAU,CACzB2F,cAAc,EACdV,qBAAiBjjB,IAGzB,KAAK,KAA2BmjB,yBAC5B,OAAO,EAAYnF,EAAU,CACzB4F,qBAAqB,EACrBN,0BAA2B9Q,EAAOnT,KAAKS,WAG/C,KAAK,KAA2BsjB,0BAChC,KAAK,KAA2BG,wBAC5B,OAAO,EAAYvF,EAAU,CACzB4F,qBAAqB,EACrBN,+BAA2BtjB,IAGnC,QACI,OAAOge,G,aC9KF,GAA8B,CACvCviB,OAAQ,GACRuiB,SAAU,ICTC,SAAS6F,GACpBpP,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA8B,CAC1C0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAkBwqB,uBACnB,OAAO,EAAa3I,EAAM3I,EAAOC,SAErC,QACI,OAAO0I,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAA6B,GAAcA,QAGnC+W,EAAOlZ,MACf,KAAK,KAAkByqB,uBACvB,KAAK,KAAkBD,uBACnB,OAAOhG,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,KAAkBgkB,oBACnB,OAAOlG,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAiC,GAAcA,UAGvCxL,EAAOlZ,MACf,KAAK,KAAkByqB,uBACnB,OAAOjG,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAkB8F,uBACvB,KAAK,KAAkBE,oBACnB,OAAOlG,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,GChCR,IAAM,GAA4B,CACrCviB,OAAQ,GACR4D,KAAM,GACN2e,SAAU,IC3BC,SAASiG,GACpBxP,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAA4B,CACxC0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCpe,KAAM6kB,GACNlG,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAgBklB,mBACrB,KAAK,IAAgB2F,2BACjB,OAAO,EAAYhJ,EAAM,eAAK3I,EAAOC,QAAS,CAAC,iBAAkB,aAErE,QACI,OAAO0I,GAIf,SAAS+I,GACL7kB,EACAmT,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAgB8qB,uBACrB,KAAK,IAAgBC,qBACjB,OAAO,EAAYhlB,EAAM,yCAClBmT,EAAOnT,MAAI,CACdgK,YAAamJ,EAAOC,SAAWD,EAAOC,QAAQtK,MAAMkB,YACpDD,WAAYoJ,EAAOC,SAAWD,EAAOC,QAAQtK,MAAMrL,MACnD8L,QAAS4J,EAAOC,SAAWD,EAAOC,QAAQtK,OAASqK,EAAOC,QAAQtK,MAAMS,WAGhF,QACI,OAAOvJ,GAIf,SAAS,GACL5D,EACA+W,GAEA,YAHA,IAAA/W,MAA2B,GAAcA,QAGjC+W,EAAOlZ,MACf,KAAK,IAAgBgrB,mBACrB,KAAK,IAAgB9F,mBACrB,KAAK,IAAgB2F,2BACrB,KAAK,IAAgBI,2BACjB,OAAOzG,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAgBwkB,gBACrB,KAAK,IAAgBC,wBACjB,OAAO3G,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAA+B,GAAcA,UAGrCxL,EAAOlZ,MACf,KAAK,IAAgBgrB,mBACrB,KAAK,IAAgBC,2BACjB,OAAOzG,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAgBQ,mBACrB,KAAK,IAAgBgG,gBACrB,KAAK,IAAgBL,2BACrB,KAAK,IAAgBM,wBACjB,OAAO3G,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,G,aCtFA,SAAS0G,GAAejQ,EAA0BjC,GAK7D,YALmC,IAAAiC,MAAA,IACnB,0BAA6C,CACzD0G,KAAM,IAGHkD,CAAQ5J,EAAOjC,GAG1B,SAAS,GAAY2I,EAAuC3I,GACxD,OAAQA,EAAOlZ,MACf,KAAK,KAAkBqrB,uBACnB,OAAOnS,EAAOC,QAElB,QACI,OAAO0I,G,aCEF,GAAoC,CAC7C1f,OAAQ,GACRuiB,SAAU,ICdC,SAAS4G,GACpBnQ,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAAoC,CAChD0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCpe,KAAM,GACN2e,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAwB2G,2BACzB,OCrBO,SACX4kB,EACA1jB,EACA6S,GAEA,IAAK7S,EACD,OAAO0jB,EAGX,IAAMC,EAAmB,eAAK3jB,EAAM,MAC9ByB,EAAQ,oBAAUiiB,EAA4B,iBAAd7Q,EAAyB,iBAAOA,GAAcA,GAAa8Q,GAC3F5F,EAAW,yBAAI2F,GAErB,IAAe,IAAXjiB,EACAsc,EAASrS,KAAK1L,OACX,CACH,IAAMiX,EAAeyM,EAAMjiB,GAE3Bsc,EAAStc,GAAS,YAAcwV,IAAiB,YAAcjX,GAC3D,EAAYiX,EAAcjX,GAC1BA,EAGR,OAAO+d,EDFI6F,CAAY5J,GAAQ,GAAI3I,EAAOC,QAASD,EAAOC,SAAW,CAC7DjV,GAAIgV,EAAOC,QAAQjV,GACnB+d,QAAS/I,EAAOC,QAAQ8I,UAGhC,KAAK,KAAwB/b,4BACzB,OAAO,EAAa2b,EAAM3I,EAAOC,QAAS,CACtC0M,YAAa,SAAC6F,EAASC,GAAY,OAC/BD,EAAQxnB,KAAOynB,EAAQznB,IAAMwnB,EAAQzJ,UAAY0J,EAAQ1J,WAIrE,QACI,OAAOJ,GAIf,SAAS,GACL9b,EACAmT,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAwBkG,4BACzB,OAAO,EAAYH,EAAMmT,EAAOnT,MAEpC,QACI,OAAOA,GAIf,SAAS,GACL5D,EACA+W,GAEA,YAHA,IAAA/W,MAAmC,GAAcA,QAGzC+W,EAAOlZ,MACf,KAAK,KAAwB6F,4BAC7B,KAAK,KAAwBK,4BACzB,OAAOse,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,KAAwBJ,yBACzB,OAAOke,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,KAAK,KAAwB1S,2BAC7B,KAAK,KAAwBE,2BACzB,OAAO,EAAYxE,EAAQ,CACvBypB,kBAAcllB,EACdmlB,qBAAiBnlB,IAGzB,KAAK,KAAwBE,wBACzB,OAAO,EAAYzE,EAAQ,CACvBypB,aAAc1S,EAAOnT,KAAKS,SAC1BqlB,gBAAiB3S,EAAOC,UAGhC,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAuC,GAAcA,UAG7CxL,EAAOlZ,MACf,KAAK,KAAwB6F,4BACzB,OAAO2e,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAwBxe,4BAC7B,KAAK,KAAwBI,yBACzB,OAAOke,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAwBje,2BACzB,OAAO,EAAYie,EAAU,CACzBoH,iBAAiB,EACjBF,aAAc1S,EAAOnT,KAAKS,WAGlC,KAAK,KAAwBG,2BAC7B,KAAK,KAAwBC,wBACzB,OAAO,EAAY8d,EAAU,CACzBoH,iBAAiB,EACjBF,kBAAcllB,IAGtB,QACI,OAAOge,G,aE9EF,GAAsC,CAC/C7C,KAAM,GACN1f,OAAQ,GACRuiB,SAAU,ICjCC,SAASqH,GACpB5Q,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA6D,CACzE0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,G,QAEA,YAHA,IAAA2I,MAAiC,GAAcA,MAGvC3I,EAAOlZ,MACf,KAAK,KAA0BwoB,oBAC3B,OAAO,EAAY3G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAI3B,KAAK,KAA0BC,sBAC3B,OAAO,EAAY7G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAK3B,OAAO5G,EAGX,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAqC,GAAcA,QAG3C+W,EAAOlZ,MACf,KAAK,KAA0B2oB,oBAC/B,KAAK,KAA0BH,oBAC3B,OAAO,EAAYrmB,EAAQ,CACvBymB,qBAAiBliB,EACjBmiB,wBAAoBniB,IAG5B,KAAK,KAA0BoiB,iBAC3B,OAAO,EAAY3mB,EAAQ,CACvBymB,gBAAiB1P,EAAOC,QACxB0P,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA0BuiB,sBAC/B,KAAK,KAA0BL,sBAC3B,OAAO,EAAYvmB,EAAQ,CACvB6mB,uBAAmBtiB,EACnBuiB,0BAAsBviB,IAG9B,KAAK,KAA0BwiB,mBAC3B,OAAO,EAAY/mB,EAAQ,CACvB6mB,kBAAmB9P,EAAOC,QAC1B8P,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA0BwlB,iBAC/B,KAAK,KAA0BC,iBAC3B,OAAO,EAAY9pB,EAAQ,CACvB+pB,kBAAcxlB,EACdylB,qBAAiBzlB,IAGzB,KAAK,KAA0B0lB,cAC3B,OAAO,EAAYjqB,EAAQ,CACvB+pB,aAAchT,EAAOC,QACrBgT,gBAAiBjT,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGpD,KAAK,KAA0B6lB,kBAC/B,KAAK,KAA0BC,kBAC3B,OAAO,EAAYnqB,EAAQ,CACvBoqB,mBAAe7lB,EACf8lB,sBAAkB9lB,IAG1B,KAAK,KAA0B+lB,eAC3B,OAAO,EAAYtqB,EAAQ,CACvBoqB,cAAerT,EAAOC,QACtBqT,iBAAkBtT,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGrD,KAAK,KAA0BqjB,yBAC/B,KAAK,KAA0BC,0BAC3B,OAAO,EAAY3nB,EAAQ,CACvB4nB,4BAAwBrjB,EACxBsjB,+BAA2BtjB,IAGnC,KAAK,KAA0BujB,wBAC3B,OAAO,EAAY9nB,EAAQ,CACvB4nB,uBAAwB7Q,EAAOC,QAC/B6Q,0BAA2B9Q,EAAOnT,KAAKS,WAG/C,QACI,OAAOrE,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAyC,GAAcA,UAG/CxL,EAAOlZ,MACf,KAAK,KAA0B2oB,oBAC3B,OAAO,EAAYjE,EAAU,CACzBwF,gBAAgB,EAChBrB,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA0BsiB,iBAC/B,KAAK,KAA0BN,oBAC3B,OAAO,EAAY9D,EAAU,CACzBwF,gBAAgB,EAChBrB,wBAAoBniB,IAG5B,KAAK,KAA0BqiB,sBAC3B,OAAO,EAAYrE,EAAU,CACzByF,kBAAkB,EAClBlB,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA0B0iB,mBAC/B,KAAK,KAA0BR,sBAC3B,OAAO,EAAYhE,EAAU,CACzByF,kBAAkB,EAClBlB,0BAAsBviB,IAG9B,KAAK,KAA0BslB,iBAC3B,OAAO,EAAYtH,EAAU,CACzBgI,aAAa,EACbP,gBAAiBjT,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGpD,KAAK,KAA0B4lB,cAC/B,KAAK,KAA0BH,iBAC3B,OAAO,EAAYvH,EAAU,CACzBgI,aAAa,EACbP,qBAAiBzlB,IAGzB,KAAK,KAA0B2lB,kBAC3B,OAAO,EAAY3H,EAAU,CACzBiI,cAAc,EACdH,iBAAkBtT,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGrD,KAAK,KAA0BimB,eAC/B,KAAK,KAA0BH,kBAC3B,OAAO,EAAY5H,EAAU,CACzBiI,cAAc,EACdH,sBAAkB9lB,IAG1B,KAAK,KAA0BmjB,yBAC3B,OAAO,EAAYnF,EAAU,CACzB4F,qBAAqB,EACrBN,0BAA2B9Q,EAAOnT,KAAKS,WAG/C,KAAK,KAA0BsjB,0BAC/B,KAAK,KAA0BG,wBAC3B,OAAO,EAAYvF,EAAU,CACzB4F,qBAAqB,EACrBN,+BAA2BtjB,IAGnC,QACI,OAAOge,G,aCrKF,GAAgB,CACzB7C,KAAM,GACN1f,OAAQ,GACRuiB,SAAU,ICnBC,SAASkI,GACpBzR,EACAjC,GASA,YAVA,IAAAiC,MAAA,IAGgB,0BAAiC,CAC7C0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCpe,KAAM,GACN2e,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,YAHA,IAAA2I,MAA4B,GAAcA,MAGlC3I,EAAOlZ,MACf,KAAK,KAAqB6sB,yBACtB,OAAO,EAAahL,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQ2T,oBAAsB,IAErF,QACI,OAAOjL,GAIf,SAAS,GACL9b,EACAmT,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAqB6sB,yBAC1B,KAAK,KAAqBE,0BACtB,OAAO,EAAYhnB,EAAMmT,EAAOnT,MAEpC,QACI,OAAOA,GAIf,SAAS,GACL5D,EACA+W,GAEA,YAHA,IAAA/W,MAA+B,GAAcA,QAGrC+W,EAAOlZ,MACf,KAAK,KAAqBgtB,yBAC1B,KAAK,KAAqBH,yBACtB,OAAOrI,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,KAAqBumB,0BAC1B,KAAK,KAAqBF,0BACtB,OAAO,EAAY5qB,EAAQ,CACvB+qB,iBAAaxmB,EACbymB,sBAAkBzmB,IAG1B,KAAK,KAAqB0mB,sBACtB,OAAO5I,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,KAAK,KAAqBkU,uBACtB,OAAO,EAAYlrB,EAAQ,CACvB+qB,YAAahU,EAAOC,QACpBgU,iBAAkBjU,EAAOnT,KAAK7C,eAGtC,QACI,OAAOf,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAkC,GAAcA,UAGxCxL,EAAOlZ,MACf,KAAK,KAAqBgtB,yBACtB,OAAOxI,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAqBuI,0BACtB,OAAO,EAAYvI,EAAU,CACzB4I,YAAY,EACZC,mBAAoBrU,EAAOnT,KAAK7C,eAGxC,KAAK,KAAqB2pB,yBAC1B,KAAK,KAAqBO,sBACtB,OAAO5I,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAqBqI,0BAC1B,KAAK,KAAqBM,uBACtB,OAAO,EAAY3I,EAAU,CACzB4I,YAAY,EACZC,wBAAoB7mB,IAG5B,QACI,OAAOge,G,aChGF,GAAqC,CAC9C7C,KAAM,ICHK,SAAS2L,GACpBrS,EACAjC,G,MAEA,YAHA,IAAAiC,MAAA,IAGKjC,EAAOnT,MAASmT,EAAOnT,KAAKS,SAIjB,0BAAqC,CACjDqb,KAAM,2BAAe,KACjB,EAAC3I,EAAOnT,KAAKS,UAAW,G,KAIzBue,CAAQ5J,EAAOjC,GATXiC,EAYf,SAAS,GACL0G,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAyBytB,iCAC1B,OAAOjJ,EAAU3C,EAAM,UAAkB3I,EAAOC,SAAWD,EAAOC,QAAQuU,SAE9E,KAAK,KAAyBC,kCAC1B,OAAOnJ,EAAU3C,EAAM,WAAmB3I,EAAOC,SAAWD,EAAOC,QAAQpI,UAE/E,KAAK,KAAyB6c,4BAC1B,OAAOpJ,EAAU3C,EAAM,WAAY3I,EAAOC,SAE9C,KAAK,KAAyB0U,qBAC1B,OAAO,EAAYhM,EAAM3I,EAAOC,SAEpC,QACI,OAAO0I,G,aCjBF,GAAkC,CAC3C1f,OAAQ,CACJ2rB,0BAA2B,GAC3BC,YAAa,GACbb,YAAa,IAEjBxI,SAAU,CACNsJ,WAAY,GACZC,yBAA0B,GAC1BX,WAAY,KCvBL,SAASY,GACpB/S,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsE,CAClF0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,IAAmBgb,sBACxB,KAAK,IAAsByC,6BAC3B,KAAK,IAAsBM,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAiBsJ,qBACtB,KAAK,IAAiBC,sBAClB,OAAO,EAAa5E,EAAM3I,EAAOC,SAAWD,EAAOC,QAAQnV,cAE/D,KAAK,KAAmBmqB,yBACpB,OAAO,EAAatM,EAAM,IAE9B,QACI,OAAOA,GAIf,SAAS,GACL1f,EACA+W,G,gBAEA,YAHA,IAAA/W,MAAiC,GAAcA,QAGvC+W,EAAOlZ,MACf,KAAK,IAAmB8a,sBACxB,KAAK,IAAmBE,sBACxB,KAAK,IAAsByC,6BAC3B,KAAK,IAAsBJ,6BACvB,OAAOmH,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAmBuU,mBACxB,KAAK,IAAsByC,0BACvB,OAAO8G,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,KAAK,IAAsB2E,4BAC3B,KAAK,IAAsBC,4BACvB,OAAOyG,EAAUriB,EAAQ,mBAAeuE,GAE5C,KAAK,IAAsBsX,yBACvB,OAAOwG,EAAUriB,EAAQ,cAAe+W,EAAOC,SAEnD,KAAK,IAAsB+E,2BAC3B,KAAK,IAAsBD,2BACvB,OAAI/E,EAAOnT,KACA,EAAY5D,EAAQ,CACvB4rB,aAAW,KACP,EAAC7U,EAAOnT,KAAK7B,SAAKwC,E,KAKvBvE,EAEX,KAAK,IAAsBgc,wBACvB,OAAIjF,EAAOnT,KACA,EAAY5D,EAAQ,CACvB4rB,aAAW,KACP,EAAC7U,EAAOnT,KAAK7B,IAAKgV,EAAOC,Q,KAK9BhX,EAEX,KAAK,IAAsBmc,2BAC3B,KAAK,IAAsBD,2BACvB,OAAInF,EAAOnT,KACA,EAAY5D,EAAQ,CACvB+qB,aAAW,KACP,EAAChU,EAAOnT,KAAK7B,SAAKwC,E,KAKvBvE,EAEX,KAAK,IAAsBoc,wBACvB,OAAIrF,EAAOnT,KACA,EAAY5D,EAAQ,CACvB+qB,aAAW,KACP,EAAChU,EAAOnT,KAAK7B,IAAKgV,EAAOC,Q,KAK9BhX,EAEX,KAAK,IAAsB8a,8BAC3B,KAAK,IAAsBC,8BACvB,OAAIhE,EAAOnT,KACA,EAAY5D,EAAQ,CACvB2rB,2BAAyB,KACrB,EAAC5U,EAAOnT,KAAK7B,SAAKwC,E,KAKvBvE,EAEX,KAAK,IAAsBgb,2BACvB,OAAIjE,EAAOnT,KACA,EAAY5D,EAAQ,CACvB2rB,2BAAyB,KACrB,EAAC5U,EAAOnT,KAAK7B,IAAKgV,EAAOC,Q,KAK9BhX,EAEX,QACI,OAAOA,GAIf,SAAS,GACLuiB,EACAxL,G,gBAEA,YAHA,IAAAwL,MAAqC,GAAcA,UAG3CxL,EAAOlZ,MACf,KAAK,IAAmB8a,sBACpB,OAAO0J,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAsBrH,6BACvB,OAAOmH,EAAUE,EAAU,4BAA4B,GAE3D,KAAK,IAAmB1J,sBACxB,KAAK,IAAmBC,mBACpB,OAAOuJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAsBjH,6BAC3B,KAAK,IAAsBC,0BACvB,OAAO8G,EAAUE,EAAU,4BAA4B,GAE3D,KAAK,IAAsB5G,4BACvB,OAAO0G,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAsB3G,4BAC3B,KAAK,IAAsBC,yBACvB,OAAOwG,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAsBzG,2BACvB,OAAI/E,EAAOnT,KACA,EAAY2e,EAAU,CACzBsJ,YAAU,KACN,EAAC9U,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,KAAK,IAAsBxG,2BAC3B,KAAK,IAAsBC,wBACvB,OAAIjF,EAAOnT,KACA,EAAY2e,EAAU,CACzBsJ,YAAU,KACN,EAAC9U,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,KAAK,IAAsBrG,2BACvB,OAAInF,EAAOnT,KACA,EAAY2e,EAAU,CACzB4I,YAAU,KACN,EAACpU,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,KAAK,IAAsBpG,2BAC3B,KAAK,IAAsBC,wBACvB,OAAIrF,EAAOnT,KACA,EAAY2e,EAAU,CACzB4I,YAAU,KACN,EAACpU,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,KAAK,IAAsBzH,8BACvB,OAAI/D,EAAOnT,KACA,EAAY2e,EAAU,CACzBuJ,0BAAwB,KACpB,EAAC/U,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,KAAK,IAAsBxH,8BAC3B,KAAK,IAAsBC,2BACvB,OAAIjE,EAAOnT,KACA,EAAY2e,EAAU,CACzBuJ,0BAAwB,KACpB,EAAC/U,EAAOnT,KAAK7B,KAAK,E,KAKvBwgB,EAEX,QACI,OAAOA,G,aChOF,GAAsC,CAC/CviB,OAAQ,GACRuiB,SAAU,ICTC,SAAS0J,GACpBjT,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAsC,CAClD0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAA0BquB,+BAC3B,OAAO,EAAaxM,EAAM3I,EAAOC,SAErC,QACI,OAAO0I,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAqC,GAAcA,QAG3C+W,EAAOlZ,MACf,KAAK,KAA0BsuB,+BAC/B,KAAK,KAA0BD,+BAC3B,OAAO7J,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,KAA0B6nB,4BAC3B,OAAO/J,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAyC,GAAcA,UAG/CxL,EAAOlZ,MACf,KAAK,KAA0BsuB,+BAC3B,OAAO9J,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAA0B2J,+BAC/B,KAAK,KAA0BE,4BAC3B,OAAO/J,EAAUE,EAAU,aAAa,GAE5C,QACI,OAAOA,G,aC/BF,GAAuC,CAChD7C,KAAM,GACN1f,OAAQ,GACRuiB,SAAU,IC7BC,SAAS8J,GACpBrT,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+D,CAC3E0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,G,QAEA,YAHA,IAAA2I,MAAkC,GAAcA,MAGxC3I,EAAOlZ,MACf,KAAK,KAA2BwoB,oBAC5B,OAAO,EAAY3G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAI3B,KAAK,KAA2BC,sBAC5B,OAAO,EAAY7G,IAAI,MAClB3I,EAAOnT,MAAQmT,EAAOnT,KAAKS,UAAW,CACnCiiB,eAAe,G,IAK3B,OAAO5G,EAGX,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAsC,GAAcA,QAG5C+W,EAAOlZ,MACf,KAAK,KAA2B2oB,oBAChC,KAAK,KAA2BH,oBAC5B,OAAO,EAAYrmB,EAAQ,CACvBymB,qBAAiBliB,EACjBmiB,wBAAoBniB,IAG5B,KAAK,KAA2BoiB,iBAC5B,OAAO,EAAY3mB,EAAQ,CACvBymB,gBAAiB1P,EAAOC,QACxB0P,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA2BuiB,sBAChC,KAAK,KAA2BL,sBAC5B,OAAO,EAAYvmB,EAAQ,CACvB6mB,uBAAmBtiB,EACnBuiB,0BAAsBviB,IAG9B,KAAK,KAA2BwiB,mBAC5B,OAAO,EAAY/mB,EAAQ,CACvB6mB,kBAAmB9P,EAAOC,QAC1B8P,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA2BioB,uBAChC,KAAK,KAA2BC,uBAC5B,OAAO,EAAYvsB,EAAQ,CACvBwsB,wBAAoBjoB,EACpBkoB,2BAAuBloB,IAG/B,KAAK,KAA2BmoB,oBAC5B,OAAO,EAAY1sB,EAAQ,CACvBwsB,mBAAoBzV,EAAOC,QAC3ByV,sBAAuB1V,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAG1D,KAAK,KAA2BsoB,sBAChC,KAAK,KAA2BC,sBAC5B,OAAO,EAAY5sB,EAAQ,CACvB6sB,uBAAmBtoB,EACnBuoB,0BAAsBvoB,IAG9B,KAAK,KAA2BwoB,mBAC5B,OAAO,EAAY/sB,EAAQ,CACvB6sB,kBAAmB9V,EAAOC,QAC1B8V,qBAAsB/V,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,QACI,OAAOrE,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAA0C,GAAcA,UAGhDxL,EAAOlZ,MACf,KAAK,KAA2B2oB,oBAC5B,OAAO,EAAYjE,EAAU,CACzBwF,gBAAgB,EAChBrB,mBAAoB3P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGvD,KAAK,KAA2BsiB,iBAChC,KAAK,KAA2BN,oBAC5B,OAAO,EAAY9D,EAAU,CACzBwF,gBAAgB,EAChBrB,wBAAoBniB,IAG5B,KAAK,KAA2BqiB,sBAC5B,OAAO,EAAYrE,EAAU,CACzByF,kBAAkB,EAClBlB,qBAAsB/P,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA2B0iB,mBAChC,KAAK,KAA2BR,sBAC5B,OAAO,EAAYhE,EAAU,CACzByF,kBAAkB,EAClBlB,0BAAsBviB,IAG9B,KAAK,KAA2B+nB,uBAC5B,OAAO,EAAY/J,EAAU,CACzByK,mBAAmB,EACnBP,sBAAuB1V,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAG1D,KAAK,KAA2BqoB,oBAChC,KAAK,KAA2BH,uBAC5B,OAAO,EAAYhK,EAAU,CACzByK,mBAAmB,EACnBP,2BAAuBloB,IAG/B,KAAK,KAA2BooB,sBAC5B,OAAO,EAAYpK,EAAU,CACzB0K,mBAAmB,EACnBH,qBAAsB/V,EAAOnT,MAAQmT,EAAOnT,KAAKS,WAGzD,KAAK,KAA2B0oB,mBAChC,KAAK,KAA2BH,sBAC5B,OAAO,EAAYrK,EAAU,CACzB0K,mBAAmB,EACnBH,0BAAsBvoB,IAG9B,QACI,OAAOge,G,aCpJF,GAAkC,CAC3CviB,OAAQ,GACRuiB,SAAU,ICTC,SAAS2K,GACpBlU,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAAkC,CAC9C0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAEA,OAAQA,EAAOlZ,MACf,KAAK,KAAsBsvB,yBACvB,OAAO,EAAYzN,EAAM3I,EAAOC,SAEpC,QACI,OAAO0I,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAAiC,GAAcA,QAGvC+W,EAAOlZ,MACf,KAAK,KAAsBuvB,yBAC3B,KAAK,KAAsBD,yBACvB,OAAO9K,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,KAAsB8oB,sBACvB,OAAOhL,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAqC,GAAcA,UAG3CxL,EAAOlZ,MACf,KAAK,KAAsBuvB,yBACvB,OAAO/K,EAAUE,EAAU,aAAa,GAE5C,KAAK,KAAsB8K,sBAC3B,KAAK,KAAsBF,yBACvB,OAAO9K,EAAUE,EAAU,aAAa,GAC5C,QACI,OAAOA,G,aCxDT,GAAkC,CACpCviB,OAAQ,GACRuiB,SAAU,IAGC,SAAS+K,GACpBtU,EACAjC,GAOA,YARA,IAAAiC,MAAA,IAGgB,0BAAkC,CAC9ChZ,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL/W,EACA+W,GAEA,YAHA,IAAA/W,MAAiC,GAAcA,QAGvC+W,EAAOlZ,MACf,KAAK,KAAsB0vB,0BAC3B,KAAK,KAAsBC,0BACvB,OAAOnL,EAAUriB,EAAQ,kBAAcuE,GAE3C,KAAK,KAAsBkpB,uBACvB,OAAOpL,EAAUriB,EAAQ,aAAc+W,EAAOC,SAElD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAqC,GAAcA,UAG3CxL,EAAOlZ,MACf,KAAK,KAAsB0vB,0BACvB,OAAOlL,EAAUE,EAAU,cAAc,GAE7C,KAAK,KAAsBiL,0BAC3B,KAAK,KAAsBC,uBACvB,OAAOpL,EAAUE,EAAU,cAAc,GAE7C,QACI,OAAOA,GC1CR,IAAM,GAAoC,CAC7CviB,OAAQ,GACRuiB,SAAU,ICPC,SAASmL,GACpB1U,EACAjC,GAOA,YARA,IAAAiC,MAAA,IAGgB,0BAAoC,CAChDhZ,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL/W,EACA+W,GAEA,YAHA,IAAA/W,MAAmC,GAAcA,QAGzC+W,EAAOlZ,MACf,KAAK,IAAwBqlB,6BAC7B,KAAK,IAAwBC,6BACzB,OAAOd,EAAUriB,EAAQ,mBAAeuE,GAE5C,KAAK,IAAwB8e,0BACzB,OAAOhB,EAAUriB,EAAQ,cAAe+W,EAAOC,SAEnD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAuC,GAAcA,UAG7CxL,EAAOlZ,MACf,KAAK,IAAwBqlB,6BACzB,OAAOb,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAwBc,0BAC7B,KAAK,IAAwBF,6BACzB,OAAOd,EAAUE,EAAU,cAAc,GAC7C,QACI,OAAOA,G,aC1BF,GAA+B,CACxCviB,OAAQ,GACRuiB,SAAU,ICVC,SAASoL,GACpB3U,EACAjC,GAQA,YATA,IAAAiC,MAAA,IAGgB,0BAA+B,CAC3C0G,KAAM,GACN1f,OAAQ,0BAAgB,GAAegiB,GACvCO,SAAU,IAGPK,CAAQ5J,EAAOjC,GAG1B,SAAS,GACL2I,EACA3I,GAGA,OAAQA,EAAOlZ,MACf,KAAK,IAAmBgb,sBACxB,KAAK,IAAmBY,wBACxB,KAAK,KAAsB+T,0BAC3B,KAAK,IAAyB3K,8BAC9B,KAAK,IAAiBwB,qBACtB,KAAK,IAAiBC,sBACtB,KAAK,IAAsB1I,4BAC3B,KAAK,IAAsBG,2BAC3B,KAAK,IAAsBI,2BAC3B,KAAK,IAAsBpB,8BAC3B,KAAK,IAAsBO,6BAC3B,KAAK,IAA0BiJ,8BAC/B,KAAK,IAA0BC,+BAC/B,KAAK,KAAyBsF,iBAC1B,OAAO,EAAYpK,EAAM,eAAK3I,EAAOC,QAAS,CAC1C,iBACA,OACA,eACA,WACA,UACA,sBAGR,KAAK,IAAgB4R,qBACjB,OAAOvG,EAAU3C,EAAM,UAAW3I,EAAOC,SAAWD,EAAOC,QAAQtK,MAAMK,SAE7E,QACI,OAAO2S,GAIf,SAAS,GACL1f,EACA+W,GAEA,YAHA,IAAA/W,MAA8B,GAAcA,QAGpC+W,EAAOlZ,MACf,KAAK,IAAmB8a,sBACxB,KAAK,IAAmBE,sBACpB,OAAOwJ,EAAUriB,EAAQ,iBAAauE,GAE1C,KAAK,IAAmBuU,mBACpB,OAAOuJ,EAAUriB,EAAQ,YAAa+W,EAAOC,SAEjD,KAAK,IAAmBwC,wBACxB,KAAK,IAAmBC,wBACpB,OAAO4I,EAAUriB,EAAQ,mBAAeuE,GAE5C,KAAK,IAAmBmV,qBACpB,OAAO2I,EAAUriB,EAAQ,cAAe+W,EAAOC,SAEnD,QACI,OAAOhX,GAIf,SAAS,GACLuiB,EACAxL,GAEA,YAHA,IAAAwL,MAAkC,GAAcA,UAGxCxL,EAAOlZ,MACf,KAAK,IAAmB8a,sBACpB,OAAO0J,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmBzJ,mBACxB,KAAK,IAAmBD,sBACpB,OAAOwJ,EAAUE,EAAU,aAAa,GAE5C,KAAK,IAAmB/I,wBACpB,OAAO6I,EAAUE,EAAU,cAAc,GAE7C,KAAK,IAAmB7I,qBACxB,KAAK,IAAmBD,wBACpB,OAAO4I,EAAUE,EAAU,cAAc,GAE7C,KAAK,KAAyBsH,iBAC1B,OAAOxH,EAAUE,EAAU,wBAAwB,GAEvD,KAAK,KAAyB0H,cAC9B,KAAK,KAAyBH,iBAC1B,OAAOzH,EAAUE,EAAU,wBAAwB,GAEvD,QACI,OAAOA,G,+BCpHA,SAASqL,GAASrxB,EAAUsxB,GACvC,GAAItxB,QACA,MAAMsxB,EAAeA,IAAiB,IAAIvuB,MAAM,qCAGpD,OAAO/C,ECAI,SAASuxB,GAAoCtiB,GACxD,OAcJ,SAAuCA,EAAWuiB,GAC9C,IAAMC,EAAQhyB,OAAOY,OAAO4O,GAa5B,OAGJ,SAA6BA,EAAgByiB,GACzC,IAAI/wB,EAAYlB,OAAOkyB,eAAe1iB,GAEtC,KAAOtO,GACH+wB,EAAS/wB,GAETA,EAAYlB,OAAOkyB,eAAehxB,GApBtCixB,CAAoB3iB,GAAQ,SAAAtO,GACxBlB,OAAO0P,oBAAoBxO,GACtByO,SAAQ,SAAA9P,GACQ,gBAATA,GAAiD,mBAAhBmyB,EAAMnyB,IAA2C,MAAnBA,EAAKuyB,OAAO,KAI/EJ,EAAMnyB,GAAQkyB,EAAKviB,EAAiC3P,EAAiBmyB,UAI1EA,EA5BAK,CAAY7iB,GAAQ,SAACA,EAAQ3P,GAChC,kB,UAAC,kDAAmB,6BAAW,EAAA2P,EAAO3P,IAAMJ,KAAI,kCAAC+P,GAAWV,SCS7D,SAASwjB,KACZ,IAAMC,EAA2B,cAC7B,SAACvV,GAAuB,OAAAA,EAAM0G,QAC9B,SAAAvG,GAAU,gBAACqV,EAA2BvrB,QAA3B,IAAAurB,MAAA,IACP,IAAMC,EAAkB,eAAKD,EAAW,CAAEvhB,KAAMhK,IAGhD,OAFekW,EAASA,EAAOiF,YAAYsQ,WAAWC,sBAAwB,IAEhElpB,KAAI,SAACmpB,GAAe,OAAAC,EAAaD,EAAOJ,EAAWC,UAInEK,EAA0B,cAC5B,SAAC9V,GAAuB,OAAAA,EAAM0G,QAC9B,SAAAvG,GAAU,gBAACqV,EAA2BvrB,QAA3B,IAAAurB,MAAA,IACP,IAAMC,EAAkB,eAAKD,EAAW,CAAEvhB,KAAMhK,IAGhD,OAFekW,EAASA,EAAOiF,YAAYsQ,WAAWK,qBAAuB,IAE/DtpB,KAAI,SAACmpB,GAAe,OAAAC,EAAaD,EAAOJ,EAAWC,UAIzE,SAASI,EAAaD,EAAkBJ,EAAsBC,GAC1D,MAAmB,gBAAfG,EAAM/yB,KAed,SAAwB+yB,EAAkBJ,EAA2BxrB,QAA3B,IAAAwrB,MAAA,IACtC,IAAKA,EAAUvsB,OACX,OAAO2sB,EAGH,cAAA3hB,YAAA,IAAO,EAAP,KACFJ,EAAQ2hB,EAAU/oB,KAAI,SAAC,GAAwB,OACjDlJ,MAD2B,EAAA0Q,KAE3B+hB,MAFiC,EAAAnzB,SAKrC,OAAO,yCACA+yB,GAAK,CACRrrB,QAAS,CAAEsJ,MAAK,GAChBqI,QAASjI,EACTpP,KAAM,QACNoxB,UAAW,WACXC,SAAU,WA/BHC,CAAeP,EAAOJ,EAAWC,GAGzB,oBAAfG,EAAM/yB,KAgCd,SAAyB+yB,EAAkB5rB,GACjC,YAAE,IAAAosB,oBAAA,IAAe,EAAf,KAAmBC,EAAA,EAAAA,cAE3B,IAAKD,EAAantB,OACd,OAAO,yCACA2sB,GAAK,CACRjd,SAA2B,MAAjB0d,GAAgCA,IAIlD,IAAMxiB,EAAQuiB,EAAa3pB,KAAI,SAAC,GAAwB,OACpDlJ,MAD8B,EAAA0Q,KAE9B+hB,MAFoC,EAAAnzB,SAKxC,OAAO,yCACA+yB,GAAK,CACR/yB,KAAM,sBACN0H,QAAS,CAAEsJ,MAAK,GAChB8E,SAA2B,MAAjB0d,GAA+BA,EACzCxxB,KAAM,QACNoxB,UAAW,WACXC,SAAU,WArDHI,CAAgBV,EAAOH,GAGf,eAAfG,EAAM/yB,KAsDd,SAA0B+yB,EAAkB5rB,GAChC,cAAAusB,sBAAA,IAAiB,EAAjB,KAER,QAAuBhrB,IAAnBgrB,EACA,OAAOX,EAGX,OAAO,yCAAKA,GAAK,CAAEjd,SAAU7Q,QAAQyuB,KA5D1BC,CAAiBZ,EAAOH,GAG5BG,EA4DX,OAAO,uBAAW,SACd5V,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHuV,yBAA0BA,EAAyBvV,GACnD8V,wBAAyBA,EAAwB9V,O,sBC7G7D,IAuEe,GAvEoC,CAC/C,iBAAkB,CACdyW,SAAU,UACVpkB,OAAQ,UAEZ,eAAgB,CACZokB,SAAU,UACVpkB,OAAQ,QAEZ,gBAAiB,CACbokB,SAAU,UACVpkB,OAAQ,SAEZ,0BAA2B,CACvBokB,SAAU,UACVpkB,OAAQ,mBAEZ,yBAA0B,CACtBokB,SAAU,UACVpkB,OAAQ,kBAEZ,kBAAmB,CACfokB,SAAU,UACVpkB,OAAQ,WAEZkH,UAAW,CACPkd,SAAU,YACVpkB,OAAQ,eAEZqkB,gBAAiB,CACbD,SAAU,YACVpkB,OAAQ,UAEZskB,aAAc,CACVF,SAAU,eACVpkB,OAAQ,eAEZukB,OAAQ,CACJH,SAAU,SACVpkB,OAAQ,eAEZwkB,OAAQ,CACJJ,SAAU,SACVpkB,OAAQ,eAEZykB,SAAU,CACNL,SAAU,WACVpkB,OAAQ,eAEZ0kB,YAAa,CACTN,SAAU,cACVpkB,OAAQ,eAEZ2kB,SAAU,CACNP,SAAU,WACVpkB,OAAQ,eAEZ4kB,WAAY,CACRR,SAAU,aACVpkB,OAAQ,eAEZ6kB,UAAW,CACPT,SAAU,YACVpkB,OAAQ,eAEZ,0BAA2B,CACvBokB,SAAU,cACVpkB,OAAQ,gBCjEhB,SAAS8kB,GAAUvuB,GACf,OAAO,iBAAO,CACVM,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBE,SAAUV,EAAQU,SAClBE,SAAUZ,EAAQY,SAClBC,KAAMb,EAAQa,KACdE,gBAAiBf,EAAQe,gBACzBM,YAAarB,EAAQqB,YACrBF,WAAYnB,EAAQmB,WACpBG,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,cACvB,YCqBA,SAASitB,KACZ,IAAM1V,EAAkB,cACpB,SAAC1B,GAA4B,OAAAA,EAAM0G,QACnC,SAAA7d,GAAgB,kBAAM,OAAAA,MAGpBwuB,EAAqB,cACvB,SAACrX,GAA4B,OAAAA,EAAM0G,QACnC,SAAA7d,GAAgB,gBAACE,GACb,GAAKF,GAAiBA,EAAaI,OAInC,OAAO,eAAKJ,EAAc,CAAEE,GAAE,QAIhCiY,EAA0B,cAC5B,SAAChB,GAA4B,OAAAA,EAAM0G,QACnC,SAAA7d,GAAgB,gBAACD,GACb,GAAKC,GAAiBA,EAAaI,OAInC,OAAO,eAAKJ,GAAc,SAAAiY,GACtB,OD/DuBwW,EC+DRxW,EAAYG,gBD/DwBsW,EC+DP3uB,ED9DjD,kBAAQuuB,GAAUG,GAAWH,GAAUI,IADnC,IAAwBD,EAA4BC,SCoEzDpS,EAAoB,cACtB,SAACnF,GAA4B,OAAAA,EAAM0G,QACnC,SAAA7d,GAAgB,kBACZ,GAAIA,GAAgBA,EAAaI,OAC7B,OAAOJ,EAAa,GAAG+d,2BAK7B4Q,EAAe,cACjB,SAACxX,GAA4B,OAAAA,EAAMhZ,OAAOywB,aAC1C,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbwsB,EAAiB,cACnB,SAAC1X,GAA4B,OAAAA,EAAMhZ,OAAOuhB,eAC1C,SAAArd,GAAS,kBAAM,OAAAA,MAGbysB,EAA8B,cAChC,SAAC3X,GAA4B,OAAAA,EAAMhZ,OAAO4wB,4BAC1C,SAAA1sB,GAAS,kBAAM,OAAAA,MAGb2sB,EAAqB,aACvBnW,GACA,SAACvP,EAAqB,GAA8C,OAA5C,EAAA6F,KAAiDmJ,WACzE,SAACO,EAAiBP,GAAY,kBAC1B,IAAMnJ,EAAOmJ,IAEb,IAAKnJ,EACD,MAAO,GAGX,IAAM8f,GAAuBpW,KAAqB,IAAInV,QAClD,SAACwrB,EAASjX,GAAgB,OAAAiX,EAAQlU,OAAO/C,EAAY4C,eACrD,IAGJ,OAAQ1L,EAAKhE,UAAUgD,eAAiB,IAAIrI,QACxC,SAAAjC,GAAQ,OAAAorB,EAAoB1mB,QAAQ1E,EAAK3D,IAAgB,SAK/DivB,EAAiB,cACnB,SAAChY,GAA4B,OAAAA,EAAMhZ,OAAO4rB,eAC1C,SAAAA,GAAe,gBAAC3P,GACZ,OAAIA,EACO2P,EAAY3P,GAGhB,eAAK2P,OAIdqF,EAAiB,cACnB,SAACjY,GAA4B,OAAAA,EAAMhZ,OAAO+qB,eAC1C,SAAAA,GAAe,gBAAC9O,GACZ,OAAIA,EACO8O,EAAY9O,GAGhB,eAAK8O,OAIdmG,EAAyB,aAC3BlX,EACAgX,EACAN,GACA,SAAC1W,EAAyBgX,EAAgBN,GAAmB,gBAAC9uB,GAC1D,IAAMkY,EAAcE,EAAwBpY,GAE5C,OAAOkY,EAAckX,EAAelX,EAAY/X,IAAM2uB,QAIxDS,EAA+B,cACjC,SAACnY,GAA4B,OAAAA,EAAMhZ,OAAO2rB,6BAC1C,SAAAA,GAA6B,gBAAC1P,GAC1B,OAAIA,EACO0P,EAA0B1P,GAG9B,eAAK0P,OAIdyF,EAAY,cACd,SAACpY,GAA4B,OAAAA,EAAMuJ,SAAS6O,aAC5C,SAAAA,GAAa,kBAAM,OAAc,IAAdA,MAGjBC,EAA2B,cAC7B,SAACrY,GAA4B,OAAAA,EAAMuJ,SAAS8O,4BAC5C,SAAAA,GAA4B,kBAAM,OAA6B,IAA7BA,MAGhCC,EAAa,cACf,SAACtY,GAA4B,OAAAA,EAAMuJ,SAAS+O,cAC5C,SAAAA,GAAc,kBAAM,OAAe,IAAfA,MAGlBzF,EAAa,cACf,SAAC7S,GAA4B,OAAAA,EAAMuJ,SAASsJ,cAC5C,SAAAA,GAAc,gBAAC5P,GACX,OAAIA,GACqC,IAA9B4P,EAAW5P,IAGM,IAArB,eAAK4P,OAIdV,EAAa,cACf,SAACnS,GAA4B,OAAAA,EAAMuJ,SAAS4I,cAC5C,SAAAA,GAAc,gBAAClP,GACX,OAAIA,GACqC,IAA9BkP,EAAWlP,IAGM,IAArB,eAAKkP,OAIdoG,EAAmB,aACrBvX,EACA6R,EACAyF,GACA,SAACtX,EAAyB6R,EAAYyF,GAAe,gBAAC1vB,GAClD,IAAMkY,EAAcE,EAAwBpY,GAE5C,OAAOkY,EAAc+R,EAAW/R,EAAY/X,IAAMuvB,QAIpDxF,EAA2B,cAC7B,SAAC9S,GAA4B,OAAAA,EAAMuJ,SAASuJ,4BAC5C,SAAAA,GAA4B,gBAAC7P,GACzB,OAAIA,GACmD,IAA5C6P,EAAyB7P,IAGM,IAAnC,eAAK6P,OAIpB,OAAO,uBAAW,SACd9S,EACAhI,GAEA,YAHA,IAAAgI,MAAA,IAGO,CACH0B,gBAAiBA,EAAgB1B,GACjCqX,mBAAoBA,EAAmBrX,GACvCgB,wBAAyBA,EAAwBhB,GACjDmF,kBAAmBA,EAAkBnF,GACrCwX,aAAcA,EAAaxX,GAC3B0X,eAAgBA,EAAe1X,GAC/B2X,4BAA6BA,EAA4B3X,GACzD6X,mBAAoBA,EAAmB7X,EAAO,CAAEhI,KAAI,IACpDggB,eAAgBA,EAAehY,GAC/BiY,eAAgBA,EAAejY,GAC/BkY,uBAAwBA,EAAuBlY,GAC/CmY,6BAA8BA,EAA6BnY,GAC3DoY,UAAWA,EAAUpY,GACrBqY,yBAA0BA,EAAyBrY,GACnDsY,WAAYA,EAAWtY,GACvB6S,WAAYA,EAAW7S,GACvBmS,WAAYA,EAAWnS,GACvBuY,iBAAkBA,EAAiBvY,GACnC8S,yBAA0BA,EAAyB9S,OCnOxD,IAAM,GAAkC,CAC3ChZ,OAAQ,GACRuiB,SAAU,ICUP,SAASiP,KACZ,ICNM9T,EAKA+T,EAOAT,EAKAU,EAKAlB,EAKA3E,EAKA8F,EAKAP,ECxCAnY,EAKA8O,EAaAzB,EAiBA0B,EAaA4J,EAWAC,EC5DAC,EAKAC,EAKAC,EAKAC,EAKAC,ECzBAvU,ECCApE,ECDA0E,ECiBAkU,EASAC,EAWAC,EAWAC,EAyBAC,EAmBAvT,EASAwT,EASAC,EASAC,ECrHAC,EAKAC,EAKAC,ERGAC,GCNApV,EAAoB,cACtB,SAAC1E,GAA+B,OAAAA,EAAM0G,QACtC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ+R,EAA2B,aAC7B/T,GACA,SAAAA,GAAqB,kBACjB,OAAOkQ,GAAMlQ,KAAqB,WAAM,WAAI,KAAiB,KAAqB5f,8BAIpFkzB,EAAiB,cACnB,SAAChY,GAA+B,OAAAA,EAAMhZ,OAAO4rB,eAC7C,SAAA1nB,GAAS,kBAAM,OAAAA,MAGbwtB,EAA0B,cAC5B,SAAC1Y,GAA+B,OAAAA,EAAMhZ,OAAO+yB,wBAC7C,SAAA7uB,GAAS,kBAAM,OAAAA,MAGbssB,EAAe,cACjB,SAACxX,GAA+B,OAAAA,EAAMhZ,OAAOywB,aAC7C,SAAAvsB,GAAS,kBAAM,OAAAA,MAGb2nB,EAAa,cACf,SAAC7S,GAA+B,QAAEA,EAAMuJ,SAASsJ,cACjD,SAAA/rB,GAAU,kBAAM,OAAAA,MAGd6xB,EAAsB,cACxB,SAAC3Y,GAA+B,QAAEA,EAAMuJ,SAASoP,uBACjD,SAAA7xB,GAAU,kBAAM,OAAAA,MAGdsxB,EAAY,cACd,SAACpY,GAA+B,QAAEA,EAAMuJ,SAAS6O,aACjD,SAAAtxB,GAAU,kBAAM,OAAAA,MAGb,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,GAEO,CACH0E,kBAAmBA,EAAkB1E,GACrCyY,yBAA0BA,EAAyBzY,GACnDgY,eAAgBA,EAAehY,GAC/B0Y,wBAAyBA,EAAwB1Y,GACjDwX,aAAcA,EAAaxX,GAC3B6S,WAAYA,EAAW7S,GACvB2Y,oBAAqBA,EAAoB3Y,GACzCoY,UAAWA,EAAUpY,QD9CvBga,ESZH,WACH,IAAM7Y,EAAU,cACZ,SAACnB,GAAqB,OAAAA,EAAM0G,QAC5B,SAAA1O,GAAQ,kBAAM,OAAAA,MAGZiiB,EAAiB,aACnB9Y,GACA,SAAAA,GAAW,kBACT,OAAOyT,GAAMzT,KAAW,WAAM,WAAI,KAAiB,KAAqBpc,oBAIxEyyB,EAAe,cACjB,SAACxX,GAAqB,OAAAA,EAAMhZ,OAAOywB,aACnC,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbktB,EAAY,cACd,SAACpY,GAAqB,QAAEA,EAAMuJ,SAAS6O,aACvC,SAAAtxB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHmB,QAASA,EAAQnB,GACjBia,eAAgBA,EAAeja,GAC/BwX,aAAcA,EAAaxX,GAC3BoY,UAAWA,EAAUpY,OTlBFka,GACrBC,GEXAla,EAAW,cACb,SAACD,GAA+B,OAAAA,KAChC,SAAAA,GAAS,kBAAM,OAAAA,MAGb+O,EAAiB,cACnB,SAAC/O,GAA+B,OAAAA,EAAMuJ,YACtC,SAAAA,GAAY,2BAAQ,SAACle,GACjB,GAAIA,EAAU,CACV,IAAMgH,EAASkX,EAASle,GAExB,OAA6C,KAArCgH,GAAUA,EAAO0c,gBAG7B,OAAO,eAAKxF,EAAU,CAAEwF,gBAAgB,UAI1CzB,EAAgB,cAClB,SAACtN,GAA+B,OAAAA,EAAM0G,QACtC,SAAAA,GAAQ,2BAAQ,SAACrb,EAAoC0gB,GACjD,IAAM1Z,EAASqU,EAAKrb,GAEpB,QAAKgH,IAIA0Z,GAIgD,IAA9C1Z,EAAOqZ,sBAAsBK,GAHzB,eAAK1Z,EAAOqZ,uBAAuB,SAAA4B,GAAiB,OAAkB,IAAlBA,YAOjE0B,EAAmB,cACrB,SAAChP,GAA+B,OAAAA,EAAMuJ,YACtC,SAAAA,GAAY,2BAAQ,SAACle,GACjB,GAAIA,EAAU,CACV,IAAMgH,EAASkX,EAASle,GAExB,OAA+C,KAAvCgH,GAAUA,EAAO2c,kBAG7B,OAAO,eAAKzF,EAAU,CAAEyF,kBAAkB,UAI5C4J,EAAqB,cACvB,SAAC5Y,GAA+B,OAAAA,EAAMhZ,UACtC,SAAAA,GAAU,2BAAQ,SAACqE,GACf,IAAMgH,EAAShH,EACXrE,EAAOqE,GACP,eAAK,iBAAOrE,IAAS,SAAAqL,GAAU,SAAGA,IAAUA,EAAOob,oBAEvD,OAAOpb,GAAUA,EAAOob,sBAI1BoL,EAAuB,cACzB,SAAC7Y,GAA+B,OAAAA,EAAMhZ,UACtC,SAAAA,GAAU,2BAAQ,SAACqE,GACf,IAAMgH,EAAShH,EACXrE,EAAOqE,GACP,eAAK,iBAAOrE,IAAS,SAAAqL,GAAU,SAAGA,IAAUA,EAAOwb,sBAEvD,OAAOxb,GAAUA,EAAOwb,wBAIzB,uBAAW,SACd7N,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHC,SAAUA,EAASD,GACnB+O,eAAgBA,EAAe/O,GAC/BsN,cAAeA,EAActN,GAC7BgP,iBAAkBA,EAAiBhP,GACnC4Y,mBAAoBA,EAAmB5Y,GACvC6Y,qBAAsBA,EAAqB7Y,QFnE7Coa,EUbH,WAEH,IAAMC,EAAY,cACd,SAACra,GAAuB,OAAAA,EAAM0G,QAC9B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ4T,EAAmB,cACrB,SAACta,GAAuB,OAAAA,EAAM0G,QAC9B,SAAAA,GAAQ,gBAAC6T,GACL,GAAK7T,EAAL,CAIQ,IAAA8T,EAAA,UAAAA,cAER,GAAKA,EAIL,YAAsBjvB,IAAfgvB,EACHC,EAAc7rB,QAAO,SAAC,G,IAAE9J,EAAA,EAAAA,KAAW,OAAA01B,IAAe11B,KAClD21B,OAINnV,EAAiB,cACnB,SAACrF,GAAuB,OAAAA,EAAM0G,MAAQ1G,EAAM0G,KAAKtB,eACjD,SAAAsB,GAAQ,kBAAM,OAAAA,MAGZtG,EAAmB,cACrB,SAACJ,GAAuB,OAAAA,EAAM0G,MAAQ1G,EAAM0G,KAAKxG,WACjD,SAAAwG,GAAQ,kBAAM,OAAAA,MAGZ+T,EAAoB,cACtB,SAACza,GAAuB,OAAAA,EAAMpV,MAAQoV,EAAMpV,KAAK8vB,kBACjD,SAAAhU,GAAQ,kBAAM,OAAAA,MAGZ8Q,EAAe,cACjB,SAACxX,GAAuB,OAAAA,EAAMhZ,OAAOywB,aACrC,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbktB,EAAY,cACd,SAACpY,GAAuB,QAAEA,EAAMuJ,SAAS6O,aACzC,SAAAtxB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,GAEO,CACHqa,UAAWA,EAAUra,GACrBsa,iBAAkBA,EAAiBta,GACnCqF,eAAgBA,EAAerF,GAC/BI,iBAAkBA,EAAiBJ,GACnCya,kBAAmBA,EAAkBza,GACrCwX,aAAcA,EAAaxX,GAC3BoY,UAAWA,EAAUpY,OVhDA2a,GACvBC,EWlBH,WACH,IAAMC,EAAe,cACjB,SAAC7a,GAAwB,OAAAA,EAAM0G,QAC/B,SAAA8O,GAAa,kBAAM,OAAAA,MAGjBgC,EAAe,cACjB,SAACxX,GAAwB,OAAAA,EAAMhZ,OAAOywB,aACtC,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbktB,EAAY,cACd,SAACpY,GAAwB,QAAEA,EAAMuJ,SAAS6O,aAC1C,SAAAtxB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH6a,aAAcA,EAAa7a,GAC3BwX,aAAcA,EAAaxX,GAC3BoY,UAAWA,EAAUpY,OXJC8a,GACxBC,GGfAjC,EAAa,cACf,SAAC9Y,GAAuB,OAAAA,EAAM0G,QAC9B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZqS,EAAiB,cACnB,SAAC/Y,GAAuB,OAAAA,EAAMhZ,OAAOg0B,qBACrC,SAAA9vB,GAAS,kBAAM,OAAAA,MAGb8tB,EAAgB,cAClB,SAAChZ,GAAuB,OAAAA,EAAMhZ,OAAOi0B,oBACrC,SAAA/vB,GAAS,kBAAM,OAAAA,MAGb+tB,EAAa,cACf,SAACjZ,GAAuB,QAAEA,EAAMuJ,SAAS2R,oBACzC,SAAAp0B,GAAU,kBAAM,OAAAA,MAGdoyB,EAAa,cACf,SAAClZ,GAAuB,QAAEA,EAAMuJ,SAAS4R,oBACzC,SAAAr0B,GAAU,kBAAM,OAAAA,MAGb,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH8Y,WAAYA,EAAW9Y,GACvB+Y,eAAgBA,EAAe/Y,GAC/BgZ,cAAeA,EAAchZ,GAC7BiZ,WAAYA,EAAWjZ,GACvBkZ,WAAYA,EAAWlZ,QHjBzBob,GIrBAzW,EAAc,cAChB,SAAC3E,GAAyB,OAAAA,EAAM0G,QAChC,SAAA3T,GAAY,kBAAM,OAAAA,MAGf,uBAAW,SACdiN,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH2E,YAAaA,EAAY3E,QJa3Bqb,EYhBH,WACH,IAAMC,EAAiB,cACnB,SAACtb,GAAiC,OAAAA,EAAMhZ,OAAOmnB,kBAC/C,SAACnO,GAAiC,OAAAA,EAAMhZ,OAAOknB,eAC/C,SAACC,EAAgBD,GAAgB,gBAAC7iB,GAC9B,IAAIA,GAAY8iB,IAAmB9iB,EAInC,OAAO6iB,MAITqN,EAAkB,cACpB,SAACvb,GAAiC,OAAAA,EAAMhZ,OAAOwnB,mBAC/C,SAACxO,GAAiC,OAAAA,EAAMhZ,OAAOunB,gBAC/C,SAACC,EAAiBD,GAAiB,gBAACljB,GAChC,IAAIA,GAAYmjB,IAAoBnjB,EAIpC,OAAOkjB,MAITqK,EAAqB,cACvB,SAAC5Y,GAAiC,OAAAA,EAAMhZ,OAAO0mB,sBAC/C,SAAC1N,GAAiC,OAAAA,EAAMhZ,OAAOymB,mBAC/C,SAACC,EAAoBD,GAAoB,gBAACpiB,GACtC,IAAIA,GAAYqiB,IAAuBriB,EAIvC,OAAOoiB,MAIT+N,EAA4B,cAC9B,SAACxb,GAAiC,OAAAA,EAAMhZ,OAAO6nB,6BAC/C,SAAC7O,GAAiC,OAAAA,EAAMhZ,OAAO4nB,0BAC/C,SAACC,EAA2BD,GAA2B,gBAACvjB,GACpD,IAAIA,GAAYwjB,IAA8BxjB,EAI9C,OAAOujB,MAITK,EAAc,cAChB,SAACjP,GAAiC,OAAAA,EAAMuJ,SAAS4E,kBACjD,SAACnO,GAAiC,OAAAA,EAAMuJ,SAAS0F,eACjD,SAACd,EAAgBc,GAAgB,gBAAC5jB,GAC9B,QAAIA,GAAY8iB,IAAmB9iB,MAI1B4jB,MAIXC,EAAe,cACjB,SAAClP,GAAiC,OAAAA,EAAMuJ,SAASiF,mBACjD,SAACxO,GAAiC,OAAAA,EAAMuJ,SAAS2F,gBACjD,SAACV,EAAiBU,GAAiB,gBAAC7jB,GAChC,QAAIA,GAAYmjB,IAAoBnjB,MAI3B6jB,MAIXH,EAAiB,cACnB,SAAC/O,GAAiC,OAAAA,EAAMuJ,SAASmE,sBACjD,SAAC1N,GAAiC,OAAAA,EAAMuJ,SAASwF,kBACjD,SAACrB,EAAoBqB,GAAmB,gBAAC1jB,GACrC,QAAIA,GAAYqiB,IAAuBriB,MAI9B0jB,MAIXzB,EAAgB,cAClB,SAACtN,GAAiC,OAAAA,EAAM0G,QACxC,SAAAA,GAAQ,gBAACrb,GACL,SACIqb,EAAKrb,KACLqb,EAAKrb,GAAUiiB,mBAKrB6B,EAAsB,cACxB,SAACnP,GAAiC,OAAAA,EAAMuJ,SAASsF,6BACjD,SAAC7O,GAAiC,OAAAA,EAAMuJ,SAAS4F,uBACjD,SAACN,EAA2BM,GAAwB,gBAAC9jB,GACjD,QAAIA,GAAYwjB,IAA8BxjB,MAIrC8jB,MAIjB,OAAO,uBAAW,SACdnP,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHsb,eAAgBA,EAAetb,GAC/Bub,gBAAiBA,EAAgBvb,GACjC4Y,mBAAoBA,EAAmB5Y,GACvCwb,0BAA2BA,EAA0Bxb,GACrDiP,YAAaA,EAAYjP,GACzBkP,aAAcA,EAAalP,GAC3B+O,eAAgBA,EAAe/O,GAC/BsN,cAAeA,EAActN,GAC7BmP,oBAAqBA,EAAoBnP,OZvGVyb,GACjCC,EalBH,WACH,IAAMC,EAAsB,cACxB,SAAC3b,GAAgC,OAAAA,EAAM0G,QACvC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZqS,EAAiB,cACnB,SAAC/Y,GAAgC,OAAAA,EAAMhZ,OAAO40B,8BAC9C,SAAA1wB,GAAS,kBAAM,OAAAA,MAGb8tB,EAAgB,cAClB,SAAChZ,GAAgC,OAAAA,EAAMhZ,OAAO60B,6BAC9C,SAAA3wB,GAAS,kBAAM,OAAAA,MAGb+tB,EAAa,cACf,SAACjZ,GAAgC,QAAEA,EAAMuJ,SAASuS,6BAClD,SAAAh1B,GAAU,kBAAM,OAAAA,MAGdoyB,EAAa,cACf,SAAClZ,GAAgC,QAAEA,EAAMuJ,SAASwS,6BAClD,SAAAj1B,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH2b,oBAAqBA,EAAoB3b,GACzC+Y,eAAgBA,EAAe/Y,GAC/BgZ,cAAeA,EAAchZ,GAC7BiZ,WAAYA,EAAWjZ,GACvBkZ,WAAYA,EAAWlZ,ObhBOgc,GAChCC,EcfH,WACH,IAAMC,EAAgC,cAClC,SAAClc,GAA2B,OAAAA,EAAM0G,QAClC,SAAAlB,GAAe,gBAACX,GACZ,GAAKW,EAAL,CAIA,IAAM2W,EAAmBtX,EAAciC,QAAajC,EAAciC,QAAO,IAAIjC,EAAc9b,GAAO8b,EAAc9b,GAE1GqzB,EAAgB,GAAqBD,GAE3C,OAAKC,EAIE,iBAA0B5W,EAAa4W,GAHnC,QAObC,EAAoB,cACtB,SAACrc,GAA2B,OAAAA,EAAM0G,QAClC,SAAClB,GAAqB,YAArB,IAAAA,MAAA,IAAqB,SAACzd,GACnB,IAAMu0B,EAAQ,iBAAO,IAErB,OAAO9W,EAAY+W,MAAK,SAAC10B,GACrB,OAAAA,EAAW20B,cAAgBz0B,GACL,gBAAtBF,EAAWwK,QACXiqB,EAAMG,MAAK,SAAA7f,GAAQ,yBAAQ/U,EAAY+U,aAK7C8f,EAAiB,cACnB,SAAC1c,GAA2B,OAAAA,EAAM0G,QAClC,SAAAlB,GAAe,kBACX,GAAKA,EAAL,CAIA,IAAMmX,EAAkB,kBAAQ,IAAsB,SAAA/f,GAClD,wBAAO4I,GAAa,SAAC3d,GACjB,MAAuB,gBAAhB+U,EAAKvK,QAA4B,kBAAQxK,EAAY+U,SAI9DggB,EAAqB,kBAAQ,IAAsB,SAAAC,GACrD,wBAAOrX,GAAa,SAAC3d,GACjB,OAAO,kBAAQA,EAAYg1B,SAInC,OAAO,yBAAIF,EAAoBC,QAIjCnX,EAAqB,cACvB,SAACzF,GAA2B,OAAAA,EAAMpV,QAClC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ4sB,EAAe,cACjB,SAACxX,GAA2B,OAAAA,EAAMhZ,OAAOywB,aACzC,SAAAA,GAAa,kBAAM,OAAAA,MAGjBQ,EAAiB,cACnB,SAACjY,GAA2B,OAAAA,EAAMhZ,OAAOgrB,oBACzC,SAAChS,GAA2B,OAAAA,EAAMhZ,OAAO+qB,eACzC,SAACC,EAAkBD,GAAgB,gBAAChqB,GAChC,IAAIA,GAAgBiqB,IAAqBjqB,EAIzC,OAAOgqB,MAITqG,EAAY,cACd,SAACpY,GAA2B,OAAAA,EAAMuJ,SAAS6O,aAC3C,SAAAA,GAAa,kBAAM,QAAEA,MAGnBjG,EAAa,cACf,SAACnS,GAA2B,OAAAA,EAAMuJ,SAAS6I,sBAC3C,SAACpS,GAA2B,OAAAA,EAAMuJ,SAAS4I,cAC3C,SAACC,EAAoBD,GAAe,gBAACpqB,GACjC,QAAIA,GAAgBqqB,IAAuBrqB,MAIlCoqB,MAIjB,OAAO,uBAAW,SACdnS,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHqc,kBAAmBA,EAAkBrc,GACrC0c,eAAgBA,EAAe1c,GAC/Bkc,8BAA+BA,EAA8Blc,GAC7DyF,mBAAoBA,EAAmBzF,GACvCwX,aAAcA,EAAaxX,GAC3BiY,eAAgBA,EAAejY,GAC/BoY,UAAWA,EAAUpY,GACrBmS,WAAYA,EAAWnS,Od3FE8c,GAC3BC,EAAqBzH,KACrB0H,EehBH,WACH,IAAMC,EAAoB,cACtB,SAACjd,GAA8B,OAAAA,EAAM0G,QACrC,SAAA5B,GAAkB,kBAAM,OAAAA,MAGtBa,EAAwB,cAC1B,SAAC3F,GAA8B,OAAAA,EAAMpV,QACrC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZma,EAAmB,cACrB,SAAC/E,GAA8B,OAAAA,EAAM0G,QACrC,SAAA5B,GAAkB,gBAACzZ,EAAkB2Z,GACjC,OAAOA,EACH,eAAKF,EAAgB,CAAE/b,GAAIsC,EAAUyb,QAAS9B,IAC9C,eAAKF,EAAgB,CAAE/b,GAAIsC,QAIjC6xB,EAA0B,aAC5BnY,GACA,SAAAA,GAAoB,gBAAC1Z,EAAkB2Z,GACnC,OAAO4P,GAAM7P,EAAiB1Z,EAAU2Z,IAAY,WAAM,WAAI,KAAiB,KAAqBxf,6BAItGgyB,EAAe,cACjB,SAACxX,GAA8B,OAAAA,EAAMhZ,OAAOywB,aAC5C,SAAAA,GAAa,kBAAM,OAAAA,MAGjB0F,EAAqB,cACvB,SAACnd,GAA8B,OAAAA,EAAMhZ,OAAOypB,gBAC5C,SAACzQ,GAA8B,OAAAA,EAAMhZ,OAAO0pB,mBAC5C,SAACD,EAAcC,GAAoB,gBAACrlB,GAChC,IAAIA,GAAYolB,IAAiBplB,EAIjC,OAAOqlB,MAIT0H,EAAY,cACd,SAACpY,GAA8B,OAAAA,EAAMuJ,SAAS6O,aAC9C,SAAAA,GAAa,kBAAM,QAAEA,MAGnBzH,EAAkB,cACpB,SAAC3Q,GAA8B,OAAAA,EAAMuJ,SAASkH,gBAC9C,SAACzQ,GAA8B,OAAAA,EAAMuJ,SAASoH,mBAC9C,SAACF,EAAcE,GAAoB,gBAACtlB,GAChC,QAAIA,GAAYolB,IAAiBplB,MAIxBslB,MAIjB,OAAO,uBAAW,SACd3Q,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHid,kBAAmBA,EAAkBjd,GACrC2F,sBAAuBA,EAAsB3F,GAC7C+E,iBAAkBA,EAAiB/E,GACnCkd,wBAAyBA,EAAwBld,GACjDwX,aAAcA,EAAaxX,GAC3Bmd,mBAAoBA,EAAmBnd,GACvCoY,UAAWA,EAAUpY,GACrB2Q,gBAAiBA,EAAgB3Q,OfxDLod,GAC9BC,EgBrBH,WACH,IAAMzE,EAAqB,cACvB,SAAC5Y,GAAgC,OAAAA,EAAMhZ,OAAO0mB,sBAC9C,SAAC1N,GAAgC,OAAAA,EAAMhZ,OAAOymB,mBAC9C,SAACC,EAAoBD,GAAoB,gBAACpiB,GACtC,IAAIA,GAAYqiB,IAAuBriB,EAIvC,OAAOoiB,MAIT6P,EAAkB,cACpB,SAACtd,GAAgC,OAAAA,EAAMhZ,OAAOgqB,mBAC9C,SAAChR,GAAgC,OAAAA,EAAMhZ,OAAO+pB,gBAC9C,SAACC,EAAiBD,GAAiB,gBAAC1lB,GAChC,IAAIA,GAAY2lB,IAAoB3lB,EAIpC,OAAO0lB,MAITwM,EAAmB,cACrB,SAACvd,GAAgC,OAAAA,EAAMhZ,OAAOqqB,oBAC9C,SAACrR,GAAgC,OAAAA,EAAMhZ,OAAOoqB,iBAC9C,SAACC,EAAkBD,GAAkB,gBAAC/lB,GAClC,IAAIA,GAAYgmB,IAAqBhmB,EAIrC,OAAO+lB,MAIToM,EAA4B,cAC9B,SAACxd,GAAgC,OAAAA,EAAMhZ,OAAO6nB,6BAC9C,SAAC7O,GAAgC,OAAAA,EAAMhZ,OAAO4nB,0BAC9C,SAACC,EAA2BD,GAA2B,gBAACvjB,GACpD,IAAIA,GAAYwjB,IAA8BxjB,EAI9C,OAAOujB,MAITG,EAAiB,cACnB,SAAC/O,GAAgC,OAAAA,EAAMuJ,SAASmE,sBAChD,SAAC1N,GAAgC,OAAAA,EAAMuJ,SAASwF,kBAChD,SAACrB,EAAoBqB,GAAmB,gBAAC1jB,GACrC,QAAIA,GAAYqiB,IAAuBriB,MAI9B0jB,MAIXzB,EAAgB,cAClB,SAACtN,GAAgC,OAAAA,EAAM0G,QACvC,SAAAA,GAAQ,gBAACrb,GACL,SACIqb,EAAKrb,KACLqb,EAAKrb,GAAUiiB,mBAKrBiE,EAAc,cAChB,SAACvR,GAAgC,OAAAA,EAAMuJ,SAASyH,mBAChD,SAAChR,GAAgC,OAAAA,EAAMuJ,SAASgI,eAChD,SAACP,EAAiBO,GAAgB,gBAAClmB,GAC/B,QAAIA,GAAY2lB,IAAoB3lB,MAI3BkmB,MAIXC,EAAe,cACjB,SAACxR,GAAgC,OAAAA,EAAMuJ,SAAS8H,oBAChD,SAACrR,GAAgC,OAAAA,EAAMuJ,SAASiI,gBAChD,SAACH,EAAkBG,GAAiB,gBAACnmB,GACjC,QAAIA,GAAYgmB,IAAqBhmB,MAI5BmmB,MAIXrC,EAAsB,cACxB,SAACnP,GAAgC,OAAAA,EAAMuJ,SAASsF,6BAChD,SAAC7O,GAAgC,OAAAA,EAAMuJ,SAAS4F,uBAChD,SAACN,EAA2BM,GAAwB,gBAAC9jB,GACjD,QAAIA,GAAYwjB,IAA8BxjB,MAIrC8jB,MAIjB,OAAO,uBAAW,SACdnP,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH4Y,mBAAoBA,EAAmB5Y,GACvCsd,gBAAiBA,EAAgBtd,GACjCud,iBAAkBA,EAAiBvd,GACnCwd,0BAA2BA,EAA0Bxd,GACrD+O,eAAgBA,EAAe/O,GAC/BsN,cAAeA,EAActN,GAC7BuR,YAAaA,EAAYvR,GACzBwR,aAAcA,EAAaxR,GAC3BmP,oBAAqBA,EAAoBnP,OhBlGXyd,GAChCC,GK3BAnd,EAAc,cAChB,SAACP,GAA+B,OAAAA,EAAM0G,QACtC,SAAAA,GAAQ,gBAAkDrb,GACtD,OAAOqb,EAAKrb,OAIb,uBAAW,SACd2U,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHO,YAAaA,EAAYP,QLiB3B2d,IM7BA1Y,EAAqB,cACvB,SAACjF,GAA4B,OAAAA,EAAM0G,QACnC,SAAA7d,GAAgB,kBACZ,GAAKA,GAAiBA,EAAa,GAInC,OAAOA,EAAa,GAAGoY,oBAIxB,uBAAW,SACdjB,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHiF,mBAAoBA,EAAmBjF,QNezC4d,GiB7BH,WACH,IAAMC,EAAuB,cACzB,SAAC7d,GAAgC,OAAAA,EAAM0G,QACvC,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ8Q,EAAe,cACjB,SAACxX,GAAgC,OAAAA,EAAMhZ,OAAOywB,aAC9C,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbktB,EAAY,cACd,SAACpY,GAAgC,OAAAA,EAAMuJ,SAAS6O,aAChD,SAAAtxB,GAAU,kBAAM,QAAEA,MAGtB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH6d,qBAAsBA,EAAqB7d,GAC3CwX,aAAcA,EAAaxX,GAC3BoY,UAAWA,EAAUpY,OjBOS8d,GAChCC,GkB3BH,WACH,IAAMC,EAAwB,cAC1B,SAAChe,GAAiC,OAAAA,EAAMhZ,OAAOysB,yBAC/C,SAACzT,GAAiC,OAAAA,EAAMhZ,OAAOwsB,sBAC/C,SAACC,EAAuBD,GAAuB,gBAACnoB,GAC5C,IAAIA,GAAYooB,IAA0BpoB,EAI1C,OAAOmoB,MAITyK,EAAuB,cACzB,SAACje,GAAiC,OAAAA,EAAMhZ,OAAO8sB,wBAC/C,SAAC9T,GAAiC,OAAAA,EAAMhZ,OAAO6sB,qBAC/C,SAACC,EAAsBD,GAAsB,gBAACxoB,GAC1C,IAAIA,GAAYyoB,IAAyBzoB,EAIzC,OAAOwoB,MAIT+E,EAAqB,cACvB,SAAC5Y,GAAiC,OAAAA,EAAMhZ,OAAO0mB,sBAC/C,SAAC1N,GAAiC,OAAAA,EAAMhZ,OAAOymB,mBAC/C,SAACC,EAAoBD,GAAoB,gBAACpiB,GACtC,IAAIA,GAAYqiB,IAAuBriB,EAIvC,OAAOoiB,MAITuG,EAAoB,cACtB,SAAChU,GAAiC,OAAAA,EAAMuJ,SAASkK,yBACjD,SAACzT,GAAiC,OAAAA,EAAMuJ,SAASyK,qBACjD,SAACP,EAAuBO,GAAsB,gBAAC3oB,GAC3C,QAAIA,GAAYooB,IAA0BpoB,MAIjC2oB,MAIXC,EAAoB,cACtB,SAACjU,GAAiC,OAAAA,EAAMuJ,SAASuK,wBACjD,SAAC9T,GAAiC,OAAAA,EAAMuJ,SAAS0K,qBACjD,SAACH,EAAsBG,GAAsB,gBAAC5oB,GAC1C,QAAIA,GAAYyoB,IAAyBzoB,MAIhC4oB,MAIXlF,EAAiB,cACnB,SAAC/O,GAAiC,OAAAA,EAAMuJ,SAASmE,sBACjD,SAAC1N,GAAiC,OAAAA,EAAMuJ,SAASwF,kBACjD,SAACrB,EAAoBqB,GAAmB,gBAAC1jB,GACrC,QAAIA,GAAYqiB,IAAuBriB,MAI9B0jB,MAIXzB,EAAgB,cAClB,SAACtN,GAAiC,OAAAA,EAAM0G,QACxC,SAAAA,GAAQ,gBAACrb,GACL,SACIqb,EAAKrb,KACLqb,EAAKrb,GAAUiiB,mBAK3B,OAAO,uBAAW,SACdtN,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHge,sBAAuBA,EAAsBhe,GAC7Cie,qBAAsBA,EAAqBje,GAC3C4Y,mBAAoBA,EAAmB5Y,GACvCgU,kBAAmBA,EAAkBhU,GACrCiU,kBAAmBA,EAAkBjU,GACrC+O,eAAgBA,EAAe/O,GAC/BsN,cAAeA,EAActN,OlBlEEke,GACjCC,GAA4B/G,KAC5BgH,GmBHH,WACH,IAAM7d,EAAc,cAChB,SAACP,GAAyB,OAAAA,EAAM0G,QAChC,SAACvU,EAAkB,GAAqD,OAAnD,EAAAa,eAAkE0R,qBACvF,SAACvS,EAAkB,GAA2C,OAAzC,EAAA6F,KAA8CmJ,WACnE,SAAChP,EAAkB,GAA+C,OAA7C,EAAAY,SAAsD4R,eAC3E,SAACxS,EAAkB,GAAmD,OAAjD,EAAAtJ,aAA8D6Y,mBACnF,SAACvP,EAAkB,GAA8C,OAA5C,EAAAsC,QAAoDqkB,cACzE,SAAC3mB,EAAkB,GAAuD,OAArD,EAAAqG,iBAAsEmjB,uBAC3F,SAACjV,EAAMhC,EAAmBvD,EAASwD,EAAajD,EAAiBoX,EAAY6C,GAAwB,kBACjG,IAAM3oB,EAAiB0R,IACjB1M,EAAOmJ,IACPpO,EAAW4R,IACX9b,EAAe6Y,KAAqB,GACpCjN,EAAUqkB,KAAgB,GAC1BtgB,EAAmBmjB,KAAyB,GAElD,GAAKjV,GAAS1O,GAASjF,EAIvB,OAAO,yCACA2T,GAAI,CACP1T,eAAc,EACdgF,KAAI,EACJjF,SAAQ,EACRlK,aAAY,EACZ4L,QAAO,EACP+D,iBAAgB,QAKtB6lB,EAAqB,aACvB9d,GACA,SAAAA,GAAe,kBACX,OAAOqU,GAAMrU,KAAe,WAAM,WAAI,KAAiB,KAAqBtb,wBAI9Eq5B,EAAwB,aAC1B/d,GACA,SAAAA,GAAe,gBAACge,GACZ,IAAM1mB,EAAW0I,IAEjB,GAAK1I,EAAL,CAIA,IAAMvB,EAAauB,EAASvB,YAAc,EACpClD,EAAcyE,EAAS9E,SAASK,aAAe,EAErD,OAAOmrB,EAAiB7tB,KAAK8tB,IAAIloB,EAAalD,EAAa,GAAKyE,EAAS4mB,wBAI3EjH,EAAe,cACjB,SAACxX,GAAyB,OAAAA,EAAMhZ,OAAOywB,aACvC,SAAAvsB,GAAS,kBAAM,OAAAA,MAGb8sB,EAAiB,cACnB,SAAChY,GAAyB,OAAAA,EAAMhZ,OAAO4rB,eACvC,SAAA1nB,GAAS,kBAAM,OAAAA,MAGbwzB,EAAuB,cACzB,SAAC1e,GAAyB,OAAAA,EAAMuJ,SAASmV,wBACzC,SAAAA,GAAwB,kBAAM,OAAyB,IAAzBA,MAG5BtG,EAAY,cACd,SAACpY,GAAyB,OAAAA,EAAMuJ,SAAS6O,aACzC,SAAAA,GAAa,kBAAM,OAAc,IAAdA,MAGjBvF,EAAa,cACf,SAAC7S,GAAyB,OAAAA,EAAMuJ,SAASsJ,cACzC,SAAAA,GAAc,kBAAM,OAAe,IAAfA,MAGxB,OAAO,uBAAW,SACd7S,EACAhN,EACAgF,EACAnP,EACA4L,EACA1B,EACAyF,GAEA,YARA,IAAAwH,MAAA,IAQO,CACHO,YAAaA,EAAYP,EAAO,CAC5BhN,eAAc,EACdgF,KAAI,EACJnP,aAAY,EACZ4L,QAAO,EACP1B,SAAQ,EACRyF,iBAAgB,IAEpB6lB,mBAAoBA,EAAmBre,EAAO,CAC1ChN,eAAc,EACdgF,KAAI,EACJnP,aAAY,EACZ4L,QAAO,EACP1B,SAAQ,EACRyF,iBAAgB,IAEpB8lB,sBAAuBA,EAAsBte,EAAO,CAChDhN,eAAc,EACdgF,KAAI,EACJnP,aAAY,EACZ4L,QAAO,EACP1B,SAAQ,EACRyF,iBAAgB,IAEpBgf,aAAcA,EAAaxX,GAC3BgY,eAAgBA,EAAehY,GAC/B0e,qBAAsBA,EAAqB1e,GAC3CoY,UAAWA,EAAUpY,GACrB6S,WAAYA,EAAW7S,OnBpHA2e,GACzBC,GoBlBH,WACH,IAAMha,EAAW,cACb,SAAC5E,GAAsB,OAAAA,EAAM0G,QAC7B,SAACvU,EAAe,GAAkD,OAAhD,EAAAa,eAA+D0R,uBACjF,SAACvS,EAAe,GAA2C,OAAzC,EAAAsC,QAAiDqkB,gBACnE,SAACpS,EAAM1T,EAAgByB,GAAiB,YAAjB,IAAAA,MAAA,IAAiB,WACpC,GAAKiS,GAAS1T,EAId,OAAO,yCACA0T,GAAI,CACP1T,eAAc,EACdyB,QAAO,QAKboqB,EAAkB,aACpBja,GACA,SAAAA,GAAY,kBACR,OAAOgQ,GAAMhQ,KAAY,WAAM,WAAI,KAAiB,KAAqBxf,qBAI3EwgB,EAAe,cACjB,SAAC5F,GAAsB,OAAAA,EAAMpV,QAC7B,SAAAA,GAAQ,kBAAM,OAAAA,MAGZ4sB,EAAe,cACjB,SAACxX,GAAsB,OAAAA,EAAMhZ,OAAOywB,aACpC,SAAAvsB,GAAS,kBAAM,OAAAA,MAGbktB,EAAY,cACd,SAACpY,GAAsB,QAAEA,EAAMuJ,SAAS6O,aACxC,SAAAtxB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,EACAhN,EACAyB,GAEA,YAJA,IAAAuL,MAAA,IAIO,CACH4E,SAAUA,EAAS5E,EAAO,CAAEhN,eAAc,EAAEyB,QAAO,IACnDoqB,gBAAiBA,EAAgB7e,EAAO,CAAEhN,eAAc,EAAEyB,QAAO,IACjEmR,aAAcA,EAAa5F,GAC3BwX,aAAcA,EAAaxX,GAC3BoY,UAAWA,EAAUpY,OpBhCD8e,GACtBC,IOlBA5F,EAAqB,cACvB,SAAC,GAA2C,OAAzC,EAAAzlB,MAA+CkS,gBAClD,SAAAA,GAAgB,kBACZ,IAAMhb,EAAOgb,IAEb,OAAOhb,GAAQA,EAAKuJ,YAItBilB,EAAoB,cACtB,SAAC,GAA2C,OAAzC,EAAA1lB,MAA+CkR,YAClD,SAAAA,GAAY,kBACR,IAAMlR,EAAQkR,IAEd,OAAO,eAAKlR,GAASA,EAAME,UAAU,SAAC,G,IAAEmB,EAAA,EAAAA,WACpC,MAAe,oBAAfA,GAAmD,gBAAfA,SAK1CskB,EAAmB,cACrB,SAAC,GAA8C,OAA5C,EAAAxhB,SAAqD0I,eACxD,SAAAA,GAAe,kBACX,IAAM1I,EAAW0I,IAEjB,OAAO,eAAK1I,GAAYA,EAASjE,UAAU,SAAC,GACxC,OAD0C,EAAAorB,eACzB,YAKvB1F,EAAe,aACjBH,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAM6F,EAAkB9F,IAExB,GAAI8F,GAAmBA,EAAgBl2B,GACnC,MAAO,CACHgM,WAAYkqB,EAAgBl2B,GAC5Bic,UAAWia,EAAgBnY,SAInC,IAAM3S,EAAUklB,KAAsBD,IAEtC,OAAIjlB,GAAWA,EAAQY,WACZ,CACHA,WAAYZ,EAAQY,WACpBiQ,UAAW7Q,EAAQ6Q,gBAH3B,MASFuU,EAAmB,aACrBJ,EACAE,EACAD,GACA,SAACD,EAAoBE,EAAkBD,GAAsB,kBACzD,IAAM6F,EAAkB9F,IAExB,GAAI8F,GAAmBA,EAAgBn4B,OACnC,OAAOm4B,EAAgBn4B,OAAOuW,QAAQ,kBAAmB,IAG7D,IAAMlJ,EAAUklB,KAAsBD,IAEtC,OAAIjlB,EACOA,EAAQe,OAAOyB,UAD1B,MAMFqP,EAAkB,cACpB,SAAC,GAA2C,OAAzC,EAAAtS,MAA+CkS,gBAClD,SAAAA,GAAgB,kBACZ,IAAMhb,EAAOgb,IAEb,OAAOhb,GAAQA,EAAKvC,UAItBmxB,EAAwB,aAC1BL,GACA,SAAAA,GAAsB,kBAClB,IAAMhlB,EAAUglB,IAEhB,OAAOhlB,GAAWA,EAAQ+qB,gBAI5BzF,EAAwB,cAC1B,SAAC,GAA8C,OAA5C,EAAA5hB,SAAqDymB,yBACxD,SAAAA,GAAyB,gBAACC,QAAA,IAAAA,OAAA,GACtB,IAAMjoB,EAAagoB,EAAsBC,GAEzC,QAAOjoB,GAAaA,EAAa,MAInCojB,EAAyB,aAC3BH,GACA,SAAAA,GAAoB,gBAAC1U,GACjB,SAAIA,IAAiBA,EAAcsa,QAI5B5F,MAAuB,MAAeA,MAAuB,SAIrE,uBAAW,SACd1hB,EACAnE,GAEA,MAAO,CACH4lB,aAAcA,EAAa,CAAEzhB,SAAQ,EAAEnE,MAAK,IAC5C6lB,iBAAkBA,EAAiB,CAAE1hB,SAAQ,EAAEnE,MAAK,IACpDsS,gBAAiBA,EAAgB,CAAEnO,SAAQ,EAAEnE,MAAK,IAClD8lB,sBAAuBA,EAAsB,CAAE3hB,SAAQ,EAAEnE,MAAK,IAC9D+lB,sBAAuBA,EAAsB,CAAE5hB,SAAQ,EAAEnE,MAAK,IAC9DgmB,uBAAwBA,EAAuB,CAAE7hB,SAAQ,EAAEnE,MAAK,SPxGlE0rB,GqBpCH,WACH,IAAMpG,EAAgB,cAClB,SAAChZ,GAA4B,OAAAA,EAAMhZ,OAAOq4B,cAC1C,SAAAn0B,GAAS,kBAAM,OAAAA,MAGb+tB,EAAa,cACf,SAACjZ,GAA4B,QAAEA,EAAMuJ,SAAS0P,cAC9C,SAAAnyB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHgZ,cAAeA,EAAchZ,GAC7BiZ,WAAYA,EAAWjZ,OrBoBGsf,GAC5BC,GsBtCH,WACH,IAAMvH,EAAiB,cACnB,SAAChY,GAA8B,OAAAA,EAAMhZ,OAAO4rB,eAC5C,SAAA1nB,GAAS,kBAAM,OAAAA,MAGb2nB,EAAa,cACf,SAAC7S,GAA8B,QAAEA,EAAMuJ,SAASsJ,cAChD,SAAA/rB,GAAU,kBAAM,OAAAA,MAGpB,OAAO,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACHgY,eAAgBA,EAAehY,GAC/B6S,WAAYA,EAAW7S,OtBsBKwf,GAC9BC,IQpCA9F,EAAW,cACb,SAAC3Z,GAA4B,OAAAA,EAAM0G,QACnC,SAAAgZ,GAAe,kBAAM,OAAAA,MAGnB9F,EAAe,cACjB,SAAC5Z,GAA4B,OAAAA,EAAMhZ,OAAO24B,aAC1C,SAAAz0B,GAAS,kBAAM,OAAAA,MAGb2uB,EAAY,cACd,SAAC7Z,GAA4B,QAAEA,EAAMuJ,SAASsQ,aAC9C,SAAA/yB,GAAU,kBAAM,OAAAA,MAGb,uBAAW,SACdkZ,GAEA,YAFA,IAAAA,MAAA,IAEO,CACH2Z,SAAUA,EAAS3Z,GACnB4Z,aAAcA,EAAa5Z,GAC3B6Z,UAAWA,EAAU7Z,QRiB7B,OAAO,SAACA,EAAOzV,QAAA,IAAAA,MAAA,IACX,IN5CiFkC,EM4C3EuG,EAAiB8mB,EAA6B9Z,EAAMhN,gBACpDgF,EAAOgiB,EAAmBha,EAAMhI,MAChC4nB,EAAiBzF,EAA6Bna,EAAM4f,gBACpDzf,EAASia,EAAqBpa,EAAMG,QACpCqV,EAAYoF,EAAsB5a,EAAMwV,WACxC/gB,EAAUsmB,EAAqB/a,EAAMvL,SACrC1B,EAAWqoB,EAAuBpb,EAAMjN,UACxC8sB,EAAqBxE,EAA+Brb,EAAM6f,oBAC1DC,EAAO/C,EAAmB/c,EAAMG,QAChC3H,EAAmBkjB,EAA8B1b,EAAMxH,kBACvDgN,EAAcyW,EAAyBjc,EAAMwF,aAC7CV,EAAiBkY,EAA4Bhd,EAAM8E,gBACnDib,EAAoB1C,EAA8Brd,EAAM+f,mBACxDC,EAAiBtC,EAA6B1d,EAAMggB,gBACpD/e,EAAkB0c,GAA8B3d,EAAMnX,cACtDo3B,EAAoBrC,GAA8B5d,EAAMigB,mBACxDC,EAAqBnC,GAA+B/d,EAAMkgB,oBAC1DC,EAAgBZ,GAA4Bvf,EAAMmgB,eAClD/sB,EAAcgsB,GAA0Bpf,EAAM5M,aAC9CssB,EAAcD,GAA0Bzf,EAAM0f,aAG9C72B,EAAes1B,GAA0Bne,EAAMnX,aAAcmP,GAC7DH,EAAWumB,GAAuBpe,EAAMnI,SAAU7E,EAAgBgF,EAAMnP,EAAc4L,EAAS1B,EAAUyF,GACzG9E,EAAQkrB,GAAoB5e,EAAMtM,MAAOV,EAAgByB,GAGzD2rB,EAAY,CACdptB,eAAc,EACdgF,KAAI,EACJH,SAAQ,EACR+nB,eAAc,EACdzf,OAAM,EACNtX,aAAY,EACZ2sB,UAAS,EACT/gB,QAAO,EACP1B,SAAQ,EACR8sB,mBAAkB,EAClBC,KAAI,EACJtnB,iBAAgB,EAChBgN,YAAW,EACX9R,MAAK,EACLS,QAjBY4qB,GAAsBlnB,EAAUnE,GAkB5CoR,eAAc,EACdib,kBAAiB,EACjBC,eAAc,EACd/e,gBAAe,EACfgf,kBAAiB,EACjBC,mBAAkB,EAClBR,YAAW,EACXS,cAAa,EACb/sB,YAAW,GAGf,OAAO7I,EAAQ81B,oBNlGkE5zB,EMkGzB2zB,ENjGrDp9B,OAAOsJ,KAAKG,GACdF,QAAO,SAACC,EAAQ3I,GAGb,OAFA2I,EAAO3I,GAAOixB,GAAkBroB,EAAI5I,IAE7B2I,IACR,KM4FkE4zB,GuBnG9D,SAASE,GACpBC,EACAh2B,QADA,IAAAg2B,MAAA,IAGA,ICPAC,ECDMC,EFQAC,GERAD,EAAU,IAAI,EAEY,CAC5B,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoB9tB,SAAQ,SAAA9N,GAC5B47B,EAAQvY,SAASrjB,GAAM,SAACkC,EAAUZ,GAAY,WAAI,EAAmBY,EAAUZ,SAGnFs6B,EAAQvY,SAAS,4BAA4B,SAAAnhB,GAAY,WAAI,IAA0BA,MACvF05B,EAAQvY,SAAS,4BAA4B,SAAAnhB,GAAY,WAAI,IAA0BA,MDtBvFy5B,ECwBOC,EDtBA,SAAAE,GAAW,sBAAKA,GAASxiB,KAAK,sBAA0B,SAAAJ,GAC3D,GAAIA,aAAkBzX,OAASyX,EAAOC,mBAAmB1X,MACrD,MAAMyX,EAGV,IAUY/Z,EAVG+Z,EAAOC,UAWO,iBAAXha,GAIf,CAAC,OAAQ,UAAW,SAAU,cAAc48B,OAAM,SAAA/8B,GACrD,OAAAG,EAAOG,eAAeN,MAhBU,CAC5B,IAAMsC,EAAU4X,EAAOC,QAAQpX,MAAQmX,EAAOC,QAAQpX,KAAKsO,OAE3D,MAAM,yCAAK6I,GAAM,CAAEC,QAASwiB,EAAoBjY,YAAYxK,EAAOC,QAAS7X,KAOxF,IAAoBnC,EAJZ,MAAM+Z,QDLJ8iB,EAAkCrI,KAGxC,OAAO,0BGIA,0BAAgB,CACnBxlB,eAAgBwW,EAChBxR,KAAMoT,EACNvT,SAAU8c,GACViL,eAAgB/T,EAChB1L,OAAQkM,EACRxjB,aAAckqB,GACdyC,UAAWpG,GACX3a,QAASgY,GACT1Z,SAAUoa,GACV0S,mBAAoBzS,GACpB5U,iBAAkBsU,GAClBtH,YAAaiM,GACb/d,MAAO8b,GACPrb,QAAS8b,GACTnL,eAAgBqL,GAChB4P,kBAAmBnP,GACnBoP,eAAgB3N,GAChB4N,kBAAmBhN,GACnBiN,mBAAoB7M,GACpBqM,YAAaxL,GACbiM,cAAezL,GACfthB,YAAakhB,KHxBbiM,EAAY,oBACVG,kBAAiB,EAAEI,iBALA,SAAC9gB,GAA8B,OAAA6gB,EAAgC7gB,KAK1CzV,I,uGIXlD,YACI,WAAYxD,GAAZ,MACI,YAAMA,EAAU,CAAEZ,QAASY,EAASH,KAAKuhB,SAAQ,K,OAEjD,EAAKtlB,KAAO,4BACZ,EAAKgC,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,C,MAAuD,GCDvD,aACI,WACYwF,GAAA,KAAAA,iBAmChB,OAhCI,YAAAqV,aAAA,SAAa3W,EAAY,G,IAAA,kBAAE,IAAAoZ,OAAUC,QAAA,YAAAA,QAAgB1W,EAAA,EAAAA,QAC3CI,EAAM,4BAA4B/C,EAClClC,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAelH,IAAI2I,EAAK,CAChCqW,OAAQ,CACJC,QAAS,YAAoB,IAA2BA,IAE5Dvb,QAAO,EACP6E,QAAO,IACRT,OAAM,SAAAC,GACL,GAAIA,EAAMpE,QAAU,KAAOoE,EAAMpE,OAAS,IACtC,MAAM,IAAI,EAA0BoE,GAGxC,MAAMA,MAId,YAAAoV,eAAA,SAAevX,EAAYnC,EAA2B,G,IAAA,kBAAE,IAAAub,OAAUC,QAAA,YAAAA,QAAgB1W,EAAA,EAAAA,QACxEI,EAAM,4BAA4B/C,EAClClC,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe4Z,IAAInY,EAAK,CAChCqW,OAAQ,CACJC,QAAS,YAAoB,IAA2BA,IAE5Dxb,KAAI,EACJC,QAAO,EACP6E,QAAO,KAGnB,EArCA,G,oCCTA,IAAYq1B,EAAZ,2CAAYA,GACR,mEACA,0EACA,wEAHJ,CAAYA,MAAgB,M,kCCQb,SAASC,EAA6BlsB,GACjD,MAAO,CACHb,KAAMa,EAAgBb,KACtBO,iBAAkBM,EAAgB4D,KAClCvD,iBAAkBL,EAAgBM,UAClCN,gBAAiB,CACbO,QAASP,EAAgBO,QACzBpB,KAAMa,EAAgBb,KACtBqB,aAAcR,EAAgBQ,eAb1C,mC,6BCHA,kCAaA,aAGI,WACI2rB,EACQC,GAAA,KAAAA,gBAERv1B,KAAKw1B,cAAiC,MAAjBF,EAAuB,IAAM,YAASA,GAAc1vB,OA8CjF,OAtCI,YAAAyS,KAAA,SACIod,EACA72B,GAFJ,WAII,GAAI6Z,SAAWzY,KAAKu1B,cAApB,CAIA,IAAKv1B,KAAKu1B,cACN,MAAM,IAAI56B,MAAM,4DAGpB,IAAMkG,EAASjC,GAAW,oBAAwB6Z,OAAQ,WACrDjG,KACG,kBAAO,SAAAijB,GACH,OAAAA,EAAM7vB,SAAW,EAAK4vB,eACtB,YAAcC,EAAM1a,KAAM0a,EAAM1a,KAAK7hB,QACkC,IAAvE,CAAC0F,EAAQ82B,YAAa92B,EAAQ+2B,WAAWlwB,QAAQgwB,EAAM1a,KAAK7hB,SAEhE,eAAI,SAAAu8B,GACA,GAAI72B,EAAQ+2B,YAAcF,EAAM1a,KAAK7hB,KACjC,MAAMu8B,EAAM1a,KAGhB,OAAO0a,EAAM1a,QAEjB,eAAK,IAER6a,YAIL,OAFA51B,KAAKu1B,cAAcM,YAAYJ,EAAOz1B,KAAKw1B,eAEpC30B,IAGX,YAAAi1B,UAAA,SAAUrd,GACNzY,KAAKu1B,cAAgB9c,GAE7B,EArDA,G,uECPA,aAKI,WACIsd,GAEA/1B,KAAKg2B,cAAgB,YAASD,GAAcnwB,OAC5C5F,KAAKi2B,cAAe,EACpBj2B,KAAKk2B,WAAa,GAqE1B,OAlEI,YAAAC,OAAA,WACQn2B,KAAKi2B,eAITj2B,KAAKi2B,cAAe,EAEpBxd,OAAO2d,iBAAiB,UAAWp2B,KAAKq2B,kBAG5C,YAAAC,WAAA,WACSt2B,KAAKi2B,eAIVj2B,KAAKi2B,cAAe,EAEpBxd,OAAO8d,oBAAoB,UAAWv2B,KAAKq2B,kBAG/C,YAAAG,YAAA,SAA2Ct9B,EAAau9B,GACpD,IAAIC,EAAY12B,KAAKk2B,WAAWh9B,GAE3Bw9B,IACD12B,KAAKk2B,WAAWh9B,GAAQw9B,EAAY,KAGH,IAAjCA,EAAUjxB,QAAQgxB,IAClBC,EAAUjqB,KAAKgqB,IAIvB,YAAAE,eAAA,SAA8Cz9B,EAAau9B,GACvD,IAAMC,EAAY12B,KAAKk2B,WAAWh9B,GAElC,GAAKw9B,EAAL,CAIA,IAAMl0B,EAAQk0B,EAAUjxB,QAAQgxB,GAE5Bj0B,GAAS,GACTk0B,EAAUE,OAAOp0B,EAAO,KAIhC,YAAAq0B,QAAA,SAAuCpB,GACnC,IAAMiB,EAAY12B,KAAKk2B,WAAWT,EAAMv8B,MAEnCw9B,GAILA,EAAU1vB,SAAQ,SAAAyvB,GAAY,OAAAA,EAAShB,OAInC,YAAAY,eAAR,SAAuBZ,GACdA,EAAM7vB,SAAW5F,KAAKg2B,eACtB,YAAcP,EAAM1a,KAAoC0a,EAAM1a,KAAK7hB,OAKxE8G,KAAK62B,QAAQpB,EAAM1a,OAPvB,sBADC,K,mCAUL,EA/EA,GAAqB,O,iJCIN,SAAS+b,EAAiDjwB,GACrE,IAAMC,EAAe,YAAG,a,+CAAsB,OAAR,yBAAQ,EAAzB,CAAiBD,GAiBtC,OAfAxP,OAAO0P,oBAAoBF,EAAOtO,WAC7ByO,SAAQ,SAAA9O,GACL,IAAMuO,EAAapP,OAAO4P,yBAAyBJ,EAAOtO,UAAWL,GAEhEuO,GAAsB,gBAARvO,GAInBb,OAAOC,eACHwP,EAAgBvO,UAChBL,EAQhB,SAAmD2O,EAAgB3O,EAAauO,GAC5E,GAAgC,mBAArBA,EAAW7O,MAClB,OAAO6O,EAGX,IAAIswB,EAAW,IAAI,IACfrwB,EAASD,EAAW7O,MACpBo/B,EAAiB,kBAAQtwB,GAE7B,OAAO,YAAcG,EAAQ3O,EAAK,CAC9BV,IAAA,sBACUI,EAAQ,W,IAAE,sDACZ,IAAMq/B,EAAcD,EAAelgC,KAAI,MAAnBkgC,EAAc,0BAAM,GAAS7wB,IAEjD,GAAuC,IAAnC4wB,EAASG,aAAY,MAArBH,EAAyB5wB,GACzB,OAAO8wB,EAGX,IAAMxZ,EAAW/W,EAAO5P,KAAI,MAAX4P,EAAM,0BAAM,GAASP,IAEtC,OAAI,YAAQsX,EAAUwZ,EAAa,CAAEh0B,UAAW,SAAA/K,GAAO,OAAC,YAAUA,MACvD++B,GAGXD,EAAeG,MAAMvwB,IAAImwB,EAASK,OAAM,MAAfL,EAAmB5wB,GAAOsX,GAE5CA,IAKX,OAFApmB,OAAOC,eAAe0I,KAAM9H,EAAK,yCAAKuO,GAAU,CAAE7O,MAAK,KAEhDA,GAEXgP,IAAG,SAAChP,GACAm/B,EAAW,IAAI,IACfrwB,EAAS9O,EACTo/B,EAAiB,kBAAQtwB,MA3CrB2wB,CAAwBxwB,EAAOtO,UAAWL,EAAKuO,OAIpDK,ECrBX,IAAqB,EAArB,WAMI,WAAY2tB,GACRz0B,KAAKs3B,gBAAkB7C,EAAUR,eAUzC,OAPI,YAAAsD,yBAAA,SAAyB73B,GACrB,OAAOM,KAAKs3B,gBAAgBrK,mBAAmBvtB,IAGnD,YAAA83B,2BAAA,SAA2B93B,GACvB,OAAOM,KAAKs3B,gBAAgBpK,qBAAqBxtB,IAfpC+3B,EAA2B,sBAD/C,GACoBA,GAArB,GCAqB,EAArB,WAMI,WAAYhD,GACRz0B,KAAKs3B,gBAAkB7C,EAAUR,eAUzC,OAPI,YAAAyD,qBAAA,SAAqBh4B,GACjB,OAAOM,KAAKs3B,gBAAgBlU,eAAe1jB,IAG/C,YAAAi4B,uBAAA,SAAuBj4B,GACnB,OAAOM,KAAKs3B,gBAAgBjU,iBAAiB3jB,IAfhCk4B,EAA4B,sBADhD,GACoBA,GAArB,GCDe,SAASC,EAA8BpD,GAIlD,MAAO,CACHp5B,OAJW,IAAI,EAA4Bo5B,GAK3C7W,SAJa,IAAI,EAA6B6W,ICEtD,ICVKqD,EDUgB,EAArB,WAMI,WACYC,EACAC,GAFZ,WACY,KAAAD,SACA,KAAAC,+BAERh4B,KAAKi4B,OAASJ,EAA8B73B,KAAK+3B,OAAOzjB,YAExDtU,KAAK+3B,OAAOG,WAAU,SAAA7jB,GAClB,EAAK4jB,OAASJ,EAA8BxjB,MAqHxD,OAlGI,YAAAC,SAAA,WACI,OAAOtU,KAAKi4B,QAiChB,YAAAC,UAAA,SACIC,G,UADJ,OAEI,oDAEA,OAAO,EAAAn4B,KAAK+3B,QAAOG,UAAS,kCACxB,WAAM,OAAAC,EAAW,EAAK7jB,aACtB,SAAAD,GAAS,OAAAA,EAAM4f,eAAe3f,aAC3B8jB,EAAQt3B,KAAI,SAAAkC,GAAU,gBAACqR,GAAqC,OAAArR,EAAO60B,EAA8BxjB,WAsB5G,YAAAgkB,iBAAA,SAAiBz5B,GAAjB,IEzGgCxB,EFyGhC,OACUk7B,GE1GsBl7B,EF0GKwB,EAAQwhB,YEzGtC,kBAAkBjb,KAAK/H,GF0GtB,CAACwB,EAAQwhB,aGvGN,SAA4BmY,EAAkBC,GACzD,IAAMC,EAAapzB,SAASqzB,iBAAiBH,GAE7C,IAAKE,EAAWn7B,OACZ,MAAM,IAAI,IAAqB,2DAA2Di7B,GAG9F,OAAOj2B,MAAM/J,UAAUuY,MAAMha,KAAK2hC,GAC7B33B,KAAI,SAAC63B,GAKF,OAJKA,EAAUv7B,KACXu7B,EAAUv7B,GAAK,mBAASo7B,IAGrBG,EAAUv7B,MH2FjBw7B,CAAmBh6B,EAAQwhB,YAAgBxhB,EAAQc,SAAQ,eAE/D,OAAO2P,QAAQC,IACXgpB,EAAax3B,KAAI,SAAAsf,GACb,IAAMhO,EAAS,EAAK4lB,6BAA6BppB,WAAW,yCAAKhQ,GAAO,CAAEwhB,YAAW,KAC/EyY,EAAU,0BAA0Bj6B,EAAQc,SAAQ,IAAI0gB,EAE9D,OAAO,EAAK2X,OAAOe,SAAS1mB,EAAQ,CAAEymB,QAAO,QAGhD75B,MAAK,WAAM,SAAKsV,eAezB,YAAAykB,mBAAA,SAAmBn6B,GAAnB,WACUwT,EAASpS,KAAKg4B,6BAA6BgB,aAAap6B,GACxDi6B,EAAU,0BAA0Bj6B,EAAQc,SAElD,OAAOM,KAAK+3B,OAAOe,SAAS1mB,EAAQ,CAAEymB,QAAO,IACxC75B,MAAK,WAAM,SAAKsV,eAhIR2kB,EAAyB,sBAD7C,KACoBA,GAArB,G,wCIGA,WACI,WACYC,EACAC,GADA,KAAAD,YACA,KAAAC,8BAuChB,OApCI,YAAAvqB,WAAA,SAAWhQ,GAAX,WACI,OAAO,SAAA6T,GACH,IAAMxT,EAAO,CAAES,SAAUd,EAAQc,SAAU0gB,YAAaxhB,EAAQwhB,aAEhE,OAAI3N,EAAM6B,WAAW2f,eAAetS,cAAc/iB,EAAQc,SAAUd,EAAQwhB,aACjE,kBAGJ,iBACH,aAAG,uBAAa,IAAyBE,+BAA2B1gB,EAAWX,IAC/E,EAAKk6B,4BAA4B15B,kBAAkBb,EAAQc,SAAU,CAAEK,QAASnB,EAAQmB,QAAS6S,UAAU,IAC3G,iBAAM,WAAM,SAAKsmB,UAAU1hC,IAAIoH,EAAQc,UAAUkP,WAAWhQ,GACvDI,MAAK,WAAM,8BAAa,IAAyBmhB,+BAA2BvgB,EAAWX,UAC9FuT,KACE,sBAAW,SAAAjT,GAAS,mBAAiB,IAAyBghB,uBAAwBhhB,EAAON,SAKzG,YAAA+5B,aAAA,SAAap6B,GAAb,WACI,OAAO,SAAA6T,GACH,IAAMxT,EAAO,CAAES,SAAUd,EAAQc,UAEjC,OAAK+S,EAAM6B,WAAW2f,eAAetS,cAAc/iB,EAAQc,UAIpD,iBACH,aAAG,uBAAa,IAAyB8gB,iCAA6B5gB,EAAWX,IACjF,iBAAM,WAAM,SAAKi6B,UAAU1hC,IAAIoH,EAAQc,UAAUs5B,eAC5Ch6B,MAAK,WAAM,8BAAa,IAAyBqhB,iCAA6BzgB,EAAWX,UAChGuT,KACE,sBAAW,SAAAjT,GAAS,mBAAiB,IAAyBkhB,yBAA0BlhB,EAAON,OARxF,oBAYvB,EA1CA,G,uJCLA,WAGI,WACYuO,GAAA,KAAAA,gBAERxN,KAAKyN,QAAUgL,OA2BvB,OAxBU,YAAA2gB,mBAAN,SAAyBx6B,G,4IACrB,IAAKA,IAAYA,EAAQy6B,SACrB,MAAM,IAAI,IAcd,OAXQC,EAAmB16B,EAAO,eAC5B26B,EAAiBD,EACjB,yCAAK16B,GAAO,CAAE06B,eAAgBA,EAAeh5B,KAAK,OAClD1B,EAEA4X,EAAUnf,OAAOsJ,KAAK44B,GACvBz4B,KAAI,SAAA5I,GAAO,OAAG,oBAAUA,GAAI,IAAI0G,EAAQ1G,MACxCoI,KAAK,KAEJk5B,EAAY,iCAAiChjB,EAEnD,GAAMxW,KAAKwN,cAAcG,WAAW6rB,EAAW,CAAEC,OAAO,EAAM33B,WAAY,M,OAE1E,GAFA,UAEK9B,KAAKyN,QAAQU,OACd,MAAM,IAAI,IAGd,MAAO,CAAP,EAAOnO,KAAKyN,QAAQU,gBAE5B,EAjCA,G,UJRA,SAAK2pB,GACD,4BACA,qCACA,kDACA,uCACA,iDACA,2CACA,qCACA,0BACA,gCAIA,kCAbJ,CAAKA,MAAwB,KAgBd,IKCH4B,EAWAC,EAQAC,EAWAC,EL/BG,I,mBMVf,WAGI,WACY9B,EACA+B,EACAC,GAFA,KAAAhC,SACA,KAAA+B,yBACA,KAAAC,+BAoFhB,OAjFU,YAAAnrB,WAAN,SAAiBhQ,G,wIAGb,GAFQwhB,EAA0BxhB,EAAO,YAApBc,EAAad,EAAO,UAEpCwhB,IAAgB1gB,EACjB,MAAM,IAAI,IAAqB,qEAGnC,SAAMM,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,wB,OACvD,OADA,SACA,GAAMpU,KAAK+5B,6BAA6BnrB,WAAWlP,I,cAAnD,SAEAM,KAAKg6B,cAAgBh6B,KAAKi6B,oBAAoB7Z,EAAa1gB,G,YAG/D,YAAAs5B,aAAA,WAMI,OALIh5B,KAAKg6B,eAAiBh6B,KAAKg6B,cAAcE,aACzCl6B,KAAKg6B,cAAcE,WAAWC,YAAYn6B,KAAKg6B,eAC/Ch6B,KAAKg6B,mBAAgBp6B,GAGlByP,QAAQY,WAGX,YAAAgqB,oBAAR,SAA4B7Z,EAAqB1gB,GAC7C,IAAMi5B,EAAYtzB,SAAS+0B,eAAeha,GAE1C,IAAKuY,EACD,MAAM,IAAI,IAAqB,+DAGnC,IAAMtkB,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,GACtD2M,EAAOgI,EAAMhI,KAAKmJ,UAClBhB,EAASH,EAAMG,OAAOkF,iBAE5B,IAAKlF,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAK2f,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAIhD,QAAA2a,OACI6lB,EAAA,EAAAA,WACAC,EAAA,EAAAA,SAEJ,IAAAlf,mBACImf,EAAA,EAAAA,iBACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,sBACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,+BAIR,IAAKN,EACD,MAAM,IAAI,IAGd,IAAMO,EAAsB,CACxBP,WAAU,EACVQ,UAAWP,EACXC,iBAAgB,EAChBC,eAAc,EACdE,OAAM,EACNI,YAAazuB,GAAgD,IAAxCA,EAAKhE,UAAUgD,cAAc/N,OAC9C,IAAsBy9B,QACtB,IAAsBC,WAC1BC,sBAAuB,CACnBv0B,OAAQ+zB,EACRt6B,IAAQqU,EAAOoG,aAAasgB,SAAQ,oBAAoBx7B,EAAQ,mBAChEi7B,+BAA8B,GAElCQ,UAAW,IAAqBC,MAKpC,OAFAp7B,KAAK+5B,6BAA6BsB,aAAa,IAAIjb,EAAewa,GAE3DjC,GAEf,EA1FA,G,aCMA,WAII,WACYZ,EACA+B,EACAwB,EACAC,EACAC,EACAC,QAAA,IAAAA,OAAA,GALA,KAAA1D,SACA,KAAA+B,yBACA,KAAAwB,uBACA,KAAAC,sBACA,KAAAC,cACA,KAAAC,eA0MhB,OAvMI,YAAA7sB,WAAA,SAAWhQ,GAAX,WACU88B,GAAiB17B,KAAKy7B,aAAe78B,EAAQ+8B,sBAAwB/8B,EAAQmsB,kBAAoB,GACjG1W,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgBlZ,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiBxa,EAAQc,UAE1F,IAAKwZ,IAAkBA,EAAcrK,YACjC,MAAM,IAAI,IAAiB,IAAqBhV,sBAKpD,OAFAmG,KAAKs7B,qBAAqB1sB,WAAWsK,EAAcrK,aAE5CQ,QAAQC,IAAI,CACftP,KAAKs7B,qBAAqB/rB,oBAC1BvP,KAAKu7B,oBAAoBrtB,eAExBlP,MAAK,SAAC,G,IAACqP,EAAA,KAAgBF,EAAA,KACpB,EAAKqB,gBAAkBnB,EAEvB,IAAMwtB,EAAiB,GACjBC,EAAoB,GAQ1B,OANIJ,EAAcK,YACdF,EAAepvB,KAAK0B,EAAO6tB,QAAQC,QAEnCH,EAAkBrvB,KAAK0B,EAAO6tB,QAAQC,QAGnC9tB,EAAO+tB,OAAOC,OAAO,CACxBC,IAAKljB,EAAc1E,OAAO8lB,SAAW,UAAY,aACjD+B,SAAQX,EAAcY,qBACtBC,QAAS,CACLC,QAASX,EACTY,WAAYX,GAEhBY,MAAO,oBACHC,MAAO,OACPtS,MAAO,EAAKoR,aAAe,cAAW77B,GACnC,eAAK87B,EAAcgB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFl0B,QAAS,WAAM,SAAKo0B,cAAclB,EAAcpmB,gBAAiBomB,EAAcmB,iBAC/EC,YAAa,SAAA/hB,GAAQ,SAAKgiB,iBAAiBhiB,EAAM2gB,EAAcY,qBAAsBZ,EAAcsB,oBACpGp+B,EAAQwhB,iBAIvB,YAAA4Y,aAAA,WAMI,OALAh5B,KAAKwP,qBAAkB5P,EACvBI,KAAK47B,oBAAiBh8B,EAEtBI,KAAKs7B,qBAAqBtrB,WAEnBX,QAAQY,WAGX,YAAA2sB,cAAR,SACI3/B,EACAggC,GAFJ,WAII,OAAOj9B,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,uBACnDpV,MAAK,SAAAqV,GACF,IAAMnI,EAAWmI,EAAMnI,SAAS0I,cAC1BJ,EAASH,EAAMG,OAAOkF,iBACtBtS,EAAWiN,EAAMjN,SAAS4R,cAC1B1D,OAA8B1V,IAAZ3C,EACpBmK,GAAYA,EAASE,WAAaF,EAASE,UAAU,GACrDrK,EAEJ,IAAK,EAAKuS,gBACN,MAAM,IAAI,KAAoB,KAAwB0tB,8BAG1D,IAAKhxB,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAKkb,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,OAAO,EAAKiW,gBAAgB2tB,cAAc,CACtCC,KAAM,WACNC,uBAAuB,EACvBC,yBAAyB,EACzBC,wBAAyBjoB,EAAkB,EAAKkoB,uBAAuBloB,QAAmB1V,EAC1FsB,OAAQgL,EAAS4mB,mBACjB3qB,SAAUqM,EAAOrM,SAASG,KAC1Bm1B,YAAa,EAAKhC,kBAGzBn8B,OAAM,SAAAC,GAKH,MAJI09B,GACAA,EAAQ19B,GAGNA,MAIV,YAAAw9B,iBAAR,SACIhiB,EACAuhB,EACAW,GAHJ,WAKI,IAAKj9B,KAAKwP,kBAAoBxP,KAAK47B,eAC/B,MAAM,IAAI,KAAoB,KAAwBsB,8BAG1D,IAAMx9B,EAAWM,KAAK47B,eAAex+B,GAErC,OAAOiS,QAAQC,IAAI,CACftP,KAAKwP,gBAAgBkuB,gBAAgB3iB,GACrC/a,KAAKs7B,qBAAqB3rB,iBAAiB,CAAExB,QAAQ,MAEpDnP,MAAK,SAAC,G,IAACqT,EAAA,KAAWtC,EAAA,KAAAA,WAWf,OAVA,EAAKyrB,YAAYmC,SAAS,gBAAiB,CACvCC,aAAc,SACd9S,SAAUprB,EACV0S,OAAQkqB,EAAuB,kBAAoB,wBACnD9I,MAAOnhB,EAAQmhB,MACfqK,YAAa9tB,EACb+tB,iBAAkBC,KAAKC,UAAU,EAAKC,4BAA4B5rB,IAClE6rB,gBAAiBH,KAAKC,UAAU,EAAKG,2BAA2B9rB,MAG7DA,KAEV/S,OAAM,SAAAC,GAKH,MAJI09B,GACAA,EAAQ19B,GAGNA,MAIV,YAAA0+B,4BAAR,SAAoC5rB,GAChC,IAAMiD,EAAkBjD,EAAQ+rB,QAAQ9oB,gBAElC,GADgBA,GAAmBA,EAAgB+oB,eAAiB,IACpE,WAAC9gC,EAAA,KAAWC,EAAA,KAElB,MAAO,CACHkK,MAAO2K,EAAQ+rB,QAAQ12B,MACvB42B,WAAY/gC,EACZghC,UAAW/gC,EACXghC,aAAcnsB,EAAQ+rB,QAAQ7/B,MAC9BkgC,eAAgBnpB,GAAmBA,EAAgBopB,MACnDC,eAAgBrpB,GAAmBA,EAAgBspB,MACnD9gC,KAAMwX,GAAmBA,EAAgBxX,KACzCuW,MAAOiB,GAAmBA,EAAgBjB,MAC1CwqB,aAAcvpB,GAAmBA,EAAgBhX,YACjDwgC,YAAaxpB,GAAmBA,EAAgBlX,aAIhD,YAAA+/B,2BAAR,SAAmC9rB,GAC/B,IAAMhL,EAAiBgL,EAAQ+rB,QAAQ/2B,eACjCiO,EAAkBjD,EAAQ+rB,QAAQ9oB,gBAExC,OAAIjO,EACO,CACHK,MAAO2K,EAAQ+rB,QAAQ12B,MACvB42B,WAAYjsB,EAAQ+rB,QAAQ7gC,UAC5BghC,UAAWlsB,EAAQ+rB,QAAQ5gC,SAC3BghC,aAAcnsB,EAAQ+rB,QAAQ7/B,MAC9BkgC,eAAgBp3B,EAAeq3B,MAC/BC,eAAgBt3B,EAAeu3B,MAC/B9gC,KAAMuJ,EAAevJ,KACrBuW,MAAOhN,EAAegN,MACtBwqB,aAAcx3B,EAAe/I,YAC7BwgC,YAAaz3B,EAAejJ,YAI7B,CACHsJ,MAAO2K,EAAQ+rB,QAAQ12B,MACvB42B,WAAYjsB,EAAQ+rB,QAAQ7gC,UAC5BghC,UAAWlsB,EAAQ+rB,QAAQ5gC,SAC3BghC,aAAcnsB,EAAQ+rB,QAAQ7/B,MAC9BkgC,eAAgBnpB,GAAmBA,EAAgBopB,MACnDC,eAAgBrpB,GAAmBA,EAAgBspB,MACnD9gC,KAAMwX,GAAmBA,EAAgBxX,KACzCuW,MAAOiB,GAAmBA,EAAgBjB,MAC1CwqB,aAAcvpB,GAAmBA,EAAgBhX,YACjDwgC,YAAaxpB,GAAmBA,EAAgBlX,aAIhD,YAAAo/B,uBAAR,SAA+BvgC,GAC3B,MAAO,CACHyhC,MAAOzhC,EAAQU,SACfihC,MAAO3hC,EAAQY,SACfC,KAAMb,EAAQa,KACduW,MAAOpX,EAAQiB,oBACfE,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACf8/B,cAAkBphC,EAAQM,UAAS,IAAIN,EAAQO,WAG3D,EApNA,GCHqB,GAArB,WAII,WACYu6B,EACAyD,EACA1B,EACAiF,GAHA,KAAAhH,SACA,KAAAyD,cACA,KAAA1B,yBACA,KAAAiF,6BA4EhB,OAzEI,YAAAnwB,WAAA,SAAWhQ,GAAX,WACYwhB,EAAA,EAAAA,YAAa1gB,EAAA,EAAAA,SAErB,IAAK0gB,IAAgB1gB,EACjB,MAAM,IAAI,IAAqB,qEAKnC,OAFAM,KAAKg/B,UAAYt/B,EAEVM,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,uBACnDpV,MAAK,WAAM,SAAK+/B,2BAA2BnwB,WAAW,EAAKqwB,mBAC3DjgC,MAAK,WACF,EAAKg7B,cAAgB,EAAKC,oBAAoB7Z,OAI1D,YAAA4Y,aAAA,WAMI,OALIh5B,KAAKg6B,eAAiBh6B,KAAKg6B,cAAcE,aACzCl6B,KAAKg6B,cAAcE,WAAWC,YAAYn6B,KAAKg6B,eAC/Ch6B,KAAKg6B,mBAAgBp6B,GAGlBI,KAAK++B,2BAA2B/F,gBAGnC,YAAAiB,oBAAR,SAA4B7Z,GACxB,IAAMuY,EAAYtzB,SAAS+0B,eAAeha,GAE1C,IAAKuY,EACD,MAAM,IAAI,IAAqB,+DAGnC,IAAMuG,EAAkBl/B,KAAK++B,2BAA2B1D,aAAar7B,KAAKm/B,0BAI1E,OAFAxG,EAAUyG,YAAYF,GAEfA,GAGH,YAAAD,aAAR,WACI,IAAKj/B,KAAKg/B,UACN,MAAM,IAAI,KAAoB,KAAwBhwB,uBAG1D,OAAOhP,KAAKg/B,WAIF,YAAAG,yBAAd,SAAuC1J,G,wIACnCA,EAAM4J,iB,iBAGkB,O,sBAAA,GAAMr/B,KAAK++B,2BAA2BO,iB,OAC1D,OADMllB,EAAc,SACpB,GAAMpa,KAAK++B,2BAA2BQ,cAAcnlB,I,cAApD,SACIA,EAAY9E,gBACZ,GAAMtV,KAAK++B,2BAA2BS,sBAAsBplB,EAAY9E,kBADxE,M,OACA,S,iBAEJ,SAAMtV,KAAKy/B,4B,cAAX,S,aAEA,I,aAA+B,aAAlB,EAAMjlC,QACf,MAAM,E,qCAKV,YAAAilC,yBAAR,WACIz/B,KAAKw7B,YAAYmC,SAAS,gBAAiB,CACvCziC,QAAS,CACL+E,OAAQ,YACR,eAAgB,wCArB5B,sBADC,K,6CA0BL,EApFA,G,UCFqB,GAArB,WAKI,WACY83B,EACA+B,EACA4F,GAFA,KAAA3H,SACA,KAAA+B,yBACA,KAAA4F,0BAwFhB,OArFI,YAAA9wB,WAAA,SAAWhQ,GAAX,WACYwhB,EAAA,EAAAA,YAAa1gB,EAAA,EAAAA,SAErB,IAAK0gB,IAAgB1gB,EACjB,MAAM,IAAI,IAAqB,qEAKnC,OAFAM,KAAKg/B,UAAYt/B,EAEVM,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,uBACnDpV,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,GAE5D,IAAKwZ,IAAkBA,EAAckC,mBAAmB1G,WACpD,MAAM,IAAI,IAAiB,IAAqB7a,sBAGpD,OAAO,EAAK6lC,wBAAwBC,KAAKzmB,EAAc1E,OAAO8lB,aAEjEt7B,MAAK,SAAA4gC,GACF,EAAKC,kBAAoBD,EACzB,EAAKE,cAAgB,EAAK7F,oBAAoB7Z,OAI1D,YAAA4Y,aAAA,WAOI,OANIh5B,KAAK8/B,eAAiB9/B,KAAK8/B,cAAc5F,aACzCl6B,KAAK8/B,cAAcvJ,oBAAoB,QAASv2B,KAAKm/B,0BACrDn/B,KAAK8/B,cAAc5F,WAAWC,YAAYn6B,KAAK8/B,eAC/C9/B,KAAK8/B,mBAAgBlgC,GAGlByP,QAAQY,WAGX,YAAAgqB,oBAAR,SAA4B7Z,GACxB,IAAM2f,EAAkB16B,SAAS+0B,eAAeha,GAEhD,IAAK2f,EACD,MAAM,IAAIplC,MAAM,wCAGpB,IAAMqlC,EAAS36B,SAASC,cAAc,SAQtC,OANA06B,EAAO9mC,KAAO,QACd8mC,EAAOC,IAAM,4EACbF,EAAgBX,YAAYY,GAE5BA,EAAO5J,iBAAiB,QAASp2B,KAAKm/B,0BAE/Ba,GAGH,YAAAE,yBAAR,WACI,IAAM7rB,EAAQrU,KAAK+3B,OAAOzjB,WACpBpI,EAAWmI,EAAMnI,SAAS0I,cAC1BsE,EAAgBlZ,KAAKg/B,UAAY3qB,EAAM8E,eAAeC,iBAAiBpZ,KAAKg/B,WAAa,KAE/F,IAAK9yB,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAK4f,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,MAAO,CACH6a,WAAYwE,EAAckC,mBAAmB1G,WAC7CyrB,iBAAkBjnB,EAAckC,mBAAmB+kB,iBACnDj/B,OAAQgL,EAASG,KAAK+zB,WAAWt9B,WACjCqF,SAAU+D,EAASG,KAAKlE,SAASG,KACjC+3B,OAAQn0B,EAASG,KAAKjP,GACtBkjC,yBAAyB,EACzBr3B,YAAa,aAAe,UAK5B,YAAAk2B,yBAAR,WACI,IAAKn/B,KAAK6/B,kBACN,MAAM,IAAI,KAAoB,KAAwB3C,8BAG1Dl9B,KAAK6/B,kBAAkB3zB,SAASlM,KAAKkgC,6BALzC,sBADC,K,6CAQL,EAhGA,G,YCIA,WAGI,WACYnI,EACA+B,EACAyB,EACAC,EACA+E,QAAA,IAAAA,MAAA,IAJA,KAAAxI,SACA,KAAA+B,yBACA,KAAAyB,sBACA,KAAAC,cACA,KAAA+E,QAoHhB,OAjHI,YAAA3xB,WAAA,SAAWhQ,GAAX,WACU88B,EAAgB98B,EAAQuP,OACxBkG,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgBlZ,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiBxa,EAAQc,UAE1F,IAAKg8B,EACD,MAAM,IAAI,IAGd,IAAKxiB,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,OAAOmG,KAAKu7B,oBAAoBrtB,WAAWgL,EAAc1E,OAAO6lB,YAC3Dr7B,MAAK,SAAAmP,G,MACF,IAAK+K,IAAkBA,EAAc1E,OAAO6lB,WACxC,MAAM,IAAI,IAAiB,IAAqBxgC,sBAGpD,IAAMwgC,EAAanhB,EAAc1E,OAAO6lB,WAClC+B,EAAMljB,EAAc1E,OAAO8lB,SAAW,UAAY,aAClDzrB,IAAW,MAAyButB,GAAMV,EAAcrC,SAAQ,GAEhEwC,EAAiB,GACjBC,EAAoB,GAQ1B,OANIJ,EAAcK,YACdF,EAAepvB,KAAK0B,EAAO6tB,QAAQC,QAEnCH,EAAkBrvB,KAAK0B,EAAO6tB,QAAQC,QAGnC9tB,EAAO+tB,OAAOC,OAAO,CACxBC,IAAG,EACHvuB,OAAQgB,EACRwtB,OAAQX,EAAcY,qBACtBC,QAAS,CACLC,QAASX,EACTY,WAAYX,GAEhBY,MAAO,oBACHC,MAAO,QACJ,eAAKjB,EAAcgB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFl0B,QAAS,SAAChC,EAAGg6B,GAAY,SAAK5D,cAAcvC,EAAYmG,EAAS9E,EAAcmB,iBAC/EC,YAAa,SAAC/hB,EAAMylB,GAAY,SAAKzD,iBAAiBhiB,EAAMylB,EAAS9E,EAAcY,qBAAsBZ,EAAcsB,oBACxHp+B,EAAQwhB,iBAIvB,YAAA4Y,aAAA,WAGI,OAFAh5B,KAAK47B,oBAAiBh8B,EAEfyP,QAAQY,WAGX,YAAA2sB,cAAR,SAAsBvC,EAAoBmG,EAAyBvD,GAAnE,WACI,IAAKuD,EACD,MAAM,IAAI,KAAoB,KAAwBtD,8BAG1D,OAAOl9B,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,uBACnDpV,MAAK,SAAAqV,GACF,IAAMhI,EAAOgI,EAAMhI,KAAKmJ,UAClB6qB,EAASh0B,EAAOA,EAAKjP,GAAK,GAEhC,OAAOojC,EAAQroB,QAAQE,KAAQ,EAAKkoB,MAAK,wCAAyC,CAAElG,WAAU,EAAEgG,OAAM,GAAI,CACtGnlC,QAAS,CACL,iBAAkB,WAI7B8D,MAAK,SAAAyhC,GAAO,OAAAA,EAAIrjC,MAChBkC,OAAM,SAAAC,GAKH,MAJI09B,GACAA,EAAQ19B,GAGNA,MAIV,YAAAw9B,iBAAR,SACIhiB,EACAylB,EACAlE,EACAoE,GAJJ,WAMI,IAAK1gC,KAAK47B,eACN,MAAM,IAAI,KAAoB,KAAwBsB,8BAG1D,IAAKsD,EACD,MAAM,IAAI,KAAoB,KAAwBtD,8BAG1D,IAAKniB,EAAK4lB,YAAc5lB,EAAK6lB,QACzB,MAAM,IAAI,IAAiB,IAAqBjnC,gBAGpD,IAAM+F,EAAWM,KAAK47B,eAAex+B,GAErC,OAAOojC,EAAQh4B,QAAQhR,IAAIujB,EAAK4lB,WAAW3hC,MAAK,SAAAqT,GAC5C,EAAKmpB,YAAYmC,SAAS,gBAAiB,CACvCC,aAAc,SACd9S,SAAUprB,EACV0S,OAAQkqB,EAAuB,kBAAoB,wBACnDuE,UAAW9lB,EAAK4lB,UAChBG,QAAS/lB,EAAK6lB,QACdG,UAAWhD,KAAKC,UAAU3rB,EAAQ2uB,MAAMC,kBAIxD,EA5HA,ILMA,SAAYvH,GACR,kBACA,sBACA,kBACA,YACA,4BALJ,CAAYA,MAAgB,KAW5B,SAAYC,GACR,sBACA,0BAFJ,CAAYA,MAAiB,KAQ7B,SAAYC,GACR,cACA,cACA,kBACA,gBACA,gBALJ,CAAYA,MAAgB,KAW5B,SAAYC,GACR,cACA,cAFJ,CAAYA,MAAgB,KMtC5B,I,GAAA,WAGI,WACY9B,EACA+B,EACAyB,EACAC,EACA0F,GAJA,KAAAnJ,SACA,KAAA+B,yBACA,KAAAyB,sBACA,KAAAC,cACA,KAAA0F,+BAuHhB,OApHU,YAAAtyB,WAAN,SAAiBhQ,G,2JAQb,GAPIyV,EAAQrU,KAAK+3B,OAAOzjB,WAClB,EAGFD,EAAM8E,eAAeoY,wBAAwB3yB,EAAQc,UAFjD0J,EAAU,KACdgS,EAAkB,qBAEtBpb,KAAKoJ,WAAaA,GAEbgS,EAAmBie,SACpB,MAAM,IAAI,IAGN,SAAMr5B,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB1lB,wB,OAehD,OAffC,EAAQ,SACFhI,EAAOgI,EAAMhI,KAAKiiB,iBAClBoN,EAAgB98B,EAAQuiC,eAExBC,EAA+B,CACjCC,QAAS,SAAAtmB,GAAQ,SAAKumB,2BAA2Bl4B,EAAY2R,IAC7DwmB,YAAa,WAAM,SAAK3E,cAAcvwB,EAAKjP,KAC3CokC,UAAW,SAAAzmB,GAAQ,SAAKgiB,iBAAiBhiB,KAGzC2gB,GAAiBA,EAAcgB,QAC/B0E,EAAa1E,MAAQ18B,KAAKyhC,qBAAqB/F,EAAcgB,QAG3DgF,EAAe1hC,KAAK2hC,iBAAiBvmB,EAAoB/O,GAChD,GAAMrM,KAAKu7B,oBAAoBnC,mBAAmBsI,I,OAEjE,MAAO,CAAP,EAFe,SAEDE,QAAQR,GAAcjF,OAAO,IAAIv9B,EAAQwhB,sBAG3D,YAAA4Y,aAAA,WAGI,OAFAh5B,KAAKoJ,gBAAaxJ,EAEXyP,QAAQY,WAGX,YAAAqxB,2BAAR,SAAmCl4B,EAAoB,G,IAAEy4B,EAAA,EAAAA,cACrD7hC,KAAKoJ,WAA+B,WAAlBy4B,EAA6B,uBAAyBz4B,GAG9D,YAAAwzB,cAAd,SAA4ByD,G,gIACxB,IAAKrgC,KAAKoJ,WACN,MAAM,IAAI,IAAiB,IAAqBvP,sBAGhC,SAAMmG,KAAKkhC,6BAA6BY,aAAa9hC,KAAKoJ,WAAYi3B,I,OAE1F,MAAO,CAAP,EAFoB,SAA6E,iBAK7F,YAAAtD,iBAAR,SAAyB,G,IAAEgF,EAAA,EAAAA,QACvB,IAAKA,EACD,MAAM,IAAI,IAAiB,IAAqBpoC,gBAGpD,OAAOqG,KAAKw7B,YAAYmC,SAAS,gBAAiB,CAC9CC,aAAc,SACdxrB,OAAQ,wBACR0Y,SAAU9qB,KAAKoJ,WACf44B,SAAUD,KAIV,YAAAN,qBAAR,SAA6B/E,GACzB,IAAMuF,EAAY,sBAAkCvF,GAC5CrS,EAAA,EAAAA,MAAO6X,EAAA,EAAAA,MAAOC,EAAA,EAAAA,OAAQxF,EAAA,EAAAA,MAAOyF,EAAA,EAAAA,OAAQC,EAAA,EAAAA,QA8B7C,OA5BIhY,IAAUqP,EAAiBrP,WACpB4X,EAAa5X,MAGpB8X,IAAWxI,EAAkBwI,WACtBF,EAAaE,OAGpBD,IAAUtI,EAAiBsI,WACpBD,EAAaC,MAGpBvF,IAAU9C,EAAiB8C,WACpBsF,EAAatF,MAGF,iBAAXyF,EACPH,EAAaG,OAASA,EAAS,GACzB,GACCA,EAAS,GAAK,GAAKA,SAEnBH,EAAaG,QAGD,kBAAZC,GAA0BA,GAAWJ,EAAaE,SAAWxI,EAAkBA,EAAkB2I,qBACjGL,EAAaI,QAGjBJ,GAGH,YAAAN,iBAAR,SAAyBvmB,EAAsD/O,GACnE,IAAAgtB,EAAA,EAAAA,SAAUkJ,EAAA,EAAAA,OACZjJ,EAAqC,CAAE,QAM7C,OAP0B,EAAAkJ,yBAItBlJ,EAAe7sB,KAAK,UAGjB,CACH4sB,SAAQ,EACRgD,QAAQ,EACRl0B,SAAUkE,EAAKlE,SAASG,KACxBgxB,eAAc,EACdiJ,OAAM,IAGlB,EA/HA,GCyBe,SAASE,GACpB7jC,GAEA,IAAM8jC,EAAO9jC,GAAWA,EAAQ8jC,KAC1BjwB,EAAQ,cACRkwB,EAAgB,8BAAoB,CAAED,KAAI,IAC1CE,EAAa,2BAAiB,CAAEF,KAAI,IAE1C,OAAO,IAAI,EACPjwB,EACA,IAAI,ECtBG,SACXA,EACAkwB,EACAC,EACAF,GAEA,IAAMG,EAAW,IAAI,IACfC,EAAe,4BACfC,EAAwB,IAAI,IAC9B,IAAI,IAAsBJ,GAC1B,IAAI,IAAoB,IAAI,IAAoBA,KA+GpD,OA5GAE,EAAStmB,SAAS,EAAyBymB,kBAAkB,WACzD,WAAI,GACAvwB,EACAswB,EACA,IAAI,IAAoB,IAAI,IAAsBD,IAClD,IAAI,IAAmBA,GACvBF,MAIRC,EAAStmB,SAAS,EAAyB0mB,yBAAyB,WAChE,WAAI,GACAxwB,EACAswB,EACA,IAAI,IAAoB,IAAI,IAAsBD,IAClD,IAAI,IAAmBA,GACvBF,GACA,MAIRC,EAAStmB,SAAS,EAAyB2mB,YAAY,WACnD,WAAI,GACAzwB,EACAswB,EACA,IAAI,IAAuBD,OAGnCD,EAAStmB,SAAS,EAAyB4mB,mBAAmB,WAC1D,WAAI,GACA1wB,EACAmwB,EACAG,EACA,YACItwB,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,EAAyB6mB,wBAAwB,WAC/D,WAAI,GACA3wB,EACAmwB,EACAG,EACA,YACItwB,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,EAAyB8mB,qBAAqB,WAC5D,WAAI,GACA5wB,EACAmwB,EACAG,EACA,YACItwB,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBqwB,UAO9CD,EAAStmB,SAAS,EAAyB+mB,kBAAkB,WACzD,WAAI,GACA7wB,EACAmwB,EACAG,EACA,YACItwB,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,EAAyBgnB,eAAe,WACtD,WAAI,GACA9wB,EACAswB,EACA,IAAI,IAAmBD,GACvBF,EACAF,MAIRG,EAAStmB,SAAS,EAAyBinB,gBAAgB,WACvD,WAAI,GACA/wB,EACAswB,EACA,IAAI,EAA2BD,GAC/BF,EACA,IAAI,IAA4BD,OAIxCE,EAAStmB,SAAS,EAAyBknB,eAAe,WACtD,WAAI,GACAhxB,EACAswB,EACA,YAAkCtwB,OAInCowB,EDlGCa,CAA6BjxB,EAAOkwB,EAAeC,EAAYF,GAC/D,IAAI,IAA2B,IAAI,IAA2BC,MA9C1E,oC,iCEEYgB,E,oECOZ,YACI,WAAYvoC,GAAZ,MACI,YAAMA,EAAU,CAAEZ,QAASY,EAASH,KAAKuhB,SAAQ,K,OAEjD,EAAKtlB,KAAO,yBACZ,EAAKgC,KAAO,sB,EAEpB,OAPoD,yBAOpD,EAPA,C,MAAoD,G,SDPpD,SAAYyqC,GACR,uCACA,mCACA,+BAHJ,CAAYA,MAAsB,KAYlC,I,EAAA,YACI,WACInpC,EACOvB,QAAA,IAAAA,MAAkC0qC,EAAuBC,cAFpE,MAII,YAAMppC,GAAW,uCAAqC,K,OAF/C,EAAAvB,UAIP,EAAK/B,KAAO,qBACZ,EAAKgC,KAAO,iB,EAEpB,OAVgD,yBAUhD,EAVA,CAAgD,K,QEM3B,EAArB,WAOI,WACY2qC,EACAC,EACAC,EACAC,EACAtlC,EACAulC,EACAC,EACAC,GARZ,WACY,KAAAN,iBACA,KAAAC,mBACA,KAAAC,iBACA,KAAAC,oBACA,KAAAtlC,iBACA,KAAAulC,WACA,KAAAC,YACA,KAAAC,WAERnkC,KAAKokC,aAAc,EAEfpkC,KAAKmkC,SAASE,YACdrkC,KAAK8jC,iBAAiBtN,YAAY,IAA0B8N,iBAAkBtkC,KAAKmkC,SAASE,YAG5FrkC,KAAKmkC,SAASlH,SACdj9B,KAAK8jC,iBAAiBtN,YAAY,IAA0B+N,cAAevkC,KAAKmkC,SAASlH,SAGzFj9B,KAAKmkC,SAASK,QACdxkC,KAAK8jC,iBAAiBtN,YAAY,IAA0BiO,eAAgBzkC,KAAKmkC,SAASK,QAG1FxkC,KAAKmkC,SAASO,aACd1kC,KAAK8jC,iBAAiBtN,YAAY,IAA0BmO,YAAa3kC,KAAKmkC,SAASO,aAGvF1kC,KAAKmkC,SAASS,WACd5kC,KAAK8jC,iBAAiBtN,YAAY,IAA0BqO,UAAW7kC,KAAKmkC,SAASS,WAGzF5kC,KAAK8jC,iBAAiBtN,YAAY,IAA0BmO,aAAa,WAAM,SAAKG,sBA4H5F,OAzHI,YAAAC,OAAA,sBACI,OAAI/kC,KAAKokC,YACE/0B,QAAQY,QAAQjQ,OAG3BA,KAAKokC,aAAc,EACnBpkC,KAAK8jC,iBAAiB3N,SACtBn2B,KAAKgkC,kBAAkBgB,KAAKhlC,KAAKmkC,SAAS/jB,aAEnCpgB,KAAKilC,eACPjmC,MAAK,WAAM,SAAKkmC,mBAChBlmC,MAAK,SAAAmB,GAAO,SAAK0jC,eAAesB,YAAYhlC,EAAK,EAAKgkC,SAAS/jB,gBAC/DphB,MAAK,SAAAomC,GACF,EAAKC,QAAUD,EAEf,EAAKN,mBACL,EAAKd,kBAAkBsB,UAE1BhmC,OAAM,SAAAC,GAGH,OAFA,EAAK6kC,aAAc,EAEZ,EAAKmB,kBAAkBhmC,GACzBD,OAAM,WAQH,MAPA,EAAKwkC,iBAAiBjN,QAAQ,CAC1B39B,KAAM,IAA0BssC,WAChCnzB,QAAS9S,IAGb,EAAKykC,kBAAkBsB,OAEjB/lC,QAGjBP,MAAK,WAAM,cAGpB,YAAAymC,OAAA,WACSzlC,KAAKokC,cAIVpkC,KAAKokC,aAAc,EACnBpkC,KAAK8jC,iBAAiBxN,aAElBt2B,KAAKqlC,SAAWrlC,KAAKqlC,QAAQnL,aAC7Bl6B,KAAKqlC,QAAQnL,WAAWC,YAAYn6B,KAAKqlC,SACzCrlC,KAAKqlC,QAAQK,cAAcC,WAI3B,YAAAb,iBAAR,WACS9kC,KAAKqlC,SAAYrlC,KAAKqlC,QAAQO,eAAkB5lC,KAAKmkC,SAAS0B,SAInE7lC,KAAK+jC,eAAejO,UAAU91B,KAAKqlC,QAAQO,eAE3C5lC,KAAK+jC,eAAe1rB,KAAK,CACrBnf,KAAM,IAAyB4sC,gBAC/BzzB,QAASrS,KAAKmkC,SAAS0B,WAIvB,YAAAX,cAAR,WACI,MAAK,kBAAkB//B,KAAK,YAASnF,KAAKmkC,SAAShkC,KAAK2F,UAIjD9F,KAAKtB,eAAe2Z,KAAKrY,KAAKmkC,SAAShkC,KACzCnB,MAAK,SAAC,GAA8B,OAApB,OAAAu0B,eAChBj0B,OAAM,SAAAlE,GAAY,OAAAiU,QAAQ2M,OAAO,IAAI,EAAuB5gB,OALtDiU,QAAQY,QAAQjQ,KAAKmkC,SAAShkC,MAerC,YAAA8kC,aAAR,WACI,GAAIjlC,KAAKikC,SAAS8B,QA/HW,mBAgIzB,OAAO12B,QAAQY,UAGnBjQ,KAAKikC,SAAS+B,QAnIe,mBAmIgB,GAQ7ChmC,KAAKikC,SAAS+B,QA1IuB,yBA0IgBtjC,KAAKujC,OAElD,IACF1S,EADE,+BAAA3tB,OACqB,6CAA6CsgC,mBAAmBlmC,KAAKkkC,UAAU3+B,MAK5G,OAHAF,SAASpK,KAAKyhC,MAAMyJ,WAAa,SACjCnmC,KAAKkkC,UAAUxyB,QAAQ6hB,GAEhB,IAAIlkB,SAAe,gBAGtB,YAAAk2B,kBAAR,SAA0BhmC,GACtB,IAAM6mC,EAAcC,OAAOrmC,KAAKikC,SAAS8B,QAtJJ,2BA6JrC,QALMK,GAAe1jC,KAAKujC,MAAQG,EA1JG,MA2JjC7mC,aAAiB,GACjBA,EAAMtG,UAAY0qC,EAAuB2C,gBAO7CtmC,KAAKikC,SAASsC,WAjKuB,0BAkKrCvmC,KAAKikC,SAASsC,WAnKe,mBAqKtBvmC,KAAKilC,gBAND51B,QAAQ2M,UA3JNwqB,EAAgB,sBADpC,KACoBA,GAArB,GClBMC,EAAyC,CAC3CC,KAAM,GACNxE,MAAO,UACPyE,gBAAiB,WAGfC,EAAqB,+C,EAE3B,WAKI,WACIhoC,GAEAoB,KAAK6mC,QAAU,yCAAKJ,GAAmB7nC,GAAWA,EAAQinC,QAE1D7lC,KAAK8mC,mBAEL9mC,KAAK+mC,WAAa/mC,KAAKgnC,kBACvBhnC,KAAKinC,WAAajnC,KAAKknC,kBAEvBlnC,KAAK+mC,WAAW3H,YAAYp/B,KAAKinC,YA4FzC,OAzFI,YAAAjC,KAAA,SAAKmC,GACD,GAAIA,EAAU,CACV,IAAM,EAAS9hC,SAAS+0B,eAAe+M,GAEvC,IAAK,EACD,MAAM,IAAIxsC,MAAM,8EAGpB,EAAOykC,YAAYp/B,KAAK+mC,YAG5B/mC,KAAK+mC,WAAWrK,MAAMyJ,WAAa,UACnCnmC,KAAK+mC,WAAWrK,MAAM0K,QAAU,KAGpC,YAAA9B,KAAA,sBACU+B,EAAsB,WACxB,EAAKN,WAAWrK,MAAMyJ,WAAa,SAEnC,EAAKY,WAAWxQ,oBAAoB,gBAAiB8Q,IAGzDrnC,KAAK+mC,WAAW3Q,iBAAiB,gBAAiBiR,GAElDrnC,KAAK+mC,WAAWrK,MAAM0K,QAAU,KAG5B,YAAAJ,gBAAR,WACI,IAAMrO,EAAYtzB,SAASC,cAAc,OAazC,OAXAqzB,EAAU+D,MAAM4K,QAAU,QAC1B3O,EAAU+D,MAAM6K,OAAS,IACzB5O,EAAU+D,MAAM8K,KAAO,IACvB7O,EAAU+D,MAAM0F,OAAS,OACzBzJ,EAAU+D,MAAM+K,MAAQ,OACxB9O,EAAU+D,MAAMgL,SAAW,WAC3B/O,EAAU+D,MAAMiL,MAAQ,IACxBhP,EAAU+D,MAAMkL,IAAM,IACtBjP,EAAU+D,MAAMmL,WAAa,qBAC7BlP,EAAU+D,MAAM0K,QAAU,IAEnBzO,GAGH,YAAAuO,gBAAR,WACI,IAAMY,EAAYziC,SAASC,cAAc,OAiBzC,OAfAwiC,EAAUpL,MAAM4K,QAAU,QAC1BQ,EAAUpL,MAAM+K,MAAWznC,KAAK6mC,QAAQH,KAAI,KAC5CoB,EAAUpL,MAAM0F,OAAYpiC,KAAK6mC,QAAQH,KAAI,KAC7CoB,EAAUpL,MAAMqL,aAAkB/nC,KAAK6mC,QAAQH,KAAI,KACnDoB,EAAUpL,MAAMsL,OAAS,YACzBF,EAAUpL,MAAMuL,YAAiBjoC,KAAK6mC,QAAQF,gBAAe,IAAI3mC,KAAK6mC,QAAQF,gBAAe,IAAI3mC,KAAK6mC,QAAQ3E,MAAK,IAAIliC,KAAK6mC,QAAQ3E,MACpI4F,EAAUpL,MAAMwL,OAAS,SACzBJ,EAAUpL,MAAMgL,SAAW,WAC3BI,EAAUpL,MAAM8K,KAAO,IACvBM,EAAUpL,MAAMiL,MAAQ,IACxBG,EAAUpL,MAAMkL,IAAM,MACtBE,EAAUpL,MAAM7jB,UAAY,gCAC5BivB,EAAUpL,MAAMyL,eAAiB,cACjCL,EAAUpL,MAAM0L,UAAexB,EAAkB,uDAE1CkB,GAGH,YAAAhB,iBAAR,WAGI,IAAIzhC,SAAS+0B,eAAewM,GAA5B,CAIA,IAAMlK,EAAQr3B,SAASC,cAAc,SAErCo3B,EAAMt/B,GAAKwpC,EAEXvhC,SAASgjC,KAAKjJ,YAAY1C,GAEtBA,EAAM4L,iBAAiBC,eAGvB7L,EAAM4L,MAAME,WAAW,gCACN5B,EAAkB,sLAIhC,KAGf,EA3GA,G,mBCJA,WACI,WACYzC,GAAA,KAAAA,WAyEhB,OAtEI,YAAAgB,YAAA,SAAYlF,EAAa7f,GACrB,IAAMuY,EAAYtzB,SAAS+0B,eAAeha,GAClC,sBAAArgB,eAAA,IAAU,EAAV,MAER,IAAK44B,EACD,MAAM,IAAI,EACN,+EACAgL,EAAuB8E,kBAI/B,IAAMrD,EAAS//B,SAASC,cAAc,UAUtC,OARA8/B,EAAOnF,IAAMA,EACbmF,EAAO1I,MAAMsL,OAAS,OACtB5C,EAAO1I,MAAM4K,QAAU,OACvBlC,EAAO1I,MAAM+K,MAAQ,OACrBrC,EAAOsD,qBAAsB,EAE7B/P,EAAUyG,YAAYgG,GAEfplC,KAAK2oC,kBAAkBvD,EAAQrlC,GACjCT,OAAM,SAAAC,GAGH,MAFAo5B,EAAUwB,YAAYiL,GAEhB7lC,MAIV,YAAAopC,kBAAR,SAA0BvD,EAA2BwD,GAGjD,OAAO,IAAIv5B,SAAQ,SAACY,EAAS+L,GACzB,IAAMjc,EAAU0Y,OAAOowB,YAAW,WAC9B7sB,EAAO,IAAI,EAAmB,0EAC/B4sB,GAEGE,EAAgB,SAACrT,GACnB,GAAIA,EAAM7vB,SAAW,YAASw/B,EAAOnF,KAAKr6B,SAItC,YAAc6vB,EAAM1a,KAAM,IAA0ByqB,cACpDx1B,IACAgM,EAAO,IAAI,EAAmByZ,EAAM1a,KAAK1I,QAAQ7X,QAASmpC,EAAuB2C,kBAGjF,YAAc7Q,EAAM1a,KAAM,IAA0B4pB,cAAc,CAClES,EAAO1I,MAAM4K,QAAU,GAEvB,IAAMyB,EAAYtT,EAAM1a,KAAK1I,SAAWojB,EAAM1a,KAAK1I,QAAQ02B,UACrDC,EAAU,YAAc,CAC1BC,WAAW,EACXC,WAAW,EACXC,wBAAyBJ,EAAY,gBAAkB,iBACxD3D,GAEHp1B,IACAC,EAAQ+4B,EAAQA,EAAQ1rC,OAAS,MAInC0S,EAAW,WACbyI,OAAO8d,oBAAoB,UAAWuS,GACtCrwB,OAAO2wB,aAAarpC,IAGxB0Y,OAAO2d,iBAAiB,UAAW0S,OAG/C,EA3EA,GCNA,kCAaA,IAAMO,EAAiB,+BAoBR,SAASC,EAAc1qC,GAClC,IAAMgH,EAAS,YAAShH,EAAQuB,KAAKyF,OAYrC,OAXyB,IAAI,EACzB,IAAI,EACJ,IAAI,IAA8CA,GAClD,IAAI,IAAwCA,GAC5C,IAAI,EAAiB,CAAEigC,OAAQjnC,EAAQinC,QAAUjnC,EAAQinC,OAAO0D,mBAChE,gCACA,IAAI,IAAeF,GACnB5wB,OAAOC,SACP9Z,GAGoBmmC,W,oEC5Cb,SAASyE,EAAuBhvC,GAC3C,GAAKA,EAAQ6X,SAAY7X,EAAQ6X,QAAQ02B,UAAzC,CAIA,IAAM9tC,EAAOoK,SAAS+0B,eAAe5/B,EAAQ6X,QAAQ02B,WAEhD9tC,IAAQA,EAAKwuC,aAAa,uBAI/BxuC,EAAKyuC,aAAa,qBAAsB,K,WCPrC,SAASC,EAAcpqC,GAC1B,MAC6B,iBAAlBA,EAAM/E,SACS,iBAAf+E,EAAMrG,OACa,iBAAlBqG,EAAMtG,UAAyBsG,EAAMtG,UAC7CsG,aAAiB5E,M,oBCCJ,EAArB,WAII,WACYmpC,EACAC,EACA6F,EACAC,QAAA,IAAAA,MAAA,IAHA,KAAA/F,mBACA,KAAAC,iBACA,KAAA6F,2BACA,KAAAC,mBAER7pC,KAAK8jC,iBAAiB3N,SAkG9B,OA/FI,YAAA2T,aAAA,WACI,IAAMtvC,EAAyC,CAC3CtB,KAAM,IAA0BorC,kBAGpCtkC,KAAK+pC,aAAavvC,IAGtB,YAAAwvC,UAAA,SAAU33B,GACN,IAAM7X,EAAsC,CACxCtB,KAAM,IAA0BqrC,cAChClyB,QAASrS,KAAKiqC,gBAAgB53B,IAGlCrS,KAAK+pC,aAAavvC,IAGtB,YAAA0vC,eAAA,SAAe73B,GACX,IAAM7X,EAA2C,CAC7CtB,KAAM,IAA0BssC,WAChCnzB,QAASrS,KAAKiqC,gBAAgB53B,IASlCrS,KAAK+pC,aAAavvC,EAAS,CAAE2vC,YAAY,KAG7C,YAAAC,gBAAA,SAAgB/3B,GACZ,IAAM7X,EAA4C,CAC9CtB,KAAM,IAA0ByrC,YAChCtyB,QAAO,GAGXrS,KAAK+pC,aAAavvC,IAGtB,YAAA6vC,WAAA,WACI,IAAM7vC,EAAuC,CACzCtB,KAAM,IAA0BurC,gBAGpCzkC,KAAK+pC,aAAavvC,IAGtB,YAAA8vC,cAAA,WACI,IAAM9vC,EAA0C,CAC5CtB,KAAM,IAA0B2rC,WAGpC7kC,KAAK+pC,aAAavvC,IAGtB,YAAA+vC,cAAA,SAAcC,GACVxqC,KAAK8jC,iBAAiBtN,YAAY,IAAyBsP,iBAAiB,SAAC,G,IAAEzzB,EAAA,EAAAA,QAC3Em4B,EAAQn4B,OAIR,YAAA03B,aAAR,SAAqBvvC,EAAgCoE,GAGjD,GAFAoB,KAAKyqC,uBAAuBjwC,GAExBoE,GAAWA,EAAQurC,WACnB,OAAOnqC,KAAK4pC,yBAAyBvxB,KAAK7d,GAG9CwF,KAAK+jC,eAAe1rB,KAAK7d,IAGrB,YAAAiwC,uBAAR,SAA+BjwC,GAA/B,WACInD,OAAOsJ,KAAKX,KAAK6pC,kBACZ7iC,SAAQ,SAAA9O,GACL,GAAIsC,EAAQtB,OAAShB,EAArB,CAIA,IAAMsyC,EAAU,EAAKX,iBAAiB3xC,GAElCsyC,GACCA,EAAmD1zC,KAAK,KAAM0D,QAKvE,YAAAyvC,gBAAR,SAAwB1qC,GACpB,MAAO,CACH/E,QAAS+E,EAAM/E,QACftB,KAAMywC,EAAcpqC,GAASA,EAAMrG,UAAO0G,EAC1C3G,QAAS0wC,EAAcpqC,GAASA,EAAMtG,aAAU2G,IAzGvC8qC,EAA+B,sBADnD,KACoBA,GAArB,GCPqB,EAArB,yBAcA,OAbI,YAAAZ,aAAA,aAEA,YAAAE,UAAA,aAEA,YAAAE,eAAA,aAEA,YAAAE,gBAAA,aAEA,YAAAC,WAAA,aAEA,YAAAC,cAAA,aAEA,YAAAC,cAAA,aAbiBI,EAA6B,sBADjD,KACoBA,GAArB,GC8Be,SAASC,EAAgChsC,G,MACpD,cAEA,IAAMisC,EAAejsC,EAAQisC,cAAgBpyB,OAAOqyB,OAGpD,OAAIryB,SAAWoyB,EACJ,IAAI,EAGR,IAAI,EACP,IAAI,IAA6CjsC,EAAQmsC,cACzD,IAAI,IAAyCnsC,EAAQmsC,aAAcF,GACnE,IAAI,IAAyC,IAAKA,KAAa,MAC5D,IAA0BlG,aAAc6E,EAAsB,IAjDzE,mC,gECiBO,SAASwB,EAAsBlqC,GAClC,OAAOA,EAAItI,eAAe,YCD9B,iBAMI,WAAYoG,GALJ,KAAAqsC,QAAU,EACV,KAAAC,KAAwB,CAAEC,KAAM,IAChC,KAAAC,UAAmC,GAIvCprC,KAAKmkC,SAAW,oBACZkH,QAAS,EACTlpC,QAAS,IACTmpC,SAAU,QACP1sC,GA4If,OAxII,YAAAw4B,OAAA,W,IAAO,sDACH,IAAMv2B,EAASb,KAAKurC,YAAW,MAAhBvrC,KAAoBmG,GAC3B3D,EAAA,EAAAA,MAAOgpC,EAAA,EAAAA,UACT1qC,EAAA,EAAAA,IAYN,OAVIA,GAAOA,EAAI8O,SACX9O,EAAI2qC,YAEJ3qC,EAAMd,KAAK0rC,aAAaF,EAAWrlC,EAAK2K,MAAMtO,IAKlDxC,KAAK2rC,oBAAoB7qC,GAElBA,EAAI8O,UAGf,YAAAsnB,aAAA,W,IAAa,sDACD,IAAAp2B,EAAA,+BAAAA,IAER,OAAOA,EAAMA,EAAI2qC,UAAY,GAGzB,YAAAF,YAAR,W,UAAoB,kDAUhB,IATA,IAAI/oC,EAAQ,EACRgpC,EAAYxrC,KAAKkrC,KAQdM,EAAUL,KAAK7tC,QAAQ,CAG1B,IAFA,IAAIsuC,GAAY,EAEPC,EAAW,EAAGA,EAAWL,EAAUL,KAAK7tC,OAAQuuC,IAAY,CACjE,IAAM/qC,EAAM0qC,EAAUL,KAAKU,GAE3B,GAAK7rC,KAAKmkC,SAAShiC,QAAQrB,EAAIlJ,MAAOuO,EAAK3D,IAA3C,CAQA,IAFA,EAAAgpC,EAAUL,MAAKW,QAAO,QAAIN,EAAUL,KAAKvU,OAAOiV,EAAU,KAErC,IAAhB1lC,EAAK7I,QAAgBkF,IAAU2D,EAAK7I,OAAS,IAAM0tC,EAAsBlqC,GAC1E,MAAO,CAAE0B,MAAK,EAAE1B,IAAG,EAAE0qC,UAAS,GAGlCI,GAAY,EACZJ,EAAY1qC,EACZ0B,IAEA,OAGJ,IAAKopC,EACD,MAIR,MAAO,CAAEppC,MAAK,EAAEgpC,UAAS,IAGrB,YAAAE,aAAR,SAAqBZ,EAAmD3kC,GACpE,IAEIrF,EAFA0B,EAAQ,EACRgpC,EAAYV,EAGhB,GACIhqC,EAAM,CACFqqC,KAAM,GACNK,UAAS,EACTC,UAAW,EACX7zC,MAAOuO,EAAK3D,IAMhBgpC,EAAUL,KAAKW,QAAQhrC,GAEvB0qC,EAAY1qC,EACZ0B,UACKA,EAAQ2D,EAAK7I,QAEtB,IAAMyuC,EAAcjrC,EAIpB,OAFAirC,EAAYn8B,SAAW,MAAK5P,KAAKirC,QAE1Bc,GAGH,YAAAJ,oBAAR,SAA4BK,GACxB,GAAKhsC,KAAKmkC,SAASkH,QAAnB,CAIA,IAAM7oC,EAAQxC,KAAKorC,UAAU3lC,QAAQumC,GAQrC,GANAhsC,KAAKorC,UAAUxU,QACA,IAAXp0B,EAAe,EAAIA,GACR,IAAXA,EAAe,EAAI,EACnBwpC,KAGAhsC,KAAKorC,UAAU9tC,QAAU0C,KAAKmkC,SAASkH,SAA3C,CAIA,IAAMvqC,EAAMd,KAAKorC,UAAUhlC,MAEtBtF,IAILd,KAAKisC,WAAWnrC,GAChBd,KAAKmkC,SAASmH,SAASxqC,EAAI8O,cAGvB,YAAAq8B,WAAR,SAAmBnrC,GACVA,EAAI0qC,YAIT1qC,EAAI0qC,UAAUL,KAAKvU,OAAO91B,EAAI0qC,UAAUL,KAAK1lC,QAAQ3E,GAAM,GD3I5D,SAA2BA,GAC9B,OAAOA,EAAItI,eAAe,aC4IlB0zC,CAAkBprC,EAAI0qC,YAI1BxrC,KAAKisC,WAAWnrC,EAAI0qC,aAE5B,EAvJA,G,qBCjBA90C,EAAOD,QAAUkC,QAAQ,kB,mGCMV,SAASwzC,EACpB/wC,EACAZ,GAEQ,IACA,EADA,EAAAS,KACAI,cAAA,IAAS,EAAT,KAER,OAAO,IAAI,IAAaD,EAAU,CAC9BZ,QAAS6hB,EAAWhhB,IAAWb,EAC/Ba,OAAM,IAId,SAASghB,EAAWhhB,GAChB,GAAKiH,MAAMC,QAAQlH,GAInB,OAAOA,EAAOuF,QAAO,SAACC,EAAkBtB,GACpC,OAAIA,GAASA,EAAM/E,QACR,yBAAIqG,EAAQ,CAAAtB,EAAM/E,UAGtBqG,IACR,IAAIP,KAAK,O,wCCtBhB,cACI,WAAYlF,GAAZ,MACI,YAAMA,EAAU,CACZZ,QAAS,2CACX,K,OAEF,EAAKtD,KAAO,eACZ,EAAKgC,KAAO,U,EAEpB,OAT0C,yBAS1C,EATA,C,MAA0C,G,+CCC1C,cACI,WAAYkC,GAAZ,MACI,YAAMA,EAAU,CAAEZ,QAAS,yEAAwE,K,OAEnG,EAAKtD,KAAO,4BACZ,EAAKgC,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,C,MAAuD,G,oCCTvD,oBASe,gBAAqB,mB,6BCLpC,IAAYkzC,EAAZ,2CAAYA,GACR,gEACA,gEACA,0DAHJ,CAAYA,MAAuB,M,uECKnC,aACI,WACYC,GAAA,KAAAA,uBAkBhB,OAdI,YAAAp4B,WAAA,SAAWrV,GADX,WAEI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,IAAiB+hB,sBAE5C,EAAKwrB,qBAAqBp4B,WAAWrV,GAChCI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,IAAiB6hB,oBAAqBvlB,EAASH,OAC1E4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAiBqhB,iBAAkBxlB,WAVpF,sBADC,K,+BAeL,EApBA,GAAqB,O,6BCPrB,oBAIA,aACI,WACYsD,GAAA,KAAAA,iBAchB,OAXI,YAAAuV,WAAA,SAAW,G,IAAElU,QAAA,YAAAA,QAGT,OAAOC,KAAKtB,eAAelH,IAFf,oCAEwB,CAChCuI,QAAO,EACP7E,QAAS,CACL+E,OAAQ,IAAYC,OACpB,iBAAkB,QAIlC,EAhBA,G,oCCJA,YAIA,aACI,WACYxB,GAAA,KAAAA,iBAShB,OANI,YAAA4tC,oBAAA,SAAoB9X,EAA8B,G,IAAEz0B,QAAA,YAAAA,QAE1C7E,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAHf,gCAGyB,CAAEpd,KAAMu5B,EAAet5B,QAAO,EAAE6E,QAAO,KAEpF,EAXA,G,uDCEMwsC,EAAiB,CACnB91B,QAAS,CACL,uCACA,sCACA,WACA,sBACFnW,KAAK,MAGX,aACI,WACY5B,GAAA,KAAAA,iBAiBhB,OAdI,YAAA8tC,cAAA,SAAc93B,EAAoBzX,EAAsC,G,IAAE8C,QAAA,YAAAA,QAChEI,EAAM,6BAA6BuU,EAAU,mBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CAAElF,KAAMgC,EAASuZ,OAAQ+1B,EAAgBrxC,QAAO,EAAE6E,QAAO,KAGlG,YAAA8W,cAAA,SAAcnC,EAAoBzX,EAAmD,G,IAAE8C,QAAA,YAAAA,QAC3E3C,EAAA,EAAAA,GAAI,6BACN+C,EAAM,6BAA6BuU,EAAU,oBAAoBtX,EACjElC,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe4Z,IAAInY,EAAK,CAAEqW,OAAQ+1B,EAAgBtxC,KAAI,EAAEC,QAAO,EAAE6E,QAAO,KAE5F,EAnBA,G,uDCfA,aAKI,WAAYnB,GACRoB,KAAKysC,WAAa,GAClBzsC,KAAK0sC,WAAa,GAClB1sC,KAAKmkC,SAAW,oBAAEwI,aAAc,WAAc/tC,GA8CtD,OA3CI,YAAApH,IAAA,SAAIkF,EAAWkwC,GACX,IACI,OAAO5sC,KAAK6sC,aACRnwC,GAASsD,KAAKmkC,SAASwI,aACvBC,GAAclwC,GAASsD,KAAKmkC,SAASwI,cAE3C,MAAOptC,GACL,OAAOS,KAAK6sC,aACR7sC,KAAKmkC,SAASwI,aACdC,GAAc5sC,KAAKmkC,SAASwI,gBAKxC,YAAApwB,SAAA,SAAS7f,EAAUo4B,GACf,GAAI90B,KAAK8sC,YAAYpwC,GACjB,MAAM,IAAI,IAAqB,IAAIA,EAAK,4BAG5CsD,KAAKysC,WAAW/vC,GAASo4B,GAGnB,YAAAgY,YAAV,SAAsBpwC,GAClB,QAASsD,KAAKysC,WAAW/vC,IAGrB,YAAAqwC,aAAR,SAAqBrwC,GACjB,QAASsD,KAAK0sC,WAAWhwC,IAGrB,YAAAmwC,aAAR,SAAqBnwC,EAAekwC,GAChC,IAAK5sC,KAAK+sC,aAAaH,GAAa,CAChC,IAAM9X,EAAU90B,KAAKysC,WAAW/vC,GAEhC,IAAKo4B,EACD,MAAM,IAAI,IAAqB,IAAIp4B,EAAK,wBAG5CsD,KAAK0sC,WAAWE,GAAc9X,IAGlC,OAAO90B,KAAK0sC,WAAWE,IAE/B,EAtDA,G,+CCIA,cACI,WACWrtC,GADX,MAGI,YAAM,qGAAmG,K,OAFlG,EAAAA,QAIP,EAAKrI,KAAO,qCACZ,EAAKgC,KAAO,kC,EAEpB,OATgE,yBAShE,EATA,C,MAAgE,G,oCCNhE,mBAOA,2BAoGA,OAnGI,YAAA0V,WAAA,SACI1C,EACAgN,EACA8zB,GAEA,OAAO39B,QAAQY,QAAQjQ,KAAKitC,gCACxB/gC,EACAgN,EACA8zB,KAIR,YAAAh9B,SAAA,WACI,OAAOX,QAAQY,WAGnB,YAAAi9B,cAAA,SAAc9yB,GAEN,QAAA+yB,kBACIj0C,EAAA,EAAAA,KACoBwD,EAAA,mBAAAA,MACpB,IAAAyU,KAOR,MAAO,CACHjY,KAAMA,EACNs6B,MAAO92B,EACP0hC,QAAS,CACLgP,SAVI,EAAAC,YAWJC,SAVI,EAAAC,eAeR,YAAAN,gCAAR,SACI/gC,EACAgN,EACA8zB,GAGI,IAAAla,EAAA,EAAAA,mBAEgB,kBAAAxqB,KAKhB,IAAA8S,mBACIoyB,EAAA,EAAAA,kBACA,IAAAC,mBACA,IAAAC,iBAMR,MAAO,CACHC,WAAY,EACZC,gBAAiB,EACjBC,aAAc,CACVC,QATA,EAAAC,cAUA1T,WAAU,EACV2T,aAAY,GAEhBC,sBAAuB,CAAC,CACpB/0C,KAAM,OACNg1C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAfR,EAAAC,eAe4CvtC,KAAI,SAAAmQ,GAAQ,MAAS,OAATA,EAAgB,aAAeA,KAC/Eq9B,wBAAwB,EACxBC,yBAA0B,CACtB79B,OAAQ,IAAqB89B,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBx1C,KAAM,kBACNg1C,WAAY,CACR/yB,QAAS,QACTqyB,kBAAiB,MAI7BmB,gBAAiB,CACbC,aAAY,EACZC,iBAAkB,QAClBC,WAAY,gBAAMhc,EAAoB,GAAGic,QAAQ,IAErDC,eAAe,EACfC,yBAA0BjC,EAC1BkC,0BAA2B,CACvBT,qBAAqB,KAIrC,EApGA,G,oCCLA,YAIA,aACI,WACYjhC,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAkyB,KAAA,SAAKrF,GAAL,WACI,OAAOt6B,KAAKwN,cACPG,WAAW,MAAK2sB,EAAW,WAAa,IAAE,0CAC1Ct7B,MAAK,WACF,IAAK,EAAKyO,QAAQmyB,WACd,MAAM,IAAI,IAGd,OAAO,EAAKnyB,QAAQmyB,eAGpC,EAjBA,G,8DCCMuP,EAAc,CAChBxB,WAAY,EACZC,gBAAiB,GAGrB,2BA0GA,OAzGI,YAAAh/B,WAAA,SACI1C,EACAgN,EACA8zB,GAEA,OAAO39B,QAAQY,QACXjQ,KAAKovC,6BAA6BljC,EAAUgN,EAAe8zB,KAInE,YAAAh9B,SAAA,WACI,OAAOX,QAAQY,WAGnB,YAAAi9B,cAAA,SAAc9yB,GAEN,QAAA+yB,kBACIj0C,EAAA,EAAAA,KACoBwD,EAAA,mBAAAA,MACpB,IAAAyU,KACI,IAAAk8B,YACA,IAAAE,YAKZ,MAAO,CACHr0C,KAAMA,EACNs6B,MAAO6b,KAAK3yC,GACZ0hC,QAAS,CACLgP,SAAQ,EACRE,SAAQ,KAKZ,YAAA8B,6BAAR,SAAqCljC,EAAoBgN,EAA8B8zB,GAE/E,IAAAla,EAAA,EAAAA,mBAEgB,kBAAAxqB,KAKhB,IAAA8S,mBACI,IAAAk0B,iBACA,IAAAC,aACA,IAAA9B,mBACA,IAAAC,iBACA,IAAAK,cAEJM,EAAA,EAAAA,eAGEmB,EAA8BxvC,KAAKyvC,gCAAgCjC,GACnEkC,EAAoB1vC,KAAK2vC,sBAAsBH,EAA6BnB,GAElF,OAAO,yCACAc,GAAW,CACdlB,sBAAuB,CAACyB,GACxBf,gBAAiB,CACbE,iBAAkB,QAClBC,WAAY,gBAAMhc,EAAoB,GAAGic,QAAQ,GACjDH,aAAY,EACZtwC,YAAW,GAEfuvC,aAAe,CACXG,aAAY,EACZ3T,WAAU,EACVyT,QAAO,GAEXkB,eAAe,EACfC,yBAA0BjC,EAC1BkC,0BAA2B,CACvBT,qBAAqB,MAKzB,YAAAgB,gCAAR,SAAwCjC,GACpC,MAAO,CACHt0C,KAAM,kBACNg1C,WAAY,CACR/yB,QAAS,eACTqyB,kBAAiB,KAKrB,YAAAmC,sBAAR,SAA8BjB,EAAsDL,GAChF,MAAO,CACHn1C,KAAM,OACNg1C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBC,EAAevtC,KAAI,SAAAmQ,GAAQ,MAAS,OAATA,EAAgB,aAAeA,KAC/Eq9B,wBAAwB,EACxBC,yBAA0B,CACtB79B,OAAQ,IAAqB89B,KAC7BC,qBAAqB,IAG7BC,0BAAyB,IAGrC,EA1GA,G,oCCZA,2BAUA,aAGI,WACYpT,GAAA,KAAAA,uBAuHhB,OApHI,YAAA1sB,WAAA,SACI1C,EACAgN,EACA8zB,GAHJ,WAKI,IAAK9zB,EAAcrK,YACf,MAAM,IAAI,IAAiB,IAAqBhV,sBAKpD,OAFAmG,KAAKs7B,qBAAqB1sB,WAAWsK,EAAcrK,aAE5C7O,KAAKs7B,qBAAqBlrB,4BAC5BpR,MAAK,SAAA4wC,GAGF,OAFA,EAAKC,uBAAyBD,EAEvB,EAAKE,wBACR5jC,EACAgN,EAAckC,mBACd4xB,OAKhB,YAAAh9B,SAAA,WACI,OAAOhQ,KAAKs7B,qBAAqBtrB,YAGrC,YAAAk9B,cAAA,SAAc9yB,GACV,IAAM/H,EAAU0rB,KAAKgS,MAAM31B,EAAY+yB,kBAAkB6C,iBAAiBtzC,OAAOuzC,gBAAgB,GAEjG,MAAO,CACHzc,MAAOnhB,EAAQmhB,MACft6B,KAAMmZ,EAAQnZ,KACdoL,YAAa+N,EAAQ/N,YACrB85B,QAAS,CACLgP,SAAU/6B,EAAQ+rB,QAAQgP,SAC1BE,SAAUj7B,EAAQ+rB,QAAQkP,SAC1B4C,QAAS79B,EAAQ+rB,QAAQ8R,SAE7BC,QAAS99B,EAAQ89B,UAIjB,YAAAL,wBAAR,SACI5jC,EACAkP,EACA4xB,GAEA,IAAK5xB,EAAmB2yB,cACpB,MAAM,IAAI,IAAiB,IAAqBl0C,sBAGpD,IAAMu2C,EAAsE,CACxEvC,aAAc,CACVC,QAAS1yB,EAAmB2yB,cAC5BC,aAAc5yB,EAAmBqyB,mBACjCpT,WAAYjf,EAAmBsyB,kBAEnCiB,gBAAiB,CACbC,aAAc1iC,EAASG,KAAKlE,SAASG,KACrCumC,iBAAkB,QAClBC,WAAY,gBAAM5iC,EAAS4mB,mBAAoB,GAAGic,QAAQ,IAE9DsB,iBAAkB,CACd/B,wBAAwB,EACxBgC,qBAAsB,QAE1BrB,yBAA0BjC,EAC1BgC,eAAe,EACfP,qBAAqB,GAGzB,OAAOzuC,KAAKuwC,0DACRvwC,KAAK6vC,uBAAuBW,yBAAyBJ,KAIrD,YAAAG,0DAAR,SAAkEE,GAC9D,MAAO,CACH9C,WAAY,EACZC,gBAAiB,EACjBC,aAAc,CACVC,QAAS2C,EAAgC5C,aAAaC,QACtDzT,WAAYoW,EAAgC5C,aAAaxT,WACzD2T,aAAcyC,EAAgC5C,aAAaG,cAE/DC,sBAAuB,CAAC,CACpB/0C,KAAM,OACNg1C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqBqC,EAAgCJ,iBAAiBjC,oBACtEE,wBAAwB,EACxBC,yBAA0B,CACtB79B,OAAQ,IAAqB89B,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBx1C,KAAM,kBACNg1C,WAAY,CACR/yB,QAAS,YACT,uBAAwB,KACxB,qCAAsCs1B,EAAgCC,oCAAoCxC,WAAW,sCACrH,uBAAwBuC,EAAgCC,oCAAoCxC,WAAW,wBACvG,uBAAwBuC,EAAgCC,oCAAoCxC,WAAW,4BAInHS,gBAAiB8B,EAAgC9B,gBACjDK,eAAe,EACfC,wBAAyBwB,EAAgCxB,wBACzDC,0BAA2B,CACvBT,oBAAqBgC,EAAgChC,uBAIrE,EA3HA,G,oCCVA,2BAQA,2BA+EA,OA9EI,YAAA7/B,WAAA,SACI1C,EACAgN,EACA8zB,GAEA,OAAO39B,QAAQY,QAAQjQ,KAAK2wC,uDACxBzkC,EACAgN,EAAckC,mBACd4xB,KAIR,YAAAh9B,SAAA,WACI,OAAOX,QAAQY,WAGnB,YAAAi9B,cAAA,SAAc9yB,GACV,IACI,IAAM/H,EAAU0rB,KAAKgS,MAAM31B,EAAY+yB,kBAAkB6C,iBAAiBtzC,OAE1E,MAAO,CACH82B,MAAOnhB,EAAQjV,GACflE,KAAMmZ,EAAQnZ,KACdklC,QAAS,CACLgP,SAAU/6B,EAAQpB,KAAKnN,MACvBwpC,SAAUj7B,EAAQpB,KAAK2/B,QAGjC,MAAOC,GACL,MAAM,IAAI,IAAqB,+CAI/B,YAAAF,uDAAR,SACIzkC,EACAkP,EACA4xB,GAEA,MAAO,CACHW,WAAY,EACZC,gBAAiB,EACjBC,aAAc,CACVC,QAAS1yB,EAAmB2yB,cAC5B1T,WAAYjf,EAAmBsyB,iBAC/BM,aAAc5yB,EAAmBqyB,oBAErCQ,sBAAuB,CAAC,CACpB/0C,KAAM,OACNg1C,WAAY,CACRC,mBAAoB,CAAC,WAAY,kBACjCC,oBAAqB,CAAC,OAAQ,WAAY,MAAO,aAAc,QAC/DE,wBAAwB,EACxBC,yBAA0B,CACtB79B,OAAQ,IAAqB89B,KAC7BC,qBAAqB,IAG7BC,0BAA2B,CACvBx1C,KAAM,kBACNg1C,WAAY,CACR/yB,QAAS,SACT,iBAAkBC,EAAmB01B,cACrC,wBAAyB11B,EAAmB21B,yBAIxDpC,gBAAiB,CACbC,aAAc1iC,EAASG,KAAKlE,SAASG,KACrCumC,iBAAkB,QAClBC,WAAY,gBAAM5iC,EAAS4mB,mBAAoB,GAAGic,QAAQ,IAE9DC,eAAe,EACfC,yBAA0BjC,EAC1BkC,0BAA2B,CACvBT,qBAAqB,KAIrC,EA/EA,G,+CCNA,cACI,WAAYj0C,GAAZ,MACI,YAAMA,GAAW,yFAAuF,K,OAExG,EAAKtD,KAAO,+BACZ,EAAKgC,KAAO,6B,EAEpB,OAP0D,yBAO1D,EAPA,C,MAA0D,G,sDCG1D,cACI,WACWmC,GADX,MAGI,YAAM,0BACF,sDACG,kBAAQ,iBAAOA,IAAS,SAAA21C,GAAe,qBAAIA,GAAa,SAAC,GAAgB,OAAd,EAAAx2C,eAChE8F,KAAK,QAAM,K,OALN,EAAAjF,SAOP,EAAKnE,KAAO,8BACZ,EAAKgC,KAAO,4B,EAEpB,OAZyD,yBAYzD,EAZA,C,MAAyD,G,oCCLzD,qBAEA,aACI,WACY+3C,GAAA,KAAAA,aAuChB,OApCI,YAAAlL,QAAA,SAAsB7tC,GAClB,IAAMg5C,EAAW,IAAQnL,QAAQ/lC,KAAKmxC,cAAcj5C,IAEpD,GAAiB,OAAbg5C,EACA,OAAO,KAGX,IACI,OAAOnT,KAAKgS,MAAMmB,GACpB,MAAO3xC,GAIL,OAFAS,KAAKumC,WAAWvmC,KAAKmxC,cAAcj5C,IAE5B,OAIf,YAAAk5C,YAAA,SAA0Bl5C,GACtB,IAAMN,EAAQoI,KAAK+lC,QAAQ7tC,GAI3B,OAFA8H,KAAKumC,WAAWruC,GAETN,GAGX,YAAAouC,QAAA,SAAsB9tC,EAAaN,GAC/B,OAAO,IAAQouC,QAAQhmC,KAAKmxC,cAAcj5C,GAAM6lC,KAAKC,UAAUpmC,KAGnE,YAAA2uC,WAAA,SAAWruC,GACP,OAAO,IAAQquC,WAAWvmC,KAAKmxC,cAAcj5C,KAGzC,YAAAi5C,cAAR,SAAsBj5C,GAClB,OAAU8H,KAAKixC,WAAU,IAAI/4C,GAErC,EAzCA,G,uDCIA,aAGI,WACYsV,GAAA,KAAAA,gBAERxN,KAAKyN,QAAUgL,OAiBvB,OAdU,YAAAvK,WAAN,SAAiBmsB,G,YAAA,IAAAA,MAAA,I,wIACPb,EAAY,8CACZ56B,EAA6B,CAAE66B,OAAO,EAAM33B,WAAY,CAAE,mBAAoBu4B,IAEpFA,EACM,GAAMr6B,KAAKwN,cAAcG,WAAW6rB,EAAW56B,IADrD,M,cACM,S,aACA,SAAMoB,KAAKwN,cAAcG,WAAW6rB,I,OAApC,S,iBAEN,IAAKx5B,KAAKyN,QAAQU,OACd,MAAM,IAAI,IAGd,MAAO,CAAP,EAAOnO,KAAKyN,QAAQU,gBAE5B,EAvBA,G,+DCAA,aACI,WACYzP,GAAA,KAAAA,iBAehB,OAZU,YAAAojC,aAAN,SAAmBhX,EAAkBuV,G,0IAQrB,OAPNlgC,EAAM,2BAA2B2qB,EACjC7vB,EAAO,CAAEolC,OAAM,GACfnlC,EAAU,CACZ,iBAAkB,IAClB,eAAgB,IAAYm2C,MAGpB,GAAMrxC,KAAKtB,eAAe2Z,KAAKlY,EAAK,CAAEjF,QAAO,EAAED,KAAI,K,OAE/D,MAAO,CAAP,EAFY,SAEDA,cAEnB,EAjBA,G,oCCmBO,SAASq2C,EAAc1yC,EAAwBiI,GAGlD,OAAO0qC,EAFC,OAAAD,eAEqB1yC,EAASiI,GASnC,SAAS2qC,IAEZ,EAAQ,KAvBZ,qE,sFCdA,yBAOA,OANI,YAAAC,WAAA,SAAWlyC,GACP,MAAO,CACHrG,KAAM,IAAgBokB,WACtBjL,QAAS9S,IAGrB,EAPA,GCFe,SAASmyC,IACpB,IACI,OAAOC,QAAQvV,IAAIwV,WAAY,EACjC,MAAOC,GACL,MAAO,e,aCFf,WACI,WACYC,GAAA,KAAAA,WA8BhB,OA3BI,YAAAC,IAAA,W,IAAI,sDACA/xC,KAAKgyC,cAAa,MAAlBhyC,KAAI,0BAAe,OAAUiyC,KAGjC,YAAA9gC,KAAA,W,IAAK,sDACDnR,KAAKgyC,cAAa,MAAlBhyC,KAAI,0BAAe,QAAWiyC,KAGlC,YAAAC,KAAA,W,IAAK,sDACDlyC,KAAKgyC,cAAa,MAAlBhyC,KAAI,0BAAe,QAAWiyC,KAGlC,YAAA1yC,MAAA,W,IAAM,sDACFS,KAAKgyC,cAAa,MAAlBhyC,KAAI,0BAAe,SAAYiyC,KAGnC,YAAAE,MAAA,W,IAAM,sDACFnyC,KAAKgyC,cAAa,MAAlBhyC,KAAI,0BAAe,SAAYiyC,KAG3B,YAAAD,cAAR,SAAsB94C,G,UAAqB,oDAClC8G,KAAK8xC,UAAa9xC,KAAK8xC,SAAS54C,KAIrC,EAAA8G,KAAK8xC,SAAS54C,IAAMpC,KAAI,kCAACkJ,KAAK8xC,UAAaG,KAEnD,EAhCA,G,ECAA,yBAUA,OATI,YAAAF,IAAA,aAEA,YAAA5gC,KAAA,aAEA,YAAA+gC,KAAA,aAEA,YAAA3yC,MAAA,aAEA,YAAA4yC,MAAA,aACJ,EAVA,GCGA,ICDqCC,EDC/BC,QCD+B,KAAAD,EDCY,SAArBV,OCDSU,GAAA,GAC5BA,EAIE,IAAI,EAAcE,SAHd,IAAI,GDCJ,SAASC,IACpB,OAAOF,E,sDEEX,WACI,WACYG,GAAA,KAAAA,uBA8ChB,OA3CI,YAAAC,YAAA,SAAYnqC,EAAc1J,GAA1B,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IACMqN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAAiBiiB,uBAE5C,EAAKyxB,qBAAqBC,YAAYvmC,EAAS9O,GAAIkL,EAAM1J,GACpDI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAiB4gB,qBAAsBzkB,IAClE4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAiByhB,kBAAmB5lB,YAKrF,YAAAs3C,aAAA,SAAapqC,EAAc1J,GAA3B,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IACMqN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAAiBmiB,wBAE5C,EAAKuxB,qBAAqBE,aAAaxmC,EAAS9O,GAAIkL,EAAM1J,GACrDI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAiB6gB,sBAAuB1kB,IACnE4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAiB2hB,mBAAoB9lB,YAI1F,EAhDA,G,mCCLA,WACI,WACYsD,GAAA,KAAAA,iBAmChB,OAhCI,YAAA+zC,YAAA,SAAY/9B,EAAoBi+B,EAAoB,G,IAAE5yC,QAAA,YAAAA,QAC5CI,EAAM,6BAA6BuU,EAAU,WAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CACjCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,yBACf,IAAyB,CAC5B,IAAiBC,6BAGzBzb,KAAM,CAAE03C,WAAU,MAI1B,YAAAD,aAAA,SAAah+B,EAAoBi+B,EAAoB,G,IAAE5yC,QAAA,YAAAA,QAC7CI,EAAM,6BAA6BuU,EAAU,YAAYi+B,EACzDz3C,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe6Z,OAAOpY,EAAK,CACnCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,yBACf,IAAyB,CAC5B,IAAiBC,gCAKrC,EArCA,G,UCKA,WACI,WACYk8B,GAAA,KAAAA,gCA8ChB,OA3CI,YAAAC,qBAAA,SAAqB1pC,EAAyBvK,GAA9C,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IACMqN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAA0BsiB,gCAErD,EAAKwxB,8BAA8BC,qBAAqB3mC,EAAS9O,GAAI+L,EAAiBvK,GACjFI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAA0B8gB,8BAA+B3kB,IACpF4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAA0B8hB,2BAA4BjmB,YAKvG,YAAA03C,sBAAA,SAAsB3pC,EAAyBvK,GAA/C,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IACMqN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAA0BwiB,iCAErD,EAAKsxB,8BAA8BE,sBAAsB5mC,EAAS9O,GAAI+L,EAAiBvK,GAClFI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAA0B+gB,+BAAgC5kB,IACrF4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAA0BgiB,4BAA6BnmB,YAI5G,EAhDA,G,ECLA,WACI,WACYsD,GAAA,KAAAA,iBA6BhB,OA1BI,YAAAm0C,qBAAA,SAAqBn+B,EAAoBq+B,EAA6B,G,IAAEhzC,QAAA,YAAAA,QAC9DI,EAAM,6BAA6BuU,EAAU,qBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CACjCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,MAE1Bxb,KAAM,CAAE83C,oBAAmB,MAInC,YAAAD,sBAAA,SAAsBp+B,EAAoBq+B,EAA6B,G,IAAEhzC,QAAA,YAAAA,QAC/DI,EAAM,6BAA6BuU,EAAU,sBAAsBq+B,EACnE73C,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe6Z,OAAOpY,EAAK,CACnCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,SAItC,EA/BA,G,SCMA,WACI,WACYu8B,GAAA,KAAAA,oBAyGhB,OAtGI,YAAAC,OAAA,SAAOC,EAAkCt0C,GAAzC,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtB,IAAMa,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvBb,EAASC,KAAK,uBAAa,IAA2BujB,qBAAiBziB,EAAWX,IAElF,EAAK+zC,kBAAkBx7C,IAAIkI,GACtBuzC,OAAOC,EAAat0C,GACpBI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2BwjB,qBAAiB1iB,EAAWX,IAClFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BkjB,aAAcljB,EAAON,WAKjG,YAAAk0C,QAAA,SAAQv0C,GAAR,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtB,IAAMa,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvBb,EAASC,KAAK,uBAAa,IAA2B4jB,sBAAkB9iB,EAAWX,IAEnF,EAAK+zC,kBAAkBx7C,IAAIkI,GACtByzC,QAAQv0C,GACRI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2B6jB,sBAAkB/iB,EAAWX,IACnFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2BujB,cAAevjB,EAAON,WAKlG,YAAA2P,WAAA,SAAWhQ,GAAX,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACd5U,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvB,GAAIA,GAAY2U,EAAM6f,mBAAmBvS,cAAcjiB,GACnD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,IAA2B+iB,yBAAqBjiB,EAAWX,IAEtF,EAAK+zC,kBAAkBx7C,IAAIkI,GACtBkP,WAAWhQ,GACXI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2B4iB,yBAAqB9hB,EAAWX,IACtFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2ByiB,iBAAkBziB,EAAON,YAKrG,YAAA+5B,aAAA,SAAap6B,GAAb,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACd5U,EAAWd,GAAWA,EAAQc,SAC9BT,EAAO,CAAES,SAAQ,GAEvB,GAAIA,IAAa2U,EAAM6f,mBAAmBvS,cAAcjiB,GACpD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,IAA2BmjB,2BAAuBriB,EAAWX,IAExF,EAAK+zC,kBAAkBx7C,IAAIkI,GACtBs5B,aAAap6B,GACbI,MAAK,WACFH,EAASC,KAAK,uBAAa,IAA2B8iB,2BAAuBhiB,EAAWX,IACxFJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2B6iB,mBAAoB7iB,EAAON,YAKvG,YAAAm0C,kBAAA,SAAkB1sC,EAA4B9H,GAC1C,OAAO,aAAW3G,QAAO,SAAC4G,GACtB,IACMI,EAAO,CAAES,SADEd,GAAWA,EAAQc,UAGpCb,EAASC,KAAK,uBAAa,IAA2BikB,8BAA0BnjB,EAAWX,IAE3FyH,IAAS1H,MAAK,WACVH,EAASC,KAAK,uBAAa,IAA2BkkB,+BAA2BpjB,EAAWX,IAC5FJ,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,IAA2B4jB,wBAAyB5jB,EAAON,WAI5G,EA3GA,G,qDCLA,WAGI,WACYuO,GAAA,KAAAA,gBAERxN,KAAKyN,QAAUgL,OA4CvB,OAzCI,YAAA46B,WAAA,SAAW3sC,EAAuB4sC,GAE1B,QAAA9+B,OAAU6lB,EAAA,EAAAA,WAAYC,EAAA,EAAAA,SACtB,IAAAlf,mBAAsB,oBAAAsf,cAAA,IAAS,EAAT,OAGpBv6B,EAAM,YACkB,OAAzBu6B,EAAO6Y,cAAyB,aAAe,cAChD,yCACG7Y,EAAO6Y,cAAa,KACtBjZ,EAAW,WAAa,KACC,OAAzBI,EAAO6Y,cAAyB,OAAS,IAC1C,0BAA0BlZ,EAI9B,OAFAr6B,KAAKwzC,iBAAiB9sC,EAAQ4sC,GAEvBtzC,KAAKwN,cAAcG,WAAWxN,IAGjC,YAAAqzC,iBAAR,SAAyB9sC,EAAuB4sC,GAAhD,WACUG,EAAe,WACZ,EAAKhmC,QAAQimC,SAIlB,EAAKjmC,QAAQimC,OAAOC,MAAMC,YAAYltC,EAAO0U,mBAAmBie,UAChE,EAAK5rB,QAAQimC,OAAOC,MAAME,cAAa,KAGvC7zC,KAAKyN,QAAQimC,QAAU1zC,KAAKyN,QAAQimC,OAAOC,MAC3CF,IAEAzzC,KAAKyN,QAAQqmC,mBAAqBL,EAGlCzzC,KAAKyN,QAAQsmC,mBAAqBT,EAClCA,IAEAtzC,KAAKyN,QAAQumC,sBAAwBV,GAGjD,EAlDA,G,2BCEA,WACI,WACYhY,EACA58B,GADA,KAAA48B,uBACA,KAAA58B,iBAgHhB,OA7GI,YAAAkQ,WAAA,SAAWC,EAAqBjQ,GAG5B,OAFAoB,KAAKs7B,qBAAqB1sB,WAAWC,GAE9B7O,KAAKs7B,qBAAqBprB,kBAC5BlR,MAAK,SAAAuP,GAAgB,OAAAA,EAAa0lC,kBAAkB,CACjDC,SAAU,CACNC,OAAQv1C,EAAQu1C,OAChBlqC,SAAU,CACNmqC,gBAAiBx1C,EAAQw1C,kBAGjCC,eAAgB,CACZzF,aAAchwC,EAAQgwC,aACtBlmC,SAAU4rC,OAAO11C,EAAQ8J,iBAKzC,YAAAswB,aAAA,WACI,OAAOh5B,KAAKs7B,qBAAqBtrB,YAGrC,YAAAuvB,cAAA,SAAc/2B,EAA4CyB,EAAoB2c,GAA9E,WACI,OAAO5mB,KAAKs7B,qBAAqBprB,kBAC5BlR,MAAK,SAAAu1C,GAAyB,OAAAllC,QAAQC,IAAI,CACvCilC,EAAsBC,SAAShsC,GAC/B,EAAK8yB,qBAAqB3rB,qBAE7B3Q,MAAK,SAAC,G,IAACy1C,EAAA,KAAkBxmC,EAAA,KAElB,IAAAqH,uBAAA,IAAkB,EAAlB,yBAAArL,GAAA,EACA,IAAA5C,sBAAA,IAAiB,EAAjB,yBAAAuf,GAAA,EAGJ,OAAO,EAAK8tB,UAAU,yCACfD,GAAgB,CACnBn/B,gBAAe,EACfjO,eAAc,IACf4G,UAIP,YAAAymC,UAAR,SAAkBt6B,EAA2CnM,GAErD,IAAA0mC,EAAA,EAAAA,SACAttC,EAAA,EAAAA,eACAiO,EAAA,EAAAA,gBACA,IAAA8oB,QAEIwW,EAAA,EAAAA,UACA7kC,EAAA,EAAAA,WAER,OAAO/P,KAAKtB,eAAe2Z,KAAK,gBAAiB,CAC7Cnd,QAAS,CACL+E,OAAQ,YACR,eAAgB,qCAEpBhF,KAAM,CACF2iC,aAAcxjB,EAAYlhB,KAC1Bs6B,MAAOpZ,EAAYoZ,MACnB1I,SAAU,wBACV1Y,OAAQ,wBACRyrB,YAAa9tB,EACb8kC,iBAAkB70C,KAAK80C,oBAAoBC,GAC3C7W,gBAAiBl+B,KAAKg1C,YAAYJ,EAAWvtC,GAC7Cy2B,iBAAkB99B,KAAKg1C,YAAYJ,EAAWt/B,OAKlD,YAAA2/B,uBAAR,SAA+Bh4C,GAC3B,OAAKA,EAIE,CACHM,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClB03C,YAAaj4C,EAAQsB,MACrB42C,cAAel4C,EAAQU,SACvBy3C,gBAAiBn4C,EAAQY,SACzBw3C,SAAUp4C,EAAQa,KAClB48B,OAAQz9B,EAAQiB,oBAChBI,YAAarB,EAAQqB,YACrBF,WAAYnB,EAAQmB,YAZb,IAgBP,YAAA42C,YAAR,SAAoBttC,EAAezK,GAC/B,YAD+B,IAAAA,MAAA,IACxB,CACHyK,MAAK,EACL42B,WAAYrhC,EAAQM,UACpBghC,UAAWthC,EAAQO,SACnBghC,aAAcvhC,EAAQi4C,YACtBzW,eAAgBxhC,EAAQk4C,cACxBxW,eAAgB1hC,EAAQm4C,gBACxBt3C,KAAMb,EAAQo4C,SACdhhC,MAAOpX,EAAQy9B,OACfmE,aAAc5hC,EAAQqB,YACtBwgC,YAAa7hC,EAAQmB,aAIrB,YAAA02C,oBAAR,SAA4BC,GACxB,MAAO,CACH77C,KAAM67C,EAAgB3H,SACtBkI,OAAQP,EAAgB7E,UAGpC,EAnHA,GCDe,SAASqF,EACpBzS,EACAH,GAEA,IAAM6S,EAAwB,IAAI,IAAsB1S,GAClD2S,EAAsB,IAAI,IAAoBD,GAEpD,OAAO,IAAI,EAAsCC,EAAqB9S,G,cCR1E,WACI,WACYn1B,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAchB,OAXI,YAAAkyB,KAAA,SAAKrF,GAAL,WACI,OAAOt6B,KAAKwN,cACPG,WAAW,MAAK2sB,EAAW,WAAa,IAAE,sFAC1Ct7B,MAAK,WACF,IAAK,EAAKyO,QAAQioC,EACd,MAAM,IAAI,IAGd,OAAO,EAAKjoC,QAAQioC,MAGpC,EAjBA,G,ECAA,WACI,WACYloC,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAkyB,KAAA,SAAKrF,GAAL,WACI,OAAOt6B,KAAKwN,cACPG,WAAW,SAAQ2sB,EAAW,MAAQ,IAAE,gGACxCt7B,MAAK,WACF,IAAK,EAAKyO,QAAQkoC,KACd,MAAM,IAAI,IAGd,OAAO,EAAKloC,QAAQkoC,SAGpC,EAjBA,G,yDCCA,WACI,WACYj3C,GAAA,KAAAA,iBA4ChB,OAzCI,YAAAk3C,kBAAA,SAAkBC,EAAoBr/B,EAAkC,G,IAAEzW,QAAA,YAAAA,QAChEI,EAAM,oBAAoB01C,EAAU,WAE1C,OAAO71C,KAAKtB,eAAelH,IAAI2I,EAAK,CAAEqW,OAAM,EAAEzW,QAAO,KAGzD,YAAA+1C,mBAAA,SAAmBD,EAAoBr/B,EAAkC,G,IAAEzW,QAAA,YAAAA,QACjEI,EAAM,oBAAoB01C,EAAU,YAE1C,OAAO71C,KAAKtB,eAAelH,IAAI2I,EAAK,CAAEqW,OAAM,EAAEzW,QAAO,KAGzD,YAAAg2C,kBAAA,SAAkBF,EAAoBr/B,EAAmC,G,IAAEzW,QAAA,YAAAA,QACjEI,EAAM,oBAAoB01C,EAAU,WAE1C,OAAO71C,KAAKtB,eAAelH,IAAI2I,EAAK,CAAEqW,OAAM,EAAEzW,QAAO,KAGzD,YAAAi2C,aAAA,SAAaH,EAAoB,G,IAAE91C,QAAA,YAAAA,QACzBI,EAAM,oBAAoB01C,EAAU,YAE1C,OAAO71C,KAAKtB,eAAelH,IAAI2I,EAAK,CAAEJ,QAAO,KAGjD,YAAAozC,QAAA,SAAQ0C,EAAoB,G,IAAE91C,QAAA,YAAAA,QACpBI,EAAM,oBAAoB01C,EAAU,WAE1C,OAAO71C,KAAKtB,eAAelH,IAAI2I,EAAK,CAAEJ,QAAO,KAGjD,YAAAk2C,cAAA,SAAc,G,IAAEl2C,QAAA,YAAAA,QAGZ,OAAOC,KAAKtB,eAAelH,IAFf,yBAEwB,CAAEuI,QAAO,KAGjD,YAAAm2C,wBAAA,SAAwB,G,IAAEn2C,QAAA,YAAAA,QAGtB,OAAOC,KAAKtB,eAAe2Z,KAFf,oFAEyB,CAAEtY,QAAO,KAEtD,EA9CA,G,YCMA,WACI,WACYo2C,GAAA,KAAAA,+BAiFhB,OA9EI,YAAAP,kBAAA,SAAkBl2C,EAAkB8W,EAAkC5X,GAAtE,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAyBs3C,sCAAkCx2C,EAAW,CAAEF,SAAQ,KAE3G,EAAKy2C,6BAA6BP,kBAAkBl2C,EAAU8W,EAAQ5X,GACjEI,MAAK,SAAC,G,IAAE,IAAA/D,YAAA,IAAO,EAAP,KACL4D,EAASC,KAAK,uBAAa,KAAyB6nB,iCAAkC1rB,EAAM,CAAEyE,SAAQ,KACtGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAyB82C,8BAA+Bj7C,EAAU,CAAEsE,SAAQ,YAK7H,YAAAo2C,mBAAA,SAAmBp2C,EAAkB8W,EAAkC5X,GAAvE,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAyBw3C,uCAAmC12C,EAAW,CAAEF,SAAQ,KAE5G,EAAKy2C,6BAA6BL,mBAAmBp2C,EAAU8W,EAAQ5X,GAClEI,MAAK,SAAC,G,IAAE,IAAA/D,YAAA,IAAO,EAAP,KACL4D,EAASC,KAAK,uBAAa,KAAyB+nB,kCAAmC5rB,EAAM,CAAEyE,SAAQ,KACvGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAyBg3C,+BAAgCn7C,EAAU,CAAEsE,SAAQ,YAK9H,YAAAq2C,kBAAA,SAAkBr2C,EAAkB8W,EAAmC5X,GAAvE,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAyB03C,sCAAkC52C,EAAW,CAAEF,SAAQ,KAE3G,EAAKy2C,6BAA6BJ,kBAAkBr2C,EAAU8W,EAAQ5X,GACjEI,MAAK,SAAC,G,IAAE,IAAA/D,YAAA,IAAO,EAAP,KACL4D,EAASC,KAAK,uBAAa,KAAyB23C,iCAAkCx7C,EAAM,CAAEyE,SAAQ,KACtGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAyBm3C,8BAA+Bt7C,EAAU,CAAEsE,SAAQ,YAK7H,YAAAs2C,aAAA,SAAat2C,EAAkBd,GAA/B,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAyB63C,iCAA6B/2C,EAAW,CAAEF,SAAQ,KAEtG,EAAKy2C,6BAA6BH,aAAat2C,EAAUd,GACpDI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,KAAyBgoB,4BAA6B7rB,EAAM,CAAEyE,SAAQ,KACjGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAyBq3C,yBAA0Bx7C,EAAU,CAAEsE,SAAQ,YAKxH,YAAAyzC,QAAA,SAAQzzC,EAAkBd,GAA1B,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAyB+3C,oCAAgCj3C,EAAW,CAAEF,SAAQ,KAEzG,EAAKy2C,6BAA6BhD,QAAQzzC,EAAUd,GAC/CI,MAAK,WACFH,EAASC,KAAK,uBAAa,KAAyBg4C,oCAAgCl3C,EAAW,CAAEF,SAAQ,KACzGb,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAyBw3C,4BAA6B37C,EAAU,CAAEsE,SAAQ,YAK3H,YAAAiV,eAAA,SAAwDjV,EAAaqb,GACjE,OAAO,uBAAa,KAAyBgM,qBAAsBhM,EAAM,CAAErb,SAAQ,KAE3F,EAnFA,G,8BCDA,WACI,WACYs3C,EACAld,GADA,KAAAkd,yBACA,KAAAld,yBAqChB,OAlCI,YAAAmd,eAAA,SACI/D,EACAt0C,GAFJ,WAII,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAAmBykC,0BACnC,eAAK,EAAKF,uBAAuBC,eAAe/D,EAAat0C,IACxD4T,KACG,sBAAU,SAAC,G,IAAEvX,EAAA,EAAAA,KAAW,wBACpB,EAAK6+B,uBAAuB9kB,oBAAoBpW,EAAhD,CAAyD6T,GACzD,aAAG,uBAAa,KAAmB0kC,wBAAyBl8C,EAAK8f,aAG/EvI,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAmB63C,qBAAsB73C,SAItF,YAAA83C,gBAAA,SACIz4C,GADJ,WAGI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAAmB6kC,2BACnC,eAAK,EAAKN,uBAAuBK,gBAAgBz4C,IAC5C4T,KACG,sBAAU,SAAC,G,IAAEvX,EAAA,EAAAA,KAAW,wBACpB,EAAK6+B,uBAAuB9kB,oBAAoBpW,EAAhD,CAAyD6T,GACzD,aAAG,uBAAa,KAAmB4U,yBAA0BpsB,EAAK8f,aAGhFvI,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAmBg4C,sBAAuBh4C,SAG3F,EAxCA,G,GCLA,WACI,WACYb,GAAA,KAAAA,iBAchB,OAXI,YAAAu4C,eAAA,SAAe/D,EAAkC,G,IAAEnzC,QAAA,YAAAA,QAG/C,OAAOC,KAAKtB,eAAe2Z,KAFf,oCAEyB,CAAEtY,QAAO,EAAE9E,KAAMi4C,KAG1D,YAAAmE,gBAAA,SAAgB,G,IAAEt3C,QAAA,YAAAA,QAGd,OAAOC,KAAKtB,eAAe6Z,OAFf,oCAE2B,CAAExY,QAAO,KAExD,EAhBA,G,qBCDA,YACI,WAAYvF,GAAZ,MACI,YAAMA,GAAW,qBAAmB,K,OAEpC,EAAKtD,KAAO,sBACZ,EAAKgC,KAAO,kB,EAEpB,OAPiD,yBAOjD,EAPA,CAAiD,M,aCIjD,WAII,WACY6+B,EACAoB,EACAqe,EACArB,EACA3oC,GAJA,KAAAuqB,SACA,KAAAoB,8BACA,KAAAqe,+BACA,KAAArB,+BACA,KAAA3oC,gBAERxN,KAAKyN,QAAUgL,OAqGvB,OAlGI,YAAA7J,WAAA,SAAWhQ,GAAX,WACY,IAAA80C,OAAuBh0C,EAAA,EAAAA,SAE/B,IAAK+3C,IAAkB/3C,EACnB,MAAM,IAAI,KAAqB,wEAGnC,OAAOM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GAAS,WAAIhF,SAAQ,SAACY,EAAS+L,GAGjC,GAFA,EAAK4f,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IAEvD,EAAKk8B,eACN,MAAM,IAAI,IAAiB,IAAqB/hC,sBAG5C,QAAAojC,eAAA,IAAU,EAAV,eAaR,EAAKzvB,cAAc6lC,WAAW,EAAKzX,gBAZnB,WACZ,EAAK3B,oBAAoB,yCAClBwd,GAAa,CAChBxa,QAAS,SAAA19B,GACLyc,EAAOzc,GACP09B,EAAQ19B,OAIhB0Q,OAIC3Q,MAAM0c,SAEdhd,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAGI,OAFAh5B,KAAK47B,oBAAiBh8B,EAEfyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,6FAIR,YAAAE,QAAA,SAAQv0C,GACJ,IACM4J,EADQxI,KAAK+3B,OAAOzjB,WACJ9L,QAAQmlB,eAE9B,OAAKnlB,EAIExI,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,IAJvDyQ,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAQnC,YAAA2lB,oBAAR,SAA4Br7B,GAA5B,WACI,IAAKoB,KAAK47B,iBAAmB57B,KAAKyN,QAAQsmC,kBACtC,MAAM,IAAI,KAAoB,KAAwB/hC,wBAG1D,IAAKhS,KAAK47B,eAAepnB,OAAO6lB,WAC5B,MAAM,IAAI,IAAiB,IAAqBxgC,sBAG5C,IAAAuhB,EAAA,oBAAAA,mBAER,OAAO,IAAIpb,KAAKyN,QAAQsmC,kBAAkB7X,OAAOt9B,EAAQ+5B,UAAW34B,KAAK47B,eAAepnB,OAAO6lB,WAAY,CACvG6H,MAAOtjC,EAAQsjC,OAAS,OACxBwE,KAAM9nC,EAAQ8nC,MAAQ,QACtBxtC,KAAM,MACNw+C,sBAAsB,EACtBza,QAASr+B,EAAQq+B,QACjB/tB,cAAe,WACX,EAAKyoC,qBAAqBv8B,OAK9B,YAAAu8B,qBAAR,SAA6B/4C,GAA7B,WACIoB,KAAKm2C,6BAA6BF,gBAC7Bj3C,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL,IAAK,EAAKwS,QAAQimC,OACd,MAAM,IAAI,KAAoB,KAAwBzhC,wBAG1D,EAAKxE,QAAQimC,OAAOC,MAAMiE,UAAU,CAChCC,OAAO,EACPC,MAAO,6EACPzjC,MAAO,GAAGzV,EAAQm5C,YAAc98C,EAAKyB,OACtCkC,EAAQ20B,aAEX,EAAK4iB,6BAA6BD,8BAGlD,EAhHA,G,YCHA,WAGI,WACYne,EACAyf,EACAzd,GAFA,KAAAhC,SACA,KAAAyf,+BACA,KAAAzd,+BA2GhB,OAxGU,YAAAnrB,WAAN,SAAiBhQ,G,wIAGb,GAFQc,EAAwBd,EAAO,WAArBo5C,EAAcp5C,EAAO,WAGnC,MAAM,IAAI,KAAqB,2EAEnC,IAAKc,EACD,MAAM,IAAI,IAAiB,IAAqB7F,sBAEpD,SAAMmG,KAAK+5B,6BAA6BnrB,WAAWlP,I,OAGnD,OAHA,SACAM,KAAKg6B,cAAgBh6B,KAAKi6B,oBAAoB+d,EAAUrf,UAAWj5B,GAE5D,CAAP,EAAOM,KAAK+3B,OAAOzjB,oBAGvB,YAAA0kB,aAAA,WAMI,OALIh5B,KAAKg6B,eAAiBh6B,KAAKg6B,cAAcE,aACzCl6B,KAAKg6B,cAAcE,WAAWC,YAAYn6B,KAAKg6B,eAC/Ch6B,KAAKg6B,mBAAgBp6B,GAGlByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,mFAIF,YAAAE,QAAN,SAAcv0C,G,wIAIV,OAHMyV,EAAQrU,KAAK+3B,OAAOzjB,YACpB9L,EAAU6L,EAAM7L,QAAQmlB,gBAM9B,GAAM3tB,KAAK+5B,6BAA6Bke,QAAQzvC,EAAQY,aAH7C,CAAP,EAAOiG,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,a,OAKvC,OAFA,SAEO,CAAP,EAAOtU,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,aAI9D,YAAAq7B,oBAAR,SAA4B7Z,EAAqB1gB,GAC7C,IAAMi5B,EAAYtzB,SAAS+0B,eAAeha,GAE1C,IAAKuY,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAMtkB,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,GACtD8U,EAASH,EAAMG,OAAOkF,iBACtBrN,EAAOgI,EAAMhI,KAAKmJ,UAExB,IAAKhB,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAK2f,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAIhD,QAAA2a,OACI6lB,EAAA,EAAAA,WACAC,EAAA,EAAAA,SAEJ,IAAAlf,mBACImf,EAAA,EAAAA,iBACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,sBACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,+BAIR,IAAKN,EACD,MAAM,IAAI,KAAqB,8DAGnC,IAAMO,EAAsB,CACxBP,WAAU,EACVQ,UAAWP,EACXC,iBAAgB,EAChBC,eAAc,EACdE,OAAM,EACNI,YAAazuB,GAAgD,IAAxCA,EAAKhE,UAAUgD,cAAc/N,OAC9C,KAAsBy9B,QACtB,KAAsBC,WAC1BC,sBAAuB,CACnBv0B,OAAQ+zB,EACRt6B,IAAQqU,EAAOoG,aAAasgB,SAAQ,oBAAoBx7B,EAAQ,mBAChEi7B,+BAA8B,GAElCQ,UAAW,KAAqB+c,UAKpC,OAFAl4C,KAAK+5B,6BAA6BsB,aAAa,IAAIjb,EAAewa,GAE3DjC,GAEf,EAjHA,G,GCEA,WAII,WACYZ,EACA+B,EACAX,EACAgf,EACAX,EACAY,EACAC,GANA,KAAAtgB,SACA,KAAA+B,yBACA,KAAAX,8BACA,KAAAgf,iCACA,KAAAX,+BACA,KAAAY,yCACA,KAAAC,4BATJ,KAAAC,iBAA2B,wBA6IvC,OAjII,YAAA1pC,WAAA,SAAWhQ,GAAX,WACY,IAAA25C,sBAA4C74C,EAAA,EAAAA,SAEpD,IAAK84C,IAAwB94C,EACzB,MAAM,IAAI,KAAqB,uFAGnC,OAAOM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GACF,EAAKunB,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,GAE5D,IAAMwM,EAAWmI,EAAMnI,SAAS0I,cAC1B6E,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKxN,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAKmgB,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,IAAK,EAAKqiC,iBAAmB,EAAKA,eAAe/sB,YAC7C,MAAM,IAAI,IAAiB,IAAqBhV,sBAIhD,IAAA8+B,EAAA,EAAAA,UACA,IAAAsE,eAAA,IAAU,EAAV,eAGEwb,EAAc,CAChBtE,OAAQ16B,EAAYmB,aAAa89B,cACjCtE,iBAAiB,EACjB1rC,SAAUwD,EAASxD,SACnBkmC,aAAcn1B,EAAYtR,SAASG,MAGvC,OAAO+G,QAAQC,IAAI,CACf,EAAK+oC,0BAA0B1Y,KAAK,EAAK/D,eAAepnB,OAAO8lB,UAC/D,EAAK8d,uCAAuCxpC,WAAW,EAAKgtB,eAAe/sB,YAAa4pC,KAE3Fz5C,MAAK,SAAC,G,IAACuP,EAAA,KAAckqC,EAAA,KACZE,EAAe,EAAK1e,oBAAoBtB,EAAW,EAAK2f,kBAS9D,OAPA/pC,EAAaqqC,KAAKH,GAClBlqC,EAAaiF,GAAG,mBAAmB,SAACqlC,GAChC,SAAKC,2BAA2BD,GAC3Bv5C,OAAM,SAAAC,GAAS,OAAA09B,EAAQ19B,SAEhCgP,EAAaiF,GAAG,iBAAiB,SAAChN,EAAGjH,GAAU,OAAA09B,EAAQ19B,MAEhDo5C,KAEV35C,MAAK,SAAA25C,GAAkBA,EAAajc,MAAMyJ,WAAa,gBAE3DnnC,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,4FAIR,YAAAE,QAAA,SAAQv0C,GACJ,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ,wBAAyBv0C,KAI3E,YAAAo6B,aAAA,sBAGI,OAFAh5B,KAAK47B,oBAAiBh8B,EAEfI,KAAKo4C,uCAAuCpf,eAC9Ch6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGxB,YAAAwkC,2BAAR,SAAmCD,GAAnC,WACUxkC,EAAQrU,KAAK+3B,OAAOzjB,WAE1B,IAAKtU,KAAK47B,eACN,MAAM,IAAIjhC,MAAM,kCAGZ,0BAAAyC,GAER,OAAO4C,KAAK+3B,OAAOe,SACf94B,KAAKm4C,+BAA+B/E,mBAAkB,WAClD,OAAO,EAAKgF,uCAAuC7Y,cAC/CsZ,EACAxkC,EAAMiB,gBAAgBgE,qBACtBjF,EAAMhN,eAAe0R,qBAExB/Z,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAKgB,uBAAuB9kB,4BAClE,CAAEtV,SAAQ,IAAK,CAAEm5B,QAAS,uBAGzB,YAAAoB,oBAAR,SAA4B7Z,EAAqB24B,GAC7C,IAAMpgB,EAAYtzB,SAAS2zC,cAAc,IAAI54B,GAE7C,IAAKuY,EACD,MAAM,IAAIh+B,MAAM,wCAGpB,OAAQg+B,EAAUqgB,cAAc,IAAMD,IAClC/4C,KAAKi5C,0BAA0BtgB,EAAWogB,IAG1C,YAAAE,0BAAR,SAAkCtgB,EAAoBogB,GAClD,IAUMG,EAAqB7zC,SAASC,cAAc,OAOlD,OANA4zC,EAAmBxc,MAAMyJ,WAAa,SACtC+S,EAAmBC,UAAYJ,EAC/BG,EAAmBE,UAZI,ucAcvBzgB,EAAUyG,YAAY8Z,GAEfA,GAEf,EA/IA,G,GCEA,WAGI,WACYnhB,EACAoB,EACAqe,EACA6B,EACA36C,EACA88B,GALA,KAAAzD,SACA,KAAAoB,8BACA,KAAAqe,+BACA,KAAA6B,wBACA,KAAA36C,iBACA,KAAA88B,cA8HhB,OA3HI,YAAA5sB,WAAA,SAAWhQ,GAAX,WACY,IAAA06C,SAA2B55C,EAAA,EAAAA,SAEnC,IAAK65C,IAAoB75C,EACrB,MAAM,IAAI,KAAqB,0EAGnC,OAAOM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GACF,EAAKunB,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,GAE5D,IAAM2M,EAAOgI,EAAMhI,KAAKmJ,UAClBiE,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKrN,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAGpD,IAAKqgB,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,IAAK,EAAKqiC,iBAAmB,EAAKA,eAAexgB,mBAAmBo+B,iBAChE,MAAM,IAAI,KAAoB,KAAwBxqC,uBAGlD,IAAA2pB,EAAA,EAAAA,UAER,OAAO,EAAK0gB,sBAAsB1Z,KAAK,EAAK/D,eAAepnB,OAAO8lB,UAC7Dt7B,MAAK,SAAA22C,GACF,IAAM8D,EAAW9D,EAAK8D,SAEtBA,EAASC,UAAU,CACfC,SAAUlgC,EAAYmB,aAAa89B,gBAGnCe,EAASG,cACTH,EAASI,cAAc,CACnBphB,WAAY,CAACE,KAIrB8gB,EAASjmC,GAAGimC,EAASK,UAAUC,gBAAgB,WAC3C,EAAKhiB,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkBC,IACnEV,MAAK,WACF,IACM0H,EADQ,EAAKqxB,OAAOzjB,WACL6E,eAAeC,iBAAiB1Z,GAC/Cs6C,EAAYtzC,GAAUA,EAAO0U,oBAAsB1U,EAAO0U,mBAAmBo+B,iBAE/EQ,GACAP,EAASQ,cAAcD,SAKvCP,EAASjmC,GAAGimC,EAASK,UAAUI,mBAAmB,SAAC7nC,GAC/C,IACM3L,EADQ,EAAKqxB,OAAOzjB,WACL6E,eAAeC,iBAAiB1Z,GAC/Cy6C,EAAYzzC,GAAUA,EAAO0U,oBAAsB1U,EAAO0U,mBAAmBg/B,kBAE/ED,GACA,EAAKE,yBAAyBhoC,EAAS8nC,GAClCn7C,MAAK,WACF,EAAKs7C,0BAMhCt7C,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQv0C,GACJ,IACM4J,EADQxI,KAAK+3B,OAAOzjB,WACJ9L,QAAQmlB,eAE9B,OAAKnlB,EAIExI,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,IAJvDyQ,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAQnC,YAAA+lC,yBAAR,SAAiChoC,EAAiC8nC,GAC9D,IACMv7C,EAAU,CACZ1D,QAAS,CACL+E,OAAQ,YACR,eAAgB,oDAEpBhF,KAAM,CACFs/C,aAAcloC,EAAQkoC,aACtBH,kBAAmBD,GAEvBzzC,OAAQ,QAGZ,OAAO1G,KAAKtB,eAAe87C,YAbf,8DAagC57C,IAGxC,YAAA07C,YAAR,WACIt6C,KAAKw7B,YAAYmC,SAAS,gBAAiB,CACvCziC,QAAS,CACL+E,OAAQ,YACR,eAAgB,qCAEpBuW,OAAQ,CACJikC,cAAc,MAI9B,EAvIA,G,GCLA,WACI,WACY1iB,EACA2iB,GADA,KAAA3iB,SACA,KAAA2iB,yBAsBhB,OAnBI,YAAAzH,OAAA,SAAOC,EAAkCt0C,GACrC,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAK06C,uBAAuBzD,eAAe/D,EAAat0C,KAIhE,YAAAu0C,QAAA,SAAQv0C,GACJ,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAK06C,uBAAuBrD,gBAAgBz4C,KAIpD,YAAAgQ,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EAzBA,G,SCMqB,GAArB,WAGI,WACYyjB,EACAyf,EACAzY,EACAvD,GAHA,KAAAzD,SACA,KAAAyf,+BACA,KAAAzY,6BACA,KAAAvD,cA4GhB,OAzGI,YAAA5sB,WAAA,SAAWhQ,GAAX,WACYc,EAAA,EAAAA,SAEFi7C,EAAmB36C,KAAK46C,qBAAqBh8C,GAEnD,IAAKc,EACD,MAAM,IAAI,IAAiB,IAAqB7F,sBAGpD,OAAOmG,KAAK++B,2BAA2BnwB,WAAWlP,GAC7CV,MAAK,WACF,EAAKg7B,cAAgB,EAAKC,oBAAoB0gB,EAAiBhiB,cAElE35B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,sBAMI,OALIh5B,KAAKg6B,eAAiBh6B,KAAKg6B,cAAcE,aACzCl6B,KAAKg6B,cAAcE,WAAWC,YAAYn6B,KAAKg6B,eAC/Ch6B,KAAKg6B,mBAAgBp6B,GAGlBI,KAAK++B,2BAA2B/F,eAClCh6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQv0C,GACJ,IACM4J,EADQxI,KAAK+3B,OAAOzjB,WACJ9L,QAAQmlB,eAE9B,OAAKnlB,EAIExI,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,IAJvDyQ,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAQnC,YAAA2lB,oBAAR,SAA4B7Z,GACxB,IAAMuY,EAAYtzB,SAAS2zC,cAAc,IAAI54B,GAE7C,IAAKuY,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAMqH,EAAShgC,KAAK++B,2BAA2B1D,aAAar7B,KAAKm/B,0BAIjE,OAFAxG,EAAUyG,YAAYY,GAEfA,GAGH,YAAA4a,qBAAR,SAA6Bh8C,GACzB,GAAyB,qBAArBA,EAAQc,UAAmCd,EAAQi8C,iBACnD,OAAOj8C,EAAQi8C,iBAGnB,GAAyB,0BAArBj8C,EAAQc,UAAwCd,EAAQk8C,sBACxD,OAAOl8C,EAAQk8C,sBAGnB,GAAyB,uBAArBl8C,EAAQc,UAAqCd,EAAQm8C,mBACrD,OAAOn8C,EAAQm8C,mBAGnB,GAAyB,oBAArBn8C,EAAQc,UAAkCd,EAAQo8C,gBAClD,OAAOp8C,EAAQo8C,gBAGnB,MAAM,IAAI,MAIA,YAAA7b,yBAAd,SAAuC1J,G,wIACnCA,EAAM4J,iB,iBAGkB,O,sBAAA,GAAMr/B,KAAK++B,2BAA2BO,iB,OAC1D,OADMllB,EAAc,SACpB,GAAMpa,KAAK++B,2BAA2BQ,cAAcnlB,I,cAApD,SACIA,EAAY9E,gBACZ,GAAMtV,KAAK++B,2BAA2BS,sBAAsBplB,EAAY9E,kBADxE,M,OACA,S,iBAEJ,SAAMtV,KAAKy/B,4B,cAAX,S,aAEA,I,aAA+B,aAAlB,EAAMjlC,QACf,MAAM,E,qCAKV,YAAAilC,yBAAR,WACIz/B,KAAKw7B,YAAYmC,SAAS,gBAAiB,CACvCziC,QAAS,CACL+E,OAAQ,YACR,eAAgB,wCArB5B,sBADC,M,6CA0BL,EAnHA,G,aCJA,WAII,WACY83B,EACAoB,EACAqe,EACA9X,GAHA,KAAA3H,SACA,KAAAoB,8BACA,KAAAqe,+BACA,KAAA9X,0BA4FhB,OAzFI,YAAA9wB,WAAA,SAAWhQ,GAAX,WACY,IAAAghC,WAA+BlgC,EAAA,EAAAA,SAEvC,IAAKu7C,IAAsBv7C,EACvB,MAAM,IAAI,KAAqB,4EAGnC,OAAOM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GAGF,GADA,EAAKunB,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IACvD,EAAKk8B,iBAAmB,EAAKA,eAAexgB,mBAAmB1G,WAChE,MAAM,IAAI,IAAiB,IAAqB7a,sBAGpD,IAAMwS,EAAOgI,EAAMhI,KAAKmJ,UACxB,IAAKnJ,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAG5C,IAAAu/B,EAAA,EAAAA,UAEFtmB,EAAU,CACZqC,WAAY,EAAKknB,eAAexgB,mBAAmB1G,WACnDyrB,iBAAkB,EAAKvE,eAAexgB,mBAAmB+kB,iBACzDj/B,OAAQmL,EAAK+zB,WAAWt9B,WACxBqF,SAAUkE,EAAKlE,SAASG,KACxB+3B,OAAQh0B,EAAKjP,GACbkjC,yBAAyB,EACzBr3B,YAAa,aAAe,aAGhC,OAAO,EAAKy2B,wBAAwBC,KAAK,EAAK/D,eAAepnB,OAAO8lB,UAC/Dt7B,MAAK,SAAAk8C,GACF,EAAKpb,cAAgB,EAAK7F,oBAAoBtB,GAE9C,EAAKmH,cAAc1J,iBAAiB,SAAS,WACzC8kB,EAAWhvC,SAASmG,YAInCrT,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAQI,OAPAh5B,KAAK47B,oBAAiBh8B,EAElBI,KAAK8/B,eAAiB9/B,KAAK8/B,cAAc5F,aACzCl6B,KAAK8/B,cAAc5F,WAAWC,YAAYn6B,KAAK8/B,eAC/C9/B,KAAK8/B,mBAAgBlgC,GAGlByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA2+B,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQv0C,GACJ,IACM4J,EADQxI,KAAK+3B,OAAOzjB,WACJ9L,QAAQmlB,eAE9B,OAAKnlB,EAIExI,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,IAJvDyQ,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAQnC,YAAA2lB,oBAAR,SAA4B7Z,GACxB,IAAMuY,EAAYtzB,SAAS2zC,cAAc,IAAI54B,GAE7C,IAAKuY,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAMqH,EAAS36B,SAASC,cAAc,SAMtC,OAJA06B,EAAO9mC,KAAO,QACd8mC,EAAOC,IAAM,4EACbtH,EAAUyG,YAAYY,GAEfA,GAEf,EApGA,G,GCFA,WAEI,WACYjI,EACAyf,GADA,KAAAzf,SACA,KAAAyf,+BA6BhB,OA1BI,YAAAvE,OAAA,WACI,MAAM,IAAI,GACN,uFAIR,YAAAE,QAAA,SAAQv0C,GACJ,IACM4J,EADQxI,KAAK+3B,OAAOzjB,WACJ9L,QAAQmlB,eAE9B,OAAKnlB,EAIExI,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BrE,QAAQ3qC,EAAQY,WAAYxK,IAJvDyQ,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAQ3C,YAAA1F,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EAjCA,G,gBCGA,WACI,WACY6mC,GAAA,KAAAA,wBAiBhB,OAdI,YAAAC,cAAA,SAAcx8C,GAAd,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAAkB6kB,yBAE7C,EAAKw3B,sBAAsBC,cAAcx8C,GACpCI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,KAAkB4kB,uBAAwBtoB,EAASH,KAAK8f,OACnFlc,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAkBqkB,oBAAqBxoB,WAI5F,EAnBA,G,GCHA,WACI,WACYsD,EACA28C,GADA,KAAA38C,iBACA,KAAA28C,UAWhB,OARI,YAAAD,cAAA,SAAc,G,IAAEr7C,QAAA,YAAAA,QAEN7E,EAAU,CACZ,kBAAmB8E,KAAKq7C,QAAQlH,QAGpC,OAAOn0C,KAAKtB,eAAelH,IALf,kCAKwB,CAAE0D,QAAO,EAAE6E,QAAO,KAE9D,EAdA,G,GCGA,WACI,WACYrB,GAAA,KAAAA,iBAqChB,OAlCI,YAAA48C,UAAA,SAAUlzC,EAAiB,G,IAAA,kBAAErI,EAAA,EAAAA,QAASyW,EAAA,EAAAA,OAC5BrW,EAAM,0BAA0BiI,EAChClN,EAAU,CAAE+E,OAAQ,IAAYC,QAStC,OAAOF,KAAKtB,eAAelH,IAAI2I,EAAK,CAChCqW,OAAQ,CACJC,QAAS,YAAa,yBAVd,CACZ,WACA,sCACA,kCACA,qCACA,kCAOYD,GAAUA,EAAOC,SAAW,MAGxCvb,QAAO,EACP6E,QAAO,KAIf,YAAAw7C,YAAA,SAAYtgD,EAAgC,G,IAAE8E,QAAA,YAAAA,QAG1C,OAAOC,KAAKtB,eAAe2Z,KAFf,iCAEyB,CAAEpd,KAAI,EAAE8E,QAAO,KAGxD,YAAAy7C,cAAA,SAAcpzC,EAAiB,G,IAAErI,QAAA,YAAAA,QACvBI,EAAM,kCAAkCiI,EAE9C,OAAOpI,KAAKtB,eAAe2Z,KAAKlY,EAAK,CAAEJ,QAAO,KAEtD,EAvCA,G,GCJA,YACI,mBACI,YAAM,2DAA0D,K,OAEhE,EAAK7I,KAAO,kCACZ,EAAKgC,KAAO,gC,EAEpB,OAP6D,yBAO7D,EAPA,CAA6D,M,YCU7D,WACI,WACYuiD,EACAC,GADA,KAAAD,sBACA,KAAAC,qBAkIhB,OA/HI,YAAAJ,UAAA,SAAUlzC,EAAiBxJ,GAA3B,WACI,OAAO,IAAI,cAAW,SAACC,GACnBA,EAASC,KAAK,uBAAa,KAAgBolB,qBAE3C,EAAKu3B,oBAAoBH,UAAUlzC,EAASxJ,GACvCI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,KAAgBsf,mBAAoBhjB,EAASH,OACxE4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAgB6kB,gBAAiBhpB,WAMlF,YAAAugD,kBAAA,SAAkBvzC,EAAiBxJ,GAAnC,WACI,OAAO,IAAI,cAAW,SAACC,GACnBA,EAASC,KAAK,uBAAa,KAAgBqlB,6BAE3C,EAAKs3B,oBAAoBH,UAAUlzC,EAASxJ,GACvCI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,KAAgBilB,2BAA4B3oB,EAASH,OAChF4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAgB8kB,wBAAyBjpB,WAK1F,YAAAwgD,iBAAA,SAAiBh9C,GAAjB,WACI,OAAO,SAAA6T,GAAS,wBAAM,WAClB,IAAMrK,EAAU,EAAKyzC,mBAAmBppC,EAAM6B,YAE9C,IAAKlM,EACD,MAAM,IAAI,IAAiB,IAAqB1O,gBAGpD,OAAO,EAAK4hD,UAAUlzC,EAASxJ,QAIvC,YAAA28C,YAAA,SAAYlpC,EAA2BzT,GAAvC,WACI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAAgBqpC,uBAChC,iBAAM,WACF,IAAMznC,EAAQ5B,EAAM6B,WACdya,EAAiB1a,EAAMG,OAAOsa,oBAC9B5iB,EAAWmI,EAAMnI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,GAAI4S,EAAS6vC,uBACT,MAAM,IAAI,GAGd,OAAO,eACH,EAAKL,mBAAmBM,SAAS9vC,EAAUtN,GACtCI,MAAK,WAAM,SAAKy8C,oBAAoBF,YAAY,EAAKU,uBAClD5pC,EACAnG,EAASgwC,gBACTntB,GACDnwB,OACT4T,KACE,sBAAU,SAAApX,GAAY,wBAElB,EAAKkgD,UAAUlgD,EAASH,KAAK8f,KAAKhT,MAAMK,QAASxJ,GACjD,aAAG,uBAAa,KAAgBqlB,qBAAsB7oB,EAASH,KAAK8f,KAAM,yCAAK3f,EAASH,KAAKgE,MAAI,CAAEvC,MAAOtB,EAASF,QAAQwB,kBAGpI8V,KACC,uBAAW,SAAAjT,GAAS,oBAAiB,KAAgB48C,kBAAmB58C,UAKpF,YAAAi8C,cAAA,SAAcpzC,EAAiBxJ,GAA/B,WACI,OAAO,iBACH,aAAG,uBAAa,KAAgBw9C,yBAChC,eAAKp8C,KAAKy7C,oBAAoBD,cAAcpzC,EAASxJ,IAChD4T,KACG,sBAAU,SAAApX,GAAY,wBAClB,EAAKkgD,UAAUlzC,EAASxJ,GACxB,aAAG,uBAAa,KAAgBolB,uBAAwB5oB,EAASH,KAAK8f,aAGpFvI,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAgB88C,oBAAqB98C,QAI1E,YAAAs8C,mBAAR,SAA2BxnC,GACvB,IAAMtM,EAAQsM,EAAMtM,MAAMkR,WACpB/M,EAAWmI,EAAMnI,SAAS0I,cAEhC,OAAQ7M,GAASA,EAAMK,SAAa8D,GAAYA,EAAS9D,SAGrD,YAAA6zC,uBAAR,SACI5pC,EACA6pC,EACAntB,GAEQ,IAAAvmB,EAAA,EAAAA,QAAS,kCAEjB,OAAKA,EAQE,yCACAT,GAAK,CACRm0C,gBAAe,EACfntB,eAAc,EACdvmB,QAAS,CACL4R,YAAa5R,EAAQ4R,YACrBljB,KAAMsR,EAAQ9I,SACdyb,QAAS3S,EAAQ6Q,aAdd,yCACAtR,GAAK,CACRm0C,gBAAe,EACfntB,eAAc,KAe9B,EArIA,G,SCTA,ICNKutB,G,GDML,YACI,mBACI,YAAM,mEAAiE,K,OAEvE,EAAKplD,KAAO,oCACZ,EAAKgC,KAAO,kC,EAEpB,OAP+D,yBAO/D,EAPA,CAA+D,M,UCN/D,SAAKojD,GACD,oBACA,uCACA,kBACA,sBACA,kBACA,kDACA,0BACA,0BACA,cACA,2BACA,4BACA,kBACA,sBACA,kBACA,oBACA,oBACA,kBACA,iCACA,8CAIA,mCAIA,gDACA,qBACA,oBACA,sBACA,mDACA,wBACA,qCACA,kDACA,kDACA,4CACA,uBACA,iBACA,0BACA,sCACA,YACA,sBA1CJ,CAAKA,QAAmB,KA6CT,U,GC3Bf,WACI,WACYtJ,EACAuJ,EACAC,GAFA,KAAAxJ,oBACA,KAAAuJ,sBACA,KAAAC,+BA2IhB,OAxII,YAAAC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY,IAAA4J,eAAA,IAAU,EAAV,KAAyCoqB,EAAA,EAAAA,eAC3C3zB,EAAO,CAAES,SAAU8I,EAAQ9I,UAEjC,OAAO,SAAA+S,GAAS,wBACZ,EAAK+pC,6BAA6BC,SAAlC,CAA4ChqC,GAC5C,aAAG,uBAAa,KAA0ByS,sBAAkBtlB,EAAWX,IACvE,iBAAM,WACF,IAEIy9C,EAFEroC,EAAQ5B,EAAM6B,WAIpB,GAAID,EAAM7L,QAAQslB,sBAAsB8E,GAAiB,CACrD,IAAMlsB,EAAS2N,EAAM8E,eAAeC,iBAAiB5Q,EAAQ9I,SAAU8I,EAAQ6Q,WAE/E,IAAK3S,EACD,MAAM,IAAI,IAAiB,IAAqB7M,sBAGpD6iD,EAAW,EAAK1J,kBAAkB2J,YAAYj2C,QAE9Cg2C,EAAW,EAAK1J,kBAAkBx7C,IAAI,GAAoBolD,0BAG9D,OAAOF,EACFD,QAAQpqC,EAAS,yCAAKzT,GAAO,CAAEc,SAAU8I,EAAQ9I,SAAU2Z,UAAW7Q,EAAQ6Q,aAC9Era,MAAK,WAAM,8BAAa,KAA0BmmB,sBAAkBvlB,EAAWX,UAE1FuT,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAA0B+lB,cAAe/lB,EAAON,SAI7F,YAAA49C,SAAA,SAASj+C,GAAT,WACI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAA0B8S,oBAC1C,EAAKu3B,2BAA2BrqC,EAAO7T,GACvC,iBAAM,WACF,IAAMyV,EAAQ5B,EAAM6B,WACd,+BAAE,IAAAlL,kBAAA,IAAa,EAAb,KAAiB,IAAAiQ,iBAAA,IAAY,EAAZ,KACnB3S,EAAS2N,EAAM8E,eAAeC,iBAAiBhQ,EAAYiQ,GAEjE,IAAK3S,EACD,MAAM,IAAI,GAGd,OAAO,EAAKssC,kBAAkB2J,YAAYj2C,GACrCm2C,SAAS,yCAAKj+C,GAAO,CAAEc,SAAUgH,EAAOtJ,GAAIic,UAAW3S,EAAOyU,WAC9Dnc,MAAK,WAAM,8BAAa,KAA0BwmB,uBAAmB5lB,EAAW,CAAEF,SAAUgH,EAAOtJ,YAE9GoV,KACE,uBAAW,SAAAjT,GACP,IACMiJ,EADQiK,EAAM6B,WACE9L,QAAQmlB,eAE9B,OAAO,aAAiB,KAA0BhI,eAAgBpmB,EAAO,CAAEG,SAAU8I,GAAWA,EAAQY,mBAKpH,YAAAwF,WAAA,SAAWhQ,GAAX,WACYc,EAAA,EAAAA,SAAU2Z,EAAA,EAAAA,UAElB,OAAO,SAAA5G,GAAS,wBAAM,WAClB,IAAM4B,EAAQ5B,EAAM6B,WACd5N,EAAS2N,EAAM8E,eAAeC,iBAAiB1Z,EAAU2Z,GAE/D,IAAK3S,EACD,MAAM,IAAI,IAAiB,IAAqB7M,sBAGpD,OAAI6F,GAAY2U,EAAM+f,kBAAkBzS,cAAcjiB,GAC3C,kBAGJ,iBACH,aAAG,uBAAa,KAA0BmiB,yBAAqBjiB,EAAW,CAAEF,SAAQ,KACpF,EAAKszC,kBAAkB2J,YAAYj2C,GAC9BkI,WAAW,yCAAKhQ,GAAO,CAAEc,SAAQ,EAAE2Z,UAAS,KAC5Cra,MAAK,WAAM,8BAAa,KAA0B0iB,yBAAqB9hB,EAAW,CAAEF,SAAQ,WAEtG8S,KACC,uBAAW,SAAAjT,GAAS,oBAAiB,KAA0ByiB,iBAAkBziB,EAAO,CAAEG,SAAQ,UAI1G,YAAAs5B,aAAA,SAAap6B,GAAb,WACYc,EAAA,EAAAA,SAAU2Z,EAAA,EAAAA,UAElB,OAAO,SAAA5G,GAAS,wBAAM,WAClB,IAAM4B,EAAQ5B,EAAM6B,WACd5N,EAAS2N,EAAM8E,eAAeC,iBAAiB1Z,EAAU2Z,GAE/D,IAAK3S,EACD,MAAM,IAAI,IAAiB,IAAqB7M,sBAGpD,OAAI6F,IAAa2U,EAAM+f,kBAAkBzS,cAAcjiB,GAC5C,kBAGJ,iBACH,aAAG,uBAAa,KAA0BuiB,2BAAuBriB,EAAW,CAAEF,SAAQ,KACtF,EAAKszC,kBAAkB2J,YAAYj2C,GAC9BsyB,aAAa,yCAAKp6B,GAAO,CAAEc,SAAQ,EAAE2Z,UAAS,KAC9Cra,MAAK,WAAM,8BAAa,KAA0B4iB,2BAAuBhiB,EAAW,CAAEF,SAAQ,WAExG8S,KACC,uBAAW,SAAAjT,GAAS,oBAAiB,KAA0B6iB,mBAAoB7iB,EAAO,CAAEG,SAAQ,UAI5G,YAAA0zC,kBAAA,SAAkB1sC,EAA4B9H,GAC1C,IACMK,EAAO,CAAES,SADEd,GAAWA,EAAQc,UAGpC,OAAO,iBACH,aAAG,uBAAa,KAA0BqjB,8BAA0BnjB,EAAWX,IAC/E,iBAAM,WACF,OAAAyH,IAAS1H,MAAK,WAAM,8BAAa,KAA0BgkB,+BAA2BpjB,EAAWX,UAEvGuT,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAA0B4jB,wBAAyB5jB,EAAON,QAI/F,YAAA69C,2BAAR,SAAmCrqC,EAA8B7T,GAC7D,IACMsN,EADQuG,EAAM6B,WACGpI,SAAS0I,cAEhC,OAAI1I,GAAYA,EAAS9D,QACdpI,KAAKu8C,oBAAoBZ,kBAAkBzvC,EAAS9D,QAASxJ,GAGjE,mBAEf,EA/IA,G,WCZA,yBA+CA,OA9CI,YAAAuD,QAAA,SAAQ46C,EAAaC,GACjB,OAAO,mBACHh9C,KAAKi9C,WAAWF,GAChB/8C,KAAKi9C,WAAWD,KAIhB,YAAAC,WAAR,SAAmB5wC,GACf,MAAO,CACH+zB,WAAY/zB,EAAK+zB,WACjBj4B,SAAUkE,EAAKlE,SACf/K,GAAIiP,EAAKjP,GACTiL,UAAW,CACPiD,aAAce,EAAKhE,UAAUiD,aACxBwF,QACAosC,MAAK,SAACC,EAAOC,GACV,UAAGD,EAAMl5C,UAAYk5C,EAAMp7C,WAAYs7C,cAAc,GAAGD,EAAMn5C,UAAYm5C,EAAMr7C,cAEnFjB,KAAI,SAAAC,GAAQ,OACTyC,kBAAmBzC,EAAKyC,kBACxBS,UAAWlD,EAAKkD,UAChBtC,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,cAExB8K,iBAAkBR,EAAKhE,UAAUwE,iBAC5BiE,QACAosC,MAAK,SAACC,EAAOC,GAAU,UAAGD,EAAM//C,IAAKigD,cAAc,GAAGD,EAAMhgD,OAC5D0D,KAAI,SAAAC,GAAQ,OACTG,OAAQH,EAAKG,OACbW,UAAWd,EAAKc,cAExBwJ,cAAegB,EAAKhE,UAAUgD,cACzByF,QACAosC,MAAK,SAACC,EAAOC,GACV,UAAGD,EAAMl5C,UAAYk5C,EAAMp7C,WAAYs7C,cAAc,GAAGD,EAAMn5C,UAAYm5C,EAAMr7C,cAEnFjB,KAAI,SAAAC,GAAQ,OACTyC,kBAAmBzC,EAAKyC,kBACxBS,UAAWlD,EAAKkD,UAChBtC,SAAUZ,EAAKY,SACfI,UAAWhB,EAAKgB,UAChBu7C,aAAcv8C,EAAKu8C,oBAK3C,EA/CA,G,GCJA,YACI,mBACI,YAAM,2GAAyG,K,OAE/G,EAAKpmD,KAAO,mBACZ,EAAKgC,KAAO,e,EAEpB,OAP8C,yBAO9C,EAPA,CAA8C,M,GCS9C,WACI,WACY2a,GAAA,KAAAA,yBA+BhB,OA5BI,YAAAmoC,SAAA,SAAS9vC,EAAqBtN,GAA9B,WACI,IAAKsN,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,OAAO0G,KAAK6T,uBAAuBE,aAAa7H,EAAS9O,GAAIwB,GACxDI,MAAK,SAAA5D,GACF,IAAMmiD,EAAa,IAAI,GAEvB,KAAIrxC,EAAS4mB,qBAAuB13B,EAASH,KAAK63B,oBAC3C,EAAK0qB,gBAAgBtxC,EAASpD,QAAS1N,EAASH,KAAK6N,UACrD,EAAK20C,yBAAyBvxC,EAASW,iBAAkBzR,EAASH,KAAK4R,mBACvE0wC,EAAWp7C,QAAQ+J,EAASG,KAAMjR,EAASH,KAAKoR,OAKvD,MAAM,IAAI,OAId,YAAAmxC,gBAAR,SAAwBE,EAAoBC,GACxC,OAAO,mBAAQ,eAAID,EAAU,QAAS,eAAIC,EAAU,UAGhD,YAAAF,yBAAR,SAAiCG,EAAsCC,GACnE,OAAO,mBAAQ,eAAID,EAAmB,QAAS,eAAIC,EAAmB,UAE9E,EAjCA,G,iCCLA,YACI,mBACI,YAAM,0EAAyE,K,OAE/E,EAAK3mD,KAAO,2CACZ,EAAKgC,KAAO,0C,EAEpB,OAPsE,yBAOtE,EAPA,CAAsE,M,GCAtE,YACI,mBACI,YAAM,oEAAkE,K,OAExE,EAAKhC,KAAO,8CACZ,EAAKgC,KAAO,6C,EAEpB,OAPyE,yBAOzE,EAPA,CAAyE,M,GCAzE,YACI,mBACI,YAAM,2EAAyE,K,OAE/E,EAAKhC,KAAO,+BACZ,EAAKgC,KAAO,4B,EAEpB,OAP0D,yBAO1D,EAPA,CAA0D,M,GCE1D,WAEI,WACY4kD,GAAA,KAAAA,mBAqDhB,OAlDU,YAAAC,OAAN,SAAax+C,G,2IAET,IAAKS,KAAKg+C,mCAAmCz+C,GACzC,MAAMA,EAGV,SAAMS,KAAKi+C,YAAY1+C,EAAMtE,KAAKijD,2BAA2BnjC,KAAK7iB,M,OAElE,OAFA,SAEO,CAAP,EAAO8H,KAAK89C,iBAAiBrB,UACxBjqC,KAAK,gBAAK,IACVA,KAAK,sBAAU,SAAO,G,IAAEjT,EAAA,EAAAA,MAAO7C,EAAA,EAAAA,M,sGAC5B,GAAI6C,aAAiB,GACjB,MAAM,IAAI,GAGd,GAAIA,IAAU7C,EACV,MAAM,IAAI,GAGd,MAAO,CAAP,EAAO,CACHxD,KAAM,4BACN6hB,KAAM,CACFojC,yBAA0BzhD,eAGlCk5B,qBAGJ,YAAAqoB,YAAR,SAAoBG,GAChB,IAEIC,EAA2Bh5C,SAAS+0B,eAFL,8BAWnC,OARIikB,GAA4BA,EAAyBnkB,YACrDmkB,EAAyBnkB,WAAWC,YAAYkkB,IAGpDA,EAA2Bh5C,SAASC,cAAc,QACzBokC,aAAa,KARH,8BASnCrkC,SAASpK,KAAKmkC,YAAYif,GAEnBr+C,KAAK89C,iBAAiBne,KAXM,6BAW2Bye,IAG1D,YAAAJ,mCAAR,SAA2Cz+C,GACjC,aAAE2+C,EAAA,EAAAA,2BAER,MAAkB,+BAFkB,EAAA/iD,QAG7B+iD,GACoC,8BAApCA,EAA2BhlD,MAE1C,EAxDA,GCCA,cACI,WACYuU,QAAA,IAAAA,MAAkCgL,QAAlC,KAAAhL,UAMhB,OAHI,YAAAxV,OAAA,SAAOqmD,GACH,OAAO,IAAIt+C,KAAKyN,QAAQ8wC,iBAAiBD,IAEjD,EARA,G,WCHA,YACI,mBACI,YAAM,sFAAoF,K,OAE1F,EAAKpnD,KAAO,4BACZ,EAAKgC,KAAO,yB,EAEpB,OAPuD,yBAOvD,EAPA,CAAuD,M,GCAvD,YACI,mBACI,YAAM,qDAAmD,K,OAEzD,EAAKhC,KAAO,+BACZ,EAAKgC,KAAO,yB,EAEpB,OAP0D,yBAO1D,EAPA,CAA0D,M,GCa1D,WAMI,WACYslD,EACAC,GAFZ,WACY,KAAAD,8BACA,KAAAC,0BAERz+C,KAAK0+C,UAAY,oBAAQ,SAACC,EAAkCC,EAAiBjmB,GACzE,IAAMkmB,EAAS,IAAI,UAEnB,IAAKlmB,EACD,MAAM,IAAIh+B,MAmBd,OAhBA,EAAKmkD,UAAYH,EAAUxiB,OAAOxD,EAAUv7B,GAAI,CAC5CwhD,QAAO,EACPlY,KAAM,YACN4X,SAAU,WACNO,EAAO//C,KAAK,CACRpC,MAAOiiD,EAAUI,YAAY,EAAKD,aAEtCH,EAAUK,MAAM,EAAKF,YAEzB,iBAAkB,WACdD,EAAO//C,KAAK,CACRS,MAAO,IAAI,QAKhBs/C,IACR,CAAE18C,QAAS,SAAC88C,EAAGC,GAAM,OAAAD,IAAMC,KAkEtC,OA/DI,YAAAvf,KAAA,SAAKvf,EAAqBw+B,GAA1B,WACI,OAAO5+C,KAAKw+C,4BAA4B7e,OACnC3gC,MAAK,SAAA2/C,GACF,EAAKQ,QAAU,EAAKT,UAAUC,EAAWC,EAASv5C,SAAS+0B,eAAeha,IAE1E,EAAKg/B,WAAaT,MAI9B,YAAAlC,QAAA,sBACI,OAAO,iBAAM,WACT,IAAMoC,EAAS,EAAKM,QACdR,EAAY,EAAKS,WAEvB,IAAKP,IAAWF,EACZ,MAAM,IAAI,KAAoB,KAAwBzsC,8BAG1D,OAAO,iBAAM,WACT,IAAMmtC,EAAUh6C,SAAS2zC,cAAc,yBAEvC,OAAOqG,EAAU,aAAGA,GAAW,qBAAW,IAAI,OAE7C7sC,KACG,sBAAU,SAAAnX,GAAU,OAAAA,EAAOmX,KACvB,iBAtED,KAuEC,sBAAU,SAACjT,EAAOiD,GACd,OAAAA,EAvER88C,GAuE8B,aAAG//C,GAAS,qBAAWA,UAGrD,sBAAU,SAAA8/C,GAIN,OAHA,EAAKE,+BAA+BV,EAAQQ,GAC5CV,EAAUlC,QAAQ,EAAKqC,WAEhBD,KAEX,uBAAW,SAAAt/C,GAAS,oBAAG,CAAEA,MAAK,YAKtC,YAAAggD,+BAAR,SAAuC9pB,EAAiC4pB,GACpE,IAAMG,EAAkBH,EAAQI,cAEhC,IAAKD,EACD,MAAM,IAAI,GAGd,IAAM7mB,EAAY6mB,EAAgBC,cAElC,IAAK9mB,EACD,MAAM,IAAI,GAGd34B,KAAKy+C,wBAAwBxmD,QAAO,WAEG,WAA/B0gC,EAAU+D,MAAMyJ,YAChB1Q,EAAM32B,KAAK,CACPS,MAAO,IAAI,QAGpBmgD,QAAQ/mB,EAAW,CAAE72B,YAAY,EAAM69C,gBAAiB,CAAC,YAEpE,EApGA,G,GCjBA,WAGI,WACYnyC,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UA4BhB,OAzBI,YAAAkyB,KAAA,WAKI,OAJK3/B,KAAK4/C,eACN5/C,KAAK4/C,aAAe5/C,KAAK6/C,eAGtB7/C,KAAK4/C,cAGR,YAAAC,YAAR,sBAEUrpC,EAAS,CACX,uBACA,mBACFlW,KAAK,KAEP,OAAO,IAAI+O,SAAQ,SAACY,EAAS+L,GACzB,EAAKvO,QAAoB,cAAI,WAAM,OAAAwC,EAAQ,EAAKxC,QAAQqyC,aAExD,EAAKtyC,cAAcG,WAAW,qCAAqC6I,GAC9DlX,OAAM,SAAAC,GACH,EAAKqgD,kBAAehgD,EACpBoc,EAAOzc,UAI3B,EAjCA,GCKe,SAASwgD,GAAqBjd,GACzC,OAAO,IAAI,GACP,IAAI,GAA4BA,GAChC,IAAIkd,I,oCCRZ,YACI,WAAYxlD,GAAZ,MACI,YAAMA,GAAW,4EAA0E,K,OAE3F,EAAKtD,KAAO,yBACZ,EAAKgC,KAAO,sB,EAEpB,OAPoD,yBAOpD,EAPA,CAAoD,M,+BCkBpD,WAGI,WACIwpC,EACAud,EACQC,EACAC,EACAC,EACAC,EACAxZ,EACAyZ,EACAC,EACAtc,EACAC,EACAsc,GATA,KAAAN,QACA,KAAAC,eACA,KAAAC,eACA,KAAAC,sBACA,KAAAxZ,UACA,KAAAyZ,eACA,KAAAC,iBACA,KAAAtc,WACA,KAAAC,YACA,KAAAsc,kBAERxgD,KAAKqlC,QAAUhgC,SAASC,cAAc,UAEtCtF,KAAKqlC,QAAQpF,IAASyC,EAAI,qBAAqBud,EAAM,uEACrDjgD,KAAKqlC,QAAQ3I,MAAMsL,OAAS,OAC5BhoC,KAAKqlC,QAAQ3I,MAAM0F,OAAS,OAC5BpiC,KAAKqlC,QAAQ3I,MAAM+jB,SAAW,SAC9BzgD,KAAKqlC,QAAQ3I,MAAM+K,MAAQ,OA6InC,OA1II,YAAAiZ,QAAA,WACI,OAAO1gD,KAAKkgD,OAGhB,YAAAnb,OAAA,sBACUpM,EAAYtzB,SAAS+0B,eAAep6B,KAAKmgD,cAE/C,IAAKxnB,EACD,MAAM,IAAI,KAA6B,qEAM3C,OAHAA,EAAUyG,YAAYp/B,KAAKqlC,SAC3BrlC,KAAKugD,eAAepqB,SAEb,oBAAUn2B,KAAKqlC,QAAS,QAC1B7yB,KACG,sBAAU,SAAO,G,IAAE3L,EAAA,EAAAA,O,mIAGf,KAFM++B,EAAgB/+B,GAAWA,EAA6B++B,eAG1D,MAAM,IAAIjrC,MAAM,wDAKpB,OAFAqF,KAAKsgD,aAAaxqB,UAAU8P,GAE5B,GAAM5lC,KAAKsgD,aAAajoC,KAAK,CACzBnf,KAAM,KAAqBynD,gBAC3BtuC,QAAS,CACLuuC,mBAAoB5gD,KAAKqgD,oBACzBQ,eAAgB7gD,KAAKwgD,gBACrBM,SAAU9gD,KAAK+gD,eACfC,YAAahhD,KAAKogD,aAClBva,OAAQ7lC,KAAK6mC,QACb3tC,KAAM8G,KAAKkgD,QAEhB,CACCxqB,YAAa,KAAqBurB,gBAClCtrB,UAAW,KAAqBurB,gB,cAZpC,S,cAeJ,uBAAW,SAAA3hD,GACP,GAAI,EAAK4hD,oBAAoB5hD,GACzB,OAAO,EAAK6hD,wBAAwB7hD,GAGxC,MAAMA,KAEV,gBAAK,IACPq2B,aAGV,YAAA6P,OAAA,WACSzlC,KAAKqlC,QAAQoa,gBAIlBz/C,KAAKqlC,QAAQoa,cAActlB,YAAYn6B,KAAKqlC,SAC5CrlC,KAAKugD,eAAejqB,eAGlB,YAAA+qB,WAAN,SACIC,EACAvmC,G,sIAGI,O,sBAAA,GAAM/a,KAAKsgD,aAAajoC,KAAK,CACzBnf,KAAM,KAAqBqoD,gBAC3BlvC,QAAS,CAAEivC,OAAM,EAAEvmC,KAAI,IACxB,CACC2a,YAAa,KAAqB8rB,gBAClC7rB,UAAW,KAAqB8rB,gB,cALpC,S,aAQA,G,WAAIzhD,KAAK0hD,oBAAoB,GAAQ,CACjC,GAAiC,sBAA7B,EAAMrvC,QAAQ9S,MAAM+I,KACpB,MAAM,IAAI,GAAuB,EAAM+J,QAAQ9S,MAAM/E,SAGzD,GAAI,EAAM6X,QAAQjX,SACd,MAAM,aAA4B,EAAMiX,QAAQjX,UAGpD,MAAM,IAAIT,MAAM,EAAM0X,QAAQ9S,MAAM/E,SAGxC,MAAM,E,yBAIR,YAAAmnD,aAAN,W,sIACwB,SAAM3hD,KAAKsgD,aAAajoC,KAA+B,CACvEnf,KAAM,KAAqB0oD,mBAC5B,CACClsB,YAAa,KAAqBmsB,a,OAGtC,KANQxvC,EAAY,SAIlB,SAEWyvC,QACT,MAAM,IAAI,KAA4BzvC,EAAQhX,Q,kBAIxC,YAAA+lD,wBAAd,SAAsC3rB,G,+GAMlC,KALMssB,EAAY1b,OAAOrmC,KAAKikC,SAAS8B,QAlIjB,gBAuIJrjC,KAAKujC,MAAQ8b,EAxIT,IA4IlB,OAHA/hD,KAAKikC,SAAS+B,QAxII,YAwIoBtjC,KAAKujC,OAC3CjmC,KAAKkkC,UAAUxyB,QAAQ+jB,EAAMpjB,QAAQ9S,MAAMg0B,aAEpC,CAAP,EAAO,IAAIlkB,SAAQ,gBAGvB,MAAM,IAAI,GAAuBomB,EAAMpjB,QAAQ9S,MAAM/E,gBAGjD,YAAAumD,aAAR,sBAEUiB,EAAQ38C,SAASqzB,iBAAiB,wDAExC,OAAOp2B,MAAM/J,UAAUuY,MAAMha,KAAKkrD,GAC7Bh/C,QAAO,SAAA0I,GAAQ,MAJH,yBAIG,aAASA,EAAKnG,MAAMG,YACnC1C,QAAO,SAAA0I,GAAQ,yBAAO,EAAKm7B,SACvB/lC,KAAI,SAAA47B,GAAS,OAAAA,GAASA,EAAMulB,cAC5Bj/C,QAAO,SAACk/C,GAA6B,MAAkB,iBAAXA,KAC5CpxB,MAAK,SAAAoxB,GAAU,OAAAA,EAAOjlC,MAAM,OAAO6T,MAAK,SAAA55B,GAAQ,OAA+C,IAA/CwU,EAAKnG,KAAKE,QAAQvO,EAAKwa,QAAQ,IAAK,eAExF5Q,KAAI,SAAA4K,GAAQ,OAAAA,EAAKnG,SAGlB,YAAAm8C,oBAAR,SAA4BjsB,GACxB,OAAOA,EAAMv8B,OAAS,KAAqBuoD,cAGvC,YAAAN,oBAAR,SAA4B1rB,GACxB,OAAOA,EAAMv8B,OAAS,KAAqBgoD,cAEnD,EApKA,G,GCNA,WAII,WACYiB,EACA5B,EACA6B,EACAC,EACAC,GALZ,WACY,KAAAH,UACA,KAAA5B,iBACA,KAAA6B,sBACA,KAAAC,kBACA,KAAAC,mCAsEJ,KAAAC,aAAgE,SAAO,G,IAAElwC,EAAA,EAAAA,Q,qIAEzE,O,sBAAA,GAAMrS,KAAKg8C,Y,cAAX,S,aAIA,GAAmB,iC,YAAT9kD,KACN,MAAM,E,0BAIN,EAAmB8I,KAAKqiD,gBAAe,cAAhC,IAAG,UAAI,GAEdhwC,G,YAjFF,2BAAE,IAAAmwC,cAAA,IAAS,EAAT,UAAe,IAAAC,wBAAA,IAAmB,EAAnB,UAAyB,IAAAC,eAAA,IAAU,EAAV,UAAgB,IAAAC,kBAAA,IAAa,EAAb,UAEhE3iD,KAAKugD,eAAe/pB,YAAY,KAAqBosB,SAAS,SAAC,G,IAAEvwC,EAAA,EAAAA,QAAc,OAAAmwC,EAAOnwC,MACtFrS,KAAKugD,eAAe/pB,YAAY,KAAqBqsB,iBAAiB,SAAC,G,IAAExwC,EAAA,EAAAA,QAAc,OAAAowC,EAAiBpwC,MACxGrS,KAAKugD,eAAe/pB,YAAY,KAAqBssB,SAAS,SAAC,G,IAAEzwC,EAAA,EAAAA,QAAc,OAAAqwC,EAAQrwC,MACvFrS,KAAKugD,eAAe/pB,YAAY,KAAqBqrB,WAAW,SAAC,G,IAAExvC,EAAA,EAAAA,QAAc,OAAAswC,EAAWtwC,MAC5FrS,KAAKugD,eAAe/pB,YAAY,KAAqBusB,QAAS/iD,KAAKuiD,cAEnEviD,KAAKugD,eAAe/pB,YAAY,KAAqBqsB,iBAAiB,SAAC,G,IAAExwC,EAAA,EAAAA,QAAc,SAAK2wC,UAAY3wC,EAAQ+6B,YAChHptC,KAAKugD,eAAe/pB,YAAY,KAAqBysB,YAAY,SAAC,G,IAAE5wC,EAAA,EAAAA,QAAc,SAAK6wC,KAAO7wC,EAAQ8wC,OA0E9G,OAvEI,YAAAC,OAAA,WACI,OAAOpjD,KAAKkjD,MAGhB,YAAAG,YAAA,WACI,OAAOrjD,KAAKgjD,WAGV,YAAAje,OAAN,W,wIAMI,OALA/kC,KAAKugD,eAAepqB,SAEdlM,EAAQjqB,KAAKsjD,iBACbC,EAAc,mBAAQvjD,KAAKmiD,QAASl4B,GAE1C,GAAMA,EAAM8a,U,OACZ,OADA,SACA,GAAM11B,QAAQC,IAAIi0C,EAAYziD,KAAI,SAAA0iD,GAAc,OAAAA,EAAWze,c,cAA3D,S,YAGJ,YAAAU,OAAA,WACIzlC,KAAKugD,eAAejqB,aAEpBt2B,KAAKmiD,QAAQn7C,SAAQ,SAAAijB,GACjBA,EAAMwb,aAIR,YAAAge,OAAN,SAAapxC,G,wIAEE,O,sBAAA,GAAMrS,KAAKsjD,iBAAiBjC,WAC/BrhD,KAAKmiD,QAAQrhD,KAAI,SAAAmpB,GAAS,OAAAA,EAAMy2B,aAChC1gD,KAAKoiD,oBAAoBvpC,UAAUxG,K,OAFvC,MAAO,CAAP,EAAO,U,OAKkB,O,WAAA,GAAMrS,KAAKsiD,iCAAiCvE,OAAO,I,OAErE,OAFDxjC,EAAmB,SAElB,GAAMva,KAAKsjD,iBAAiBjC,WAC/BrhD,KAAKmiD,QAAQrhD,KAAI,SAAAmpB,GAAS,OAAAA,EAAMy2B,aAChC1gD,KAAKoiD,oBAAoBvpC,UAAUxG,EAASkI,K,OAFhD,MAAO,CAAP,EAAO,U,yBAOT,YAAAyhC,SAAN,W,gIACW,SAAMh8C,KAAKsjD,iBAAiB3B,gB,OAAnC,MAAO,CAAP,EAAO,kBAGH,YAAA2B,eAAR,WACI,IAAMr5B,EAAQjqB,KAAKmiD,QAAQ,GAE3B,IAAKl4B,EACD,MAAM,IAAI,KAA6B,oEAG3C,OAAOA,GAkBf,EA9FA,G,YCLA,WACI,WACY8N,GAAA,KAAAA,SAiChB,OA9BI,YAAAlf,UAAA,SAAUxG,EAAkCkI,GACxC,IAAMlG,EAAQrU,KAAK+3B,OAAOzjB,WACpBpI,EAAWmI,EAAMnI,SAAS0I,cAC1BJ,EAASH,EAAMG,OAAOka,YACtB9U,EAAiBvF,EAAMwF,YAAYC,qBACnC/R,EAAQsM,EAAMtM,MAAMkR,WACpBjR,EAAYqM,EAAMtM,MAAMkS,eACxBzR,EAAU,gBAAK6J,EAAQ+H,YAAa,WAAY,SAAU,WAAY,SACtElB,EAAgB7E,EAAM8E,eAAeC,iBAAiB/G,EAAQ3S,SAAU2S,EAAQgH,WAChF2B,EAAoB3G,EAAM8E,eAAea,wBACzCG,EAAYP,GAAkBpR,GAAW,aAAoBA,GAC5D6L,EAAM7L,QAAQ6R,kBAAiB,KAAKT,EAAeU,iBACtDjG,EAAM7L,QAAQ6R,kBAElB,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqBvgB,qBAGpD,MAAO,CACH2gB,iBAAgB,EAChBJ,UAAS,EACTjO,SAAQ,EACRsI,OAAM,EACNzM,MAAK,EACLC,UAAS,EACTQ,QAAO,EACP0Q,cAAa,EACb8B,kBAAiB,IAG7B,EAnCA,G,GCSA,WACI,WACY+c,GAAA,KAAAA,SAqDhB,OAlDI,YAAA9/B,OAAA,SAAOyqC,EAAcud,EAAgBrhD,GAArC,WAEU0iD,EADajqD,OAAOsJ,KAAK/B,EAAQ0iD,QACb1gD,QAAsB,SAACC,EAAQ3H,GACrD,IACMwqD,EADS9kD,EAAQ0iD,OACKpoD,GAE5B,OAAKwqD,EAIE,yBACA7iD,EAAM,CACT,IAAI,GACA6hC,EACAud,EACA/mD,EACAwqD,EAAatjC,YACbsjC,EAAa1C,aAAe,GAC5B0C,EAAa9C,oBAAsB,GACnChiD,EAAQinC,QAAU,GAClB,IAAI,KAAkBnD,GACtB,IAAI,KAAoBA,GACxB,IAAI,KA7BE,2BA8BNjqB,OAAOC,SACP,iBAAkBgrC,EACd,EAAKC,mBAAmBD,EAAatnD,mBACrCwD,KAnBDiB,IAsBZ,IAEH,OAAO,IAAI,GACPygD,EACA,IAAI,KAAoB5e,GACxB,IAAI,GAA+B1iC,KAAK+3B,QACxC,gBAAKn5B,EAAS,SAAU,UAAW,UAAW,mBAAoB,cAClE,IAAI,GAAgCmhD,GAAqB,mCAIzD,YAAA4D,mBAAR,SAA2BvnD,GACA,IACjBF,GAAaw0B,EADI,mCAAAA,mBACct0B,GAErC,IAAKF,EACD,MAAM,IAAI,IAAiB,IAAqB0nD,0BAGpD,OAAO1nD,GAEf,EAvDA,G,YCJA,WACI,WACY4hD,EACAp/C,GADA,KAAAo/C,mBACA,KAAAp/C,iBAiEhB,OA9DI,YAAAkQ,WAAA,SAAWhQ,GAAX,WACI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAAyBoP,yBAAqBjiB,IAC9D,iBAAM,kE,oFAYF,GAXMikD,EAA0BjlD,EAAUA,EAAQwhB,YAAc,0BAE3DxhB,GAAYyG,SAAS+0B,eAAeypB,MAC/BC,EAAwBz+C,SAASC,cAAc,QAC/BokC,aAAa,KAAMma,GACzCx+C,SAASpK,KAAKmkC,YAAY0kB,IAGxBzvC,EAAQ5B,EAAM6B,aACdmF,EAAcpF,EAAMG,OAAOkF,kBAG7B,MAAM,IAAI,IAAiB,IAAqBngB,uBAKpD,OAFM6kD,EAAmB3kC,EAAYsqC,iBAAiBC,uBAEtD,GAAMhkD,KAAK89C,iBAAiBne,KAAKkkB,EAAyBzF,I,OAE1D,OAFA,SAEO,CAAP,EAAO,uBAAa,KAAyB18B,iCAEnDlP,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAyByiB,iBAAkBziB,SAIxF,YAAAk9C,QAAA,sBACI,OAAO,SAAAhqC,GAAS,wBAAM,WACV,IACF,EADE,aAAAvG,SACF,qBAAE,IAAA9O,GAER,OAFwB,EAAA2+C,uBAMjB,iBACH,aAAG,uBAAa,KAAyB72B,sBAAkBtlB,IAC3D,EAAKgP,YAAL,CAAkB6D,GAClB,EAAKqrC,iBAAiBrB,UACjBjqC,KAAK,gBAAK,IACVA,KAAK,sBAAU,SAAO,G,IAAEjT,EAAA,EAAAA,MAAO7C,EAAA,EAAAA,M,mIAC5B,GAAI6C,aAAiB,GACjB,MAAMA,EAGV,GAAIA,IAAU7C,EACV,MAAM,IAAI,GAGG,SAAMsD,KAAKtB,eAAes9C,SAAStnC,EAAYhY,I,OAEhE,OAFQzB,EAAS,SAAqD,KAE/D,CAAP,EAAO,uBAAa,KAAyBkqB,iBAAkBlqB,gBAEzEuX,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAyB+lB,cAAe/lB,OAtBtE,uBA0BvB,EApEA,G,GCTA,WACI,WACYb,GAAA,KAAAA,iBAShB,OANI,YAAAs9C,SAAA,SAAStnC,EAAoBhY,EAAe,G,IAAEqD,QAAA,YAAAA,QACpCI,EAAM,6BAA6BuU,EAAU,mBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CAAElF,KAAM,CAAEyB,MAAK,GAAIxB,QAAO,EAAE6E,QAAO,KAEhF,EAXA,G,YCOA,WACI,WACYkkD,GAAA,KAAAA,4BAwBhB,OArBI,YAAAC,iBAAA,SAAiBtxB,EAAyBh0B,GAA1C,WACI,OAAO,SAAA6T,GAAS,wBACZ,aAAG,uBAAa,KAAsBmW,4BACtC,iBAAM,kE,gFAIF,GAHMvU,EAAQ5B,EAAM6B,aACdpI,EAAWmI,EAAMnI,SAAS0I,eAG5B,MAAM,IAAI,IAAiB,IAAqBtb,iBAGnC,SAAOs5B,EACpB5yB,KAAKikD,0BAA0BC,iBAAiBh4C,EAAS9O,GAAIwB,GAC7DoB,KAAKikD,0BAA0BE,kBAAkBj4C,EAAS9O,GAAIwB,I,OAElE,OAJQ3D,EAAS,SAE0D,KAEpE,CAAP,EAAO,uBAAa,KAAsB4tB,0BAA2B5tB,eAE3EuX,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAsBupB,uBAAwBvpB,SAG/F,EA1BA,G,GCPA,WACI,WACYb,GAAA,KAAAA,iBA4BhB,OAzBI,YAAAwlD,iBAAA,SAAiBxvC,EAAoB,G,IAAE3U,QAAA,YAAAA,QAC7BI,EAAM,6BAA6BuU,EAAU,gBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAAKlY,EAAK,CACjCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,SAKlC,YAAA0tC,kBAAA,SAAkBzvC,EAAoB,G,IAAE3U,QAAA,YAAAA,QAC9BI,EAAM,6BAA6BuU,EAAU,gBAC7CxZ,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe6Z,OAAOpY,EAAK,CACnCjF,QAAO,EACP6E,QAAO,EACPyW,OAAQ,CACJC,QAAS,YAAa,SAItC,EA9BA,G,gCCSA,WACI,WACY2tC,EACA7H,EACA8H,EACA/B,GAHA,KAAA8B,wBACA,KAAA7H,sBACA,KAAA8H,6BACA,KAAA/B,mCA0DhB,OAvDI,YAAAvmC,cAAA,SAAcvT,GAAd,WACI,OAAO,SAAAiK,GAAS,wBACZ,aAAG,uBAAa,KAAkB6xC,yBAClC,iBAAM,kE,8EAES,O,sBAAA,GAAMtkD,KAAKokD,sBAAsBroC,cACpC/b,KAAKqkD,2BAA2BxrC,UAAUrQ,EAASiK,EAAM6B,c,OAD7D,MAAO,CAAP,EAAO,U,OAIkB,O,WAAA,GAAMtU,KAAKsiD,iCAAiCvE,OAAO,I,OAErE,OAFDxjC,EAAmB,SAElB,GAAMva,KAAKokD,sBAAsBroC,cACpC/b,KAAKqkD,2BAA2BxrC,UAAU,yCAAKrQ,GAAO,CAAE+R,iBAAgB,IAAI9H,EAAM6B,c,OADtF,MAAO,CAAP,EAAO,U,2BAKV9B,KACG,sBAAU,SAAC,G,IAAEvX,EAAA,EAAAA,KAAW,wBACpB,EAAKshD,oBAAoBX,kBAAzB,CAA4CnpC,GAC5C,aAAG,uBAAa,KAAkB8R,uBAAwBtpB,UAGxEuX,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAkBglD,oBAAqBhlD,SAIpF,YAAA2c,yBAAA,SACIxc,EACA2Z,EACAjd,EACAooD,EACA39C,EACA49C,GANJ,WAQI,OAAO,SAAAhyC,GACH,IAAI2H,EAEAhe,EACAge,EAAc,CAAE5d,iBAAkB,CAAEC,aAAcL,IAC3CooD,IACPpqC,EAAc,CAAE5d,iBAAkB,CAAEkoD,yBAA0BF,KAGlE,IAAMnyC,EAAU,EAAKgyC,2BAA2BxrC,UAAU,CAAEQ,UAAS,EAAE3Z,SAAQ,EAAE0a,YAAW,GAAI3H,EAAM6B,YAEtG,OAAO,iBACH,aAAG,uBAAa,KAAkBqwC,oCAClCt1C,QAAQu1C,KAAK,CAAC,EAAKR,sBAAsBloC,yBAAyB7J,EAASxL,GAAS49C,GAASzhD,OAAO7G,UAC/F6C,MAAK,WAAM,8BAAa,KAAkB6lD,uCACjDryC,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAkBulD,+BAAgCvlD,SAIvG,EA/DA,G,gCCFA,YACI,WACYw4B,EACRn5B,GAFJ,MAII,YAAMA,IAAQ,K,OAHN,EAAAm5B,S,EAqEhB,OAvEqD,yBAQjD,YAAA4kB,YAAA,SAAYzjC,GACR,IAAKA,EACD,OAAOlZ,KAAKxI,MAGhB,IAAMkF,EAAQsD,KAAK+kD,UAAU7rC,GAEvB0zB,EAAa,CAAC1zB,EAAciC,QAASjC,EAAc9b,IACpD4F,QAAO,SAAApL,GAAS,OAAAA,WAChB0I,KAAK,KAEV,OAAON,KAAKxI,IAAIkF,EAAOkwC,IAGnB,YAAAmY,UAAR,SAAkB7rC,GACd,GAA8B,WAA1BA,EAAciC,QACd,OAAO,GAAoB6pC,SAG/B,IAAMtlD,EAAWwZ,EAAciC,SAAWjC,EAAc9b,GAExD,OAAI4C,KAAKilD,qBAAqBvlD,GACnBA,EAGPwZ,EAAchgB,OAAS,KAChB,GAAoB6D,QAG3BiD,KAAKklD,gBAAgBhsC,GACd,GAAoBisC,OAG3BjsC,EAAchgB,OAAS,KAChB,GAAoBksD,QAGxB,GAAoBC,aAGvB,YAAAJ,qBAAR,SACIvlD,GAEA,OAAOM,KAAK8sC,YAAYptC,IAGpB,YAAAwlD,gBAAR,SAAwBhsC,GACpB,IAAM1E,EAASxU,KAAK+3B,OAAOzjB,WAAWE,OAAOkF,iBAE7C,IAAKlF,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAG5C,IAAA+rD,EAAA,kBAAAA,2BAER,SAAKA,GAAwD,UAA1BpsC,EAAciC,SAAiD,gBAA1BjC,EAAciC,WAI9E,gBAAKmqC,GAA4B,SAAAloD,GACrC,OAAA8b,EAAc9b,KAAOA,GAAM8b,EAAciC,UAAY/d,MAGjE,EAvEA,CAAqD,KCVtC,SAASmoD,KACpB,MAAO,CACHC,YAAaC,OAAOC,YAAc,GAClCC,aAA+C,mBAA1BC,UAAUC,aAA6BD,UAAUC,cACtElM,SAAUiM,UAAUjM,UAAaiM,UAAkBE,aACnDC,cAAeN,OAAOrjB,OACtB4jB,aAAcP,OAAOhe,MACrBwe,kBAAkB,IAAIvjD,MAAOwjD,oBAAoBpjD,Y,ICT7CqjD,GA4BAC,GAIAC,GAcAC,GAIAC,G,YC3CZ,YACI,WAAYC,GAAZ,WACQhsD,EAAU,yE,OAEVgsD,IACAhsD,EAAaA,EAAO,2DAA2DgsD,EAAclmD,KAAK,MAAK,MAG3G,cAAM9F,IAAQ,MAETtD,KAAO,8B,EAEpB,OAZyD,yBAYzD,EAZA,CAAyD,M,GCAzD,YACI,WAAYsD,GAAZ,MACI,YAAMA,GAAW,mCAAiC,K,OAElD,EAAKtD,KAAO,8BACZ,EAAKgC,KAAO,oB,EAEpB,OAPyD,yBAOzD,EAPA,CAAyD,MFixB1C,SAASutD,GAAY9zC,GAChC,OAAOA,GAAmE,iBAAnDA,EAAMoI,KAAK7B,cAAcwtC,uBACa,iBAAlD/zC,EAAMoI,KAAK7B,cAAcytC,sBA1xBxC,SAAYR,GAKR,4CAKA,wCAKA,sBAKA,kBAKA,oBAzBJ,CAAYA,QAAe,KA4B3B,SAAYC,GACR,gCADJ,CAAYA,QAAkB,KAI9B,SAAYC,GACR,YACA,kBACA,oBACA,sBACA,gBACA,oBACA,4BACA,yBACA,0BACA,gBACA,4BAXJ,CAAYA,QAAsB,KAclC,SAAYC,GACR,cADJ,CAAYA,QAAU,KAItB,SAAYC,GACR,sCACA,gBACA,oCAHJ,CAAYA,QAAU,KG/BtB,ICnBYK,G,GDmBZ,WAOI,WACY7uB,EACA8uB,EACAtK,EACA/uC,EACAs5C,GAJA,KAAA/uB,SACA,KAAA8uB,wBACA,KAAAtK,sBACA,KAAA/uC,gBACA,KAAAs5C,UAwShB,OArSU,YAAAl4C,WAAN,SAAiBhQ,G,8IAGb,KAFQmoD,EAAYnoD,EAAO,SAGvB,MAAM,IAAI,KAAqB,oFAOf,OAJpBoB,KAAKgnD,0BAA4BD,EAE3B7tC,EAAgBlZ,KAAK+3B,OAAOzjB,WAAW6E,eAAeoY,wBAAwB3yB,EAAQc,UAE5F,EAAAM,KAAoB,GAAMA,KAAKwN,cAAcmyB,KAAK,CAC9CsnB,YAAc/tC,EAAckC,mBAAmB6rC,YAC/C9S,OAAQn0C,KAAK8mD,QACbI,UAAWhuC,EAAckC,mBAAmB8rC,UAC5CC,uBAAwBjuC,EAAckC,mBAAmB+rC,0B,OAGpC,OAPzB,EAAKC,aAAe,SAOpB,EAAApnD,KAAyB,GAAMA,KAAKqnD,uBAAuBnuC,I,cAA3D,EAAKouC,kBAAoB,SAErBpuC,EAAcxS,SAAW2/C,GAAuBkB,YAChDruC,EAAcxS,SAAW2/C,GAAuBmB,WADhD,OAEA,EAAAxnD,KAAkC,GAAMA,KAAKynD,oC,OAA7C,EAAKC,2BAA6B,S,iBAGtC,MAAO,CAAP,EAAOr4C,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,qBAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACX4R,EAAc5R,GAAWA,EAAQ4R,YACjCoqC,EAAuBpqC,GAAgBA,EAAiCoqC,qBAE9E,IAAKh8C,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WACF,IAAM2oD,EAAiB,EAAKC,gBAE5B,IAAKD,EACD,MAAM,IAAI,KAAoB,KAAwB34C,uBAG1D,GAAIoL,GAAe,aAAoBA,GAAc,CACjD,IAAIyW,EAAc,GAClB,GAAI41B,GAAYkB,GAAiB,CACvB,2BAAEE,EAAA,EAAAA,oBAAqBnB,EAAA,EAAAA,sBAE7B71B,EAAc,CACVi3B,gCAAiCD,EACjCE,aAJgD,EAAApB,qBAKhDqB,YALsE,EAAAC,oBAMtEC,mBAAoBxB,GAI5B,GAAID,GAAYkB,KHosBiC,IAF3C,CAAC,QAAS,kBAAmB,iBAAkB,WAEhDliD,QGpsB6CkiD,EHosB/B5sC,KAAK7B,cAAchgB,MGnsBlC,OAAO,EAAK6+B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAC9DvT,GAAO,CACV4R,YAAa,CACT5d,iBAAkB,CACdC,aAAc,yCACPo0B,GAAW,CACdn0B,MAAO0d,EAAYhe,eAEvB+rD,aAAc5C,WAOlC,OAAO,EAAKxtB,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,CACjErc,SAAU8I,EAAQ9I,SAClB0a,YAAa,CACT5d,iBAAkB,CACd4rD,kBAAmB,CACf1rD,MAAOqhC,KAAKC,UAAU,yCACf2pB,EAAe5sC,KAAK7B,eAAa,CACpCtT,OAAQ6S,OAAOC,SAAS9S,WAGhCuiD,aAAc5C,KACdb,yBAA0BF,UAKzCllD,OAAM,SAAAC,GAAS,SAAK8oD,yBAAyB9oD,EAAOilD,OAG7D,YAAA3H,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,WAWI,OAVIh5B,KAAKsnD,oBACLtnD,KAAKsnD,kBAAkBgB,UACvBtoD,KAAKsnD,uBAAoB1nD,GAGzBI,KAAK0nD,6BACL1nD,KAAK0nD,2BAA2BY,UAChCtoD,KAAK0nD,gCAA6B9nD,GAG/ByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAAi0C,gBAAR,WACI,IAAKvoD,KAAKonD,aACN,MAAM,IAAI,KAAoB,KAAwBp4C,uBAG1D,OAAOhP,KAAKonD,cAGR,YAAAoB,6BAAR,WACI,IAAKxoD,KAAKgnD,0BACN,MAAM,IAAI,KAAqB,sEAGnC,OAAOhnD,KAAKgnD,2BAGR,YAAAyB,gCAAR,WACY,IAAAC,EAAA,oDAAAA,WAER,OAAKA,GACM,MAMP,YAAAC,cAAR,SAAsBpuC,GAAtB,WACI,OAAO,IAAIlL,SAAQ,SAACY,EAAS+L,GACnB,uCAAE4sC,EAAA,EAAAA,oBAAqBC,EAAA,EAAAA,wBACrBC,EAAA,EAAAA,aAAc1oC,EAAA,EAAAA,YAAaokB,EAAA,EAAAA,OAAQH,EAAA,EAAAA,WACrC0kB,EAA2BhrB,KAAKgS,MAAMx1B,EAAiBnI,QAEvD42C,EAA4B,EAAKT,kBAAkBU,iBAAiBF,EAAa,CACnFG,oBAAqB,SAACC,GAClB,IAAMC,EAAiB,CACnB1pD,SAAUqpD,EAAYM,kBACtBjvC,YAAa,CACToZ,MAAOuK,KAAKC,UAAUmrB,EAAsBpuC,QAIhDspB,GACAA,IAGJp0B,EAAQm5C,IAEZ1iB,KAAM,EAAK+hB,kCACXxrB,QAAS,SAAC19B,GAAsB,OAAAyc,EAAOzc,MAGvCupD,GACAA,EAAaC,EAAY7vD,OAASitD,GAAgBmD,mBAC9CP,EAAY7vD,OAASitD,GAAgBoD,QAG7CP,EAA0BQ,MAAM,KAAIppC,GAAewoC,IAE/CpkB,GACAA,GAAO,WACHxoB,EAAO,IAAI,IACXgtC,EAA0BV,iBAMlC,YAAAb,gCAAR,eAGQgC,EAHR,OACU1C,EAAU/mD,KAAKwoD,+BACfkB,EAAc1pD,KAAKuoD,kBAGzB,OAAO,IAAIl5C,SAAQ,SAACY,EAAS+L,GACzB,GAAI+qC,EAAQ4C,4BAA6B,CACrCF,EAA4BC,EAAYzxD,OAAOmuD,GAAmBwD,cAAe,yCAC1E7C,EAAQnoD,SAAO,CAClBirD,SAAU,SAAAlC,GAAkB,SAAKmC,sBAAsBnC,IACvD1qB,QAAS,SAAA0qB,GAAkB,SAAKmC,sBAAsBnC,OAG1D,IACI8B,EAA0BD,MAAM,IAAIzC,EAAQ4C,6BAC9C,MAAOpqD,GACLyc,EAAO,IAAI,KAAoB,KAAwBhN,yBAI/DiB,EAAQw5C,OAIR,YAAApC,uBAAR,SAA+BnuC,GAA/B,IACQ6wC,EADR,OAEUhD,EAAU/mD,KAAKwoD,+BACfkB,EAAc1pD,KAAKuoD,kBAEzB,OAAO,IAAIl5C,SAAQ,SAACY,EAAS+L,GACzB,OAAQ9C,EAAcxS,QAClB,KAAK2/C,GAAuBkB,WAC5B,KAAKlB,GAAuB2D,IAC5B,KAAK3D,GAAuBmB,WACxBuC,EAAmBL,EAAYzxD,OAAOihB,EAAcxS,OAAQ,yCACjDqgD,EAAQnoD,SAAO,CAClBirD,SAAU,SAAAlC,GAAkB,SAAKmC,sBAAsBnC,OAI/D,IACIoC,EAAiBP,MAAM,IAAIzC,EAAQ3mC,aACrC,MAAO7gB,GACLyc,EAAO,IAAI,KAAoB,KAAwBhN,wBAG3D,MAEJ,KAAKq3C,GAAuB4D,QAC5B,KAAK5D,GAAuB6D,MAC5B,KAAK7D,GAAuB8D,KACxB,GAAKpD,EAAQqD,sBAcT,EAAKN,sBAAsB,CACvB/uC,KAAM,CACF7B,cAAe,CACXhgB,KAAMggB,EAAcxS,eAjBA,CAChCqjD,EAAmBL,EAAYzxD,OAAOihB,EAAcxS,OAAQ,yCACjDqgD,EAAQnoD,SAAO,CAClBirD,SAAU,SAAAlC,GAAkB,SAAKmC,sBAAsBnC,OAI/D,IACIoC,EAAiBP,MAAM,IAAIzC,EAAQ3mC,aACrC,MAAO7gB,GACLyc,EAAO,IAAI,KAAoB,KAAwBhN,yBAY/D,MAEJ,KAAKq3C,GAAuBgE,OAC5B,KAAKhE,GAAuBiE,OAC5B,KAAKjE,GAAuBkE,MAC5B,KAAKlE,GAAuBmE,YACxB,EAAKV,sBAAsB,CACvB/uC,KAAM,CACF7B,cAAe,CACXhgB,KAAMggB,EAAcxS,WAMxCuJ,EAAQ85C,OAIF,YAAA1B,yBAAd,SAAuC9oD,EAAgBilD,G,wIACnD,OAAMjlD,aAAiB,MAAkB,gBAAKA,EAAMtE,KAAKI,OAAQ,CAACiN,KAAM,+BAIxD,GAAMtI,KAAK2oD,cAAcppD,EAAMtE,KAAKwvD,gBAHzC,CAAP,EAAOp7C,QAAQ2M,OAAOzc,I,OAGpBiJ,EAAU,S,iBAGL,O,sBAAA,GAAMxI,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAc,yCACpEvT,GAAO,CACV4R,YAAa,yCACN5R,EAAQ4R,aAAW,CACtBoqC,qBAAoB,S,OAJ5B,MAAO,CAAP,EAAO,U,OAQP,O,WAAO,CAAP,EAAOxkD,KAAKqoD,yBAAyB,EAAO7D,I,yBAI5C,YAAAsF,sBAAR,SAA8BnC,GAC1B3nD,KAAK4nD,gBAAkBD,GAE/B,EApTA,G,GEbA,WACI,WACYn6C,EACAk9C,EACAj9C,QAAA,IAAAA,MAAA,QAFA,KAAAD,gBACA,KAAAk9C,oBACA,KAAAj9C,UAehB,OAZU,YAAAkyB,KAAN,SAAWgrB,G,gIACP,SAAMt7C,QAAQC,IAAI,CACdtP,KAAK0qD,kBAAkBE,eAAe,2BAA2BD,EAAc1D,YAAW,kDAC1FjnD,KAAKwN,cAAcG,WAAW,2BAA2Bg9C,EAAc1D,YAAW,oD,OAGtF,GALA,UAKKjnD,KAAKyN,QAAQo9C,cACd,MAAM,IAAI,IAGd,MAAO,CAAP,EAAO,IAAI7qD,KAAKyN,QAAQo9C,cAAcF,YAE9C,EAnBA,G,UDNA,SAAY/D,GACR,6DACA,+DAFJ,CAAYA,QAAa,K,iBEgBzB,WAGI,WACY7uB,EACAwkB,EACAsK,EACA1tB,EACA2xB,GAJA,KAAA/yB,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAA2xB,sBAoRhB,OAjRI,YAAAl8C,WAAA,SAAWhQ,GAAX,WACI,OAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBb,EAAQc,WAClFV,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiBxa,EAAQc,UAEpE,IAAKwZ,IAAkBA,EAAcrK,YACjC,MAAM,IAAI,IAAiB,IAAqBhV,sBAGlC,IAAAygC,EAAA,SAAAA,SAAY,IAAAzrB,YAE9B,OAAO,EAAKi8C,oBAAoBnrB,KAAKorB,EAAWzwB,MAEnDt7B,MAAK,SAAAgsD,GAGF,OAFA,EAAKC,QAAUD,EAER,EAAKjzB,OAAOzjB,eAI/B,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACUc,EAAW2S,EAAQ7J,SAAW6J,EAAQ7J,QAAQ9I,SAC5CkzB,EAAA,EAAAA,eACAq4B,EAAA,KAAAA,QAER,IAAKA,EACD,MAAM,IAAI,KAAoB,KAAwBj8C,uBAG1D,IAAKtP,EACD,MAAM,IAAI,GAA4B,CAAC,qBAG3C,IAAMwrD,EAAiB,yCAChBtsD,GAAO,CACV4X,OAAQ,CACJC,QAAS,CACLmwC,GAAcuE,wBACdvE,GAAcwE,2BAK1B,OAAOprD,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAY,CAAE3oB,eAAc,GAAIs4B,IAChFlsD,MAA4B,WAGzB,OAFAisD,EAAQ/+C,SAAS,EAAKm/C,2BAEf,IAAIh8C,SAAQ,SAACY,EAAS+L,GACzBivC,EAAQ/+C,SAASo/C,KAAK,CAClBC,OAAQ,SAACC,GACiB,aAAtBA,EAAWC,OAAwBzvC,EAAO,IAAI,IAAiCA,EAAO,IAAI,OAE9F0vC,UAAW,SAAAC,GAAmB17C,EAAQ07C,MAE1CV,EAAQW,GAAGrsD,MAAMiU,GAAG,SAAS,WACzBwI,EAAO,IAAI,aAItBhd,MAAK,SAAA6B,GACF,IAAMuoD,EAAiB,CACnB1pD,SAAQ,EACR0a,YAAa,CAAEoZ,MAAO3yB,EAAOgrD,iBAGjC,OAAO,EAAK9zB,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcqtC,QAIjF,YAAApwB,aAAA,WAKI,OAJIh5B,KAAKirD,UACLjrD,KAAKirD,aAAUrrD,GAGZyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAuoC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAAqvC,wBAAR,WACI,IAAMh3C,EAAQrU,KAAK+3B,OAAOzjB,WACpBE,EAASH,EAAMG,OAAOkF,iBACtBxc,EAAemX,EAAMnX,aAAa6Y,kBAClChO,EAAQsM,EAAMtM,MAAMkR,WAE1B,IAAKzE,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAKwO,EACD,MAAM,IAAI,IAAiB,IAAqBzO,iBAGpD,IAAM0H,EAAoB,IAAI,KAAkB+G,EAAMI,SAAS1H,eACzD4G,EAAiBrH,KAAK8rD,qBAE5B,MAAO,CACHC,SAAU,CACNC,sBAAuBx3C,EAAOwtC,MAAMiK,aACpCC,gBAAiB13C,EAAOwtC,MAAMiK,aAC9BE,6BAA8B,QAElCliD,SAAUjK,KAAKosD,uBAAyB/kD,EACxCuf,QAASvf,EACTa,MAAOlI,KAAKqsD,UAAUrrD,EAAmB+G,GACzCukD,SAAU,CACNC,cAAevsD,KAAKwsD,iBAAiBtvD,GACrCpF,KAAM,QACN20D,cAAe,cACfC,iBAAkB,GAClBC,gBAAiB,IAErBC,UAAW5sD,KAAK6sD,cAAc7rD,EAAmB+G,GACjDi6B,SAAUj6B,EAAMK,QAAUL,EAAMK,QAAQtF,WAAa,GACrDgqD,gBAAiB9rD,EAAkBM,UAAUyG,EAAMmC,mBACnD6iD,WAAY/rD,EAAkBM,UAAUyG,EAAMyC,UAC9CwiD,MAAOhsD,EAAkBM,UAAUyG,EAAM6C,eAIzC,YAAA4hD,iBAAR,SAAyBtvD,GACrB,IAAKA,EACD,MAAO,GAGX,IAAMiY,EAAcjY,EAAa,GAEjC,OAAOiY,GAAeA,EAAY8F,uBAC9B9F,EAAY8F,uBAAuB/hB,KAAO,IAG1C,YAAA4yD,mBAAR,WACI,IACMzkD,EADQrH,KAAK+3B,OAAOzjB,WACGjN,eAAe0R,oBAE5C,IAAK1R,EACD,MAAM,IAAI,IAAiB,IAAqBlO,uBAqBpD,MAlB2B,CACvBjC,KAAM,CACF+1D,MAAO5lD,EAAe9J,UACtB2vD,KAAM7lD,EAAe7J,SACrB2vD,KAAS9lD,EAAe9J,UAAS,IAAI8J,EAAe7J,UAExDP,QAAS,CACLyhC,MAAOr3B,EAAe1J,SACtBihC,MAAOv3B,EAAexJ,SACtBC,KAAMuJ,EAAevJ,KACrBuW,MAAOhN,EAAenJ,oBACtBkvD,QAAS/lD,EAAejJ,WACxBC,QAASgJ,EAAe/I,aAE5BkgC,aAAcn3B,EAAe9I,MAC7BmJ,MAAOL,EAAeK,QAMtB,YAAA0kD,oBAAR,WACI,IACM92C,EADQtV,KAAK+3B,OAAOzjB,WACIgB,gBAAgBgE,qBAE9C,GAAKhE,EAqBL,MAjB4B,CACxBpe,KAAM,CACF+1D,MAAO33C,EAAgB/X,UACvB2vD,KAAM53C,EAAgB9X,SACtB2vD,KAAS73C,EAAgB/X,UAAS,IAAI+X,EAAgB9X,UAE1DP,QAAS,CACLyhC,MAAOppB,EAAgB3X,SACvBihC,MAAOtpB,EAAgBzX,SACvBC,KAAMwX,EAAgBxX,KACtBuW,MAAOiB,EAAgBpX,oBACvBkvD,QAAS93C,EAAgBlX,WACzBC,QAASiX,EAAgBhX,aAE7BkgC,aAAclpB,EAAgB/W,QAM9B,YAAA8tD,UAAR,SAAkBrrD,EAAsC+G,GAGpD,IAFA,IAAMG,EAAsB,GAET,MAAAH,EAAMM,UAAUgD,cAAhB,eAA+B,CAA7C,IAAMtK,EAAI,KACXmH,EAAMuE,KAAK,CACP4gD,aAActsD,EAAK7J,KACnB6M,IAAKhD,EAAKgD,IACVupD,WAAYtsD,EAAkBM,UAAUP,EAAK4C,WAC7C4pD,IAAKxsD,EAAKY,SACV6rD,eAAgBzsD,EAAKE,SACrBwsD,SAAU1sD,EAAKZ,IACfutD,WAAY1tD,KAAK2tD,eAAe5sD,EAAK2sD,cAI7C,IAAmB,UAAA3lD,EAAMM,UAAUiD,aAAhB,eAA8B,CAAtCvK,EAAI,KACXmH,EAAMuE,KAAK,CACP4gD,aAActsD,EAAK7J,KACnB6M,IAAKhD,EAAKgD,IACVupD,WAAYtsD,EAAkBM,UAAUP,EAAK4C,WAC7C4pD,IAAKxsD,EAAKY,SACV6rD,eAAgBzsD,EAAKE,SACrBwsD,SAAU1sD,EAAKZ,IACfutD,WAAY1tD,KAAK2tD,eAAe5sD,EAAK2sD,cAI7C,IAAmB,UAAA3lD,EAAMM,UAAUwE,iBAAhB,eAAkC,CAA1C9L,EAAI,KACXmH,EAAMuE,KAAK,CACP4gD,aAActsD,EAAK7J,KACnB6M,IAAK,GACLupD,WAAYtsD,EAAkBM,UAAUP,EAAKG,QAC7CqsD,IAAK,EACLC,eAAgB,GAChBC,SAAU,KAIlB,GAAI1lD,EAAMM,UAAUuP,YAChB,IAAmB,UAAA7P,EAAMM,UAAUuP,YAAhB,eAA6B,CAArC7W,EAAI,KACXmH,EAAMuE,KAAK,CACP4gD,aAActsD,EAAK7J,KACnB6M,IAAKhD,EAAKgD,IACVupD,WAAYtsD,EAAkBM,UAAUP,EAAK2C,WAC7C6pD,IAAKxsD,EAAKY,SACV6rD,eAAgB,GAChBC,SAAU,KAKtB,OAAOvlD,GAGH,YAAA2kD,cAAR,SAAsB7rD,EAAsC+G,GAGxD,IAFA,IAAM6kD,EAA4B,GAEf,MAAA7kD,EAAMe,QAAN,eAAe,CAA7B,IAAM8kD,EAAI,KACPA,EAAK/kD,iBAAmB,IACxB+jD,EAAUgB,EAAKtlD,MAAQ,CACnBulD,gBAAiB7sD,EAAkBM,UAAUssD,EAAK/kD,kBAClDilD,sBAAuBF,EAAK/7C,cAYxC,OAPI9J,EAAMtE,eAAiB,IACvBmpD,EAAUmB,kBAAoB,CAC1BF,gBAAiB7sD,EAAkBM,UAAUyG,EAAMtE,gBACnDqqD,sBAAuB,aAIxBlB,GAGH,YAAAe,eAAR,SAAuBD,GACnB,OAAKA,EAIEA,EAAW5sD,KAAI,SAAAktD,GAAgB,OAAAA,EAAaltD,KAAI,SAAAmtD,GAAY,OAAAA,EAAS/2D,WAHlE,CAAC,KAKnB,EA5RA,GCbe,GAAAg3D,SAAS,mwBAAT,G,GCEf,WACI,WACWzgD,QAAA,IAAAA,MAAA,aAAAA,UAuBf,OApBI,YAAAkyB,KAAA,SAAKwuB,EAAiB7zB,GAClB,IAAM8zB,EAAYpuD,KAAKquD,cAAc/zB,GAIrC,GAFA,GAAa6zB,EAAQC,IAEhBpuD,KAAKyN,QAAQu9C,OACd,MAAM,IAAI,IAGd,OAAO37C,QAAQY,QAAQjQ,KAAKyN,QAAQu9C,SAGhC,YAAAqD,cAAR,SAAsB/zB,GAMlB,YANkB,IAAAA,OAAA,GAMXA,EAHM,4CADH,qCAMlB,EAzBA,G,GCSA,WAGI,WACYvC,EACA2jB,EACAa,EACAsK,EACA1tB,EACAm1B,EACAC,GANA,KAAAx2B,SACA,KAAA2jB,qBACA,KAAAa,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAAm1B,4BACA,KAAAC,wBAuGhB,OApGU,YAAA3/C,WAAN,SAAiBhQ,G,8IAMb,GALMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgB7E,EAAM8E,eAAeC,iBAAiBxa,EAAQc,SAAUd,EAAQya,WAChF7E,EAASH,EAAMG,OAAOkF,iBACtB80C,EAAmBh6C,EAASA,EAAOoG,aAAa20B,aAAe,IAEhEr2B,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGhC,OAApB,EAAAmG,KAAoB,GAAMA,KAAKuuD,sBAAsB5uB,KAAKzmB,EAAelZ,KAAKyuD,kBAAkBD,K,OAEhG,OAFA,EAAKE,aAAe,SAEb,CAAP,EAAO1uD,KAAK+3B,OAAOzjB,oBAGvB,YAAA0kB,aAAA,WAKI,OAJIh5B,KAAK0uD,eACL1uD,KAAK0uD,kBAAe9uD,GAGjByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGjC,YAAAmoC,QAAN,SAAcpqC,EAA2BzT,G,8IAGrC,KAFMiiC,EAAYxuB,EAAQ7J,SAAW6J,EAAQ7J,QAAQ6Q,WAGjD,MAAM,IAAI,GAA4B,CAAC,sB,OAGvChF,EAAQrU,KAAK+3B,OAAOzjB,WAClBE,EAASH,EAAMG,OAAOkF,iBACtB80C,EAAmBh6C,EAASA,EAAOoG,aAAa20B,aAAe,QAG9C3vC,KAFfgzB,EAAmBvgB,EAAO,gBAE9B,MACQ,GAAMrS,KAAK+3B,OAAOe,SACtB94B,KAAKsuD,0BAA0BpK,iBAAiBtxB,K,OADpDve,EAAQ,S,iBAKZ,SAAMrU,KAAK07C,mBAAmBM,SAAS3nC,EAAMnI,SAAS0I,cAAehW,I,OAE7D,OAFR,SAEQ,GAAMoB,KAAK+3B,OAAOe,SACtB94B,KAAKm5B,4BAA4B15B,kBAAkBohC,EAAWjiC,K,OAGlE,OAJAyV,EAAQ,SAIR,GAAMrU,KAAK2uD,oBAAoBH,EAAkBn6C,EAAM8E,eAAeC,iBAAiBynB,K,OAGvF,OAHA,SAGO,CAAP,EAAO,IAAIxxB,SAAe,wBAGxB,YAAAwtC,SAAN,SAAej+C,G,4IAKX,GAJMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpB9L,EAAU6L,EAAM7L,QAAQmlB,eACxBnZ,EAASH,EAAMG,OAAOC,oBAEvBjM,EACD,MAAM,IAAI,IAAiB,IAAqBlP,iBAGpD,IAAKkb,IAAWA,EAAOhM,QAAQ9L,MAC3B,MAAM,IAAI,IAAiB,IAAqBnD,uBAQpD,OALM6vD,EAAiB,CACnB1pD,SAAU8I,EAAQY,WAClBgR,YAAa,CAAEoZ,MAAOhf,EAAOhM,QAAQ9L,QAGzC,GAAMsD,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAY,GAAI38C,K,OAEpE,OAFA,SAEO,CAAP,EAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAcqtC,aAGjE,YAAAuF,oBAAR,SAA4BC,EAAqB11C,GAC7C,IAAKlZ,KAAK0uD,eAAiBx1C,IAAkBA,EAAcrK,YACvD,MAAM,IAAI,KAAoB,KAAwBG,uBAG1DhP,KAAK0uD,aAAa9/C,WAAW,CAAEtQ,YAAa0B,KAAKyuD,kBAAkBG,KACnE5uD,KAAK0uD,aAAaG,SAAS,CAAEnyD,MAAOwc,EAAcrK,eAG9C,YAAA4/C,kBAAR,SAA0BG,GACtB,OAAQA,GACR,IAAK,YACD,MAAO,KAEX,IAAK,cACD,MAAO,KAEX,IAAK,gBACD,MAAO,KAEX,QACI,MAAO,OAGnB,EAjHA,GCFME,GACI,0CADJA,GAEO,kDAGPC,GACI,0CADJA,GAEO,qD,GAIb,WACI,WACYvhD,GAAA,KAAAA,gBAuBhB,OAhBI,YAAAmyB,KAAA,SAAKj5B,EAAuBpI,GACxB,IAAMg8B,EAAW5zB,EAAO8N,OAAO8lB,WAAY,EACrC8zB,EAAYpuD,KAAKquD,cAAc/vD,EAAag8B,GAElD,OAAOt6B,KAAKwN,cAAcG,WAAWygD,GAChCpvD,MAAK,WAAM,OAACyZ,OAAqCu2C,aAGlD,YAAAX,cAAR,SAAsB/vD,EAAqBg8B,GACvC,MAAoB,OAAhBh8B,EACOg8B,EAAWy0B,GAAqBA,GAGpCz0B,EAAWw0B,GAA0BA,IAGpD,EAzBA,G,6BCjBe,SAASG,GAAuBtjC,EAAoCC,GAC/E,OAAO,mBAAQJ,GAAUG,GAAWH,GAAUI,IAGlD,SAASJ,GAAUvuB,GACf,ICRgC5E,EDQ1B62D,EAAc,CAAC,KAAM,gBAE3B,OAAQ73D,OAAOsJ,MCViBtI,EDUA4E,ECTzB,aAAS5E,GAAQ,SAACmO,EAAQtO,GAAgB,oBAAUA,ODSf,KACvC0I,QACG,SAACC,EAAQ3I,G,MAAQ,OAA8B,IAA9Bg3D,EAAYzpD,QAAQvN,IAAe+E,EAAQ/E,GAAM,yCACzD2I,KAAM,MAAG3I,GAAM+E,EAAQ/E,GAAI,IAChC2I,IACJ,IEbG,SAASsuD,GAAuBlyD,GAC3C,MAAO,CACHG,GAAIH,EAAQG,GACZG,UAAWN,EAAQM,UACnBC,SAAUP,EAAQO,SAClBC,QAASR,EAAQQ,QACjBE,SAAUV,EAAQS,aAClBG,SAAUZ,EAAQW,aAClBE,KAAMb,EAAQa,KACdE,gBAAiBf,EAAQc,SACzBG,oBAAqBjB,EAAQgB,aAC7BG,WAAYnB,EAAQkB,SACpBE,QAASpB,EAAQoB,QACjBC,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,MACfC,aAAcvB,EAAQuB,c,iBCC9B,WAMI,WACYu5B,EACAwkB,EACA6S,EACA5X,EACAhqC,GAJA,KAAAuqB,SACA,KAAAwkB,sBACA,KAAA6S,+BACA,KAAA5X,+BACA,KAAAhqC,gBAERxN,KAAKyN,QAAUgL,OACfzY,KAAKqvD,0BAA2B,EA4OxC,OAzOI,YAAAzgD,WAAA,SAAWhQ,GAAX,WACY,IAAA80C,OAAuBh0C,EAAA,EAAAA,SAEzBwZ,EADQlZ,KAAK+3B,OAAOzjB,WACE6E,eAAeC,iBAAiB1Z,GAE5D,IAAK+3C,EACD,MAAM,IAAI,KAAqB,mFAGnC,IAAKv+B,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAMpD,OAHAmG,KAAKsvD,eAAiB7X,EACtBz3C,KAAK47B,eAAiB1iB,EAEf,IAAI7J,SAAQ,SAACY,EAAS+L,GAOzB,EAAKxO,cAAc6lC,WAAWn6B,GANd,WACZ,EAAKq2C,cAAc9X,GACdz4C,KAAKiR,GACL3Q,MAAM0c,MAIV1c,MAAM0c,MAEVhd,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAGI,OAFAh5B,KAAKsvD,oBAAiB1vD,EAEfyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACU4wD,EAAcxvD,KAAKyvD,uBACnBC,EAAW1vD,KAAK2vD,iBAEtB,IAAKH,IAAgBE,EACjB,MAAM,IAAI,KAAoB,KAAwB1gD,uBAG1D,IAAKqD,EAAQ7J,QACT,MAAM,IAAI,KAAqB,kFAGnC,IAAKxI,KAAKqvD,yBACN,MAAM,IAAI,IAAiB,IAAqBx1D,sBAG5C,QAAA2O,QAAwB,GAAb,EAAA4R,YAAa,qCAAqBwY,EAAA,EAAAA,eAErD,OAAIh0B,GAAWoB,KAAK47B,gBAAkB57B,KAAK47B,eAAepnB,OAAOo7C,aACtD5vD,KAAK6vD,uBACRH,EACAF,EACApG,EAAe1pD,SACfkzB,EACAh0B,GAIDoB,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6BzB,kBAAkBqT,EAAe1pD,SAAU,CAAE8vD,YAAW,EAAE58B,eAAc,KAEzG5zB,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,EAAKyjB,oBAAoBhB,YAAY,yCAC9BlpC,GAAO,CACV7J,QAAS4gD,IACVxqD,OAENU,OAAM,SAAAC,GACH,OAAIA,aAAiB,MAAoC,0BAApBA,EAAMtE,KAAK/B,MAAoC,EAAKo2D,eAC9E,EAAKC,cAAc,EAAKD,gBAC1BtwD,MAAK,WAAM,OAAAqQ,QAAQ2M,OAAOzc,MAG5B8P,QAAQ2M,OAAOzc,OAIlC,YAAAs9C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAA2zC,eAAR,WACI,OAAO3vD,KAAK47B,gBAAkB57B,KAAK47B,eAAepnB,OAAO6lB,YAGrD,YAAAo1B,qBAAR,WACI,IACM/b,EADQ1zC,KAAK+3B,OAAOzjB,WACL+f,eAAezf,YAAY,UAEhD,OAAO8+B,EAASA,EAAO8b,iBAAc5vD,GAGjC,YAAAkwD,2CAAR,WACI,OAAO9vD,KAAK47B,eAAiB57B,KAAK47B,eAAexgB,mBAAmB20C,sBAAmBnwD,GAGnF,YAAA2vD,cAAR,SAAsB3wD,GAAtB,WACI,OAAO,IAAIyQ,SAAQ,SAACY,EAAS+L,GACjB,IAAA2c,EAAA,EAAAA,UAAW,IAAAsE,eAAA,IAAU,EAAV,UAAgB,IAAA+yB,uBAAA,IAAkB,EAAlB,UAAwB,IAAAC,eAAA,IAAU,EAAV,UACrDT,EAAc,EAAKC,wBAA0B,EAAKK,6CAClDz1B,EAAa,EAAKs1B,iBAExB,IAAKtqD,SAAS+0B,eAAezB,GACzB,OAAO3c,EAAO,IAAI,KAAqB,yEAG3C,IAAK,EAAKvO,QAAQsmC,kBACd,OAAO/3B,EAAO,IAAI,KAAoB,KAAwBhN,wBAGlE,IAAKqrB,EACD,OAAOre,EAAO,IAAI,IAAiB,IAAqBniB,uBAG5D,IAAMq2D,EAAwC,CAC1CC,uBAAwBX,EACxBY,OAAQ,CAAEC,WAAY,cACtBvY,MAAO,6EACP4X,SAAUr1B,EACV4C,QAAS,SAAA19B,GACLyc,EAAOzc,GACP09B,EAAQ19B,IAEZywD,gBAAiB,SAAAM,GACb,EAAKC,6BACAvxD,MAAK,WACF,EAAKqwD,0BAA2B,EAChCW,EAAgBM,MAEnBhxD,MAAM29B,IAEfgzB,QAAS,SAAAK,GACLrgD,IACAggD,EAAQK,KAIX,EAAKb,yBACNS,EAAcD,QAAU,SAAAK,GACpB,EAAKE,sBAAsBF,GACtBtxD,MAAK,WACFiR,IACAggD,EAAQK,MAEXhxD,MAAM29B,KAInB,IAAMwzB,EAAS,IAAI,EAAKhjD,QAAQsmC,kBAAkB2c,QAAQC,OAAOT,GAIjE,OAFAO,EAAOt4D,KAAKwgC,GAEL83B,MAIP,YAAAF,2BAAR,sBACUf,EAAcxvD,KAAKyvD,uBACnB/vD,EAAWM,KAAK47B,gBAAkB57B,KAAK47B,eAAex+B,GAE5D,IAAKsC,IAAa8vD,EACd,MAAM,IAAI,KAGd,OAAOxvD,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6B5B,kBAAkBl2C,EAAU,CAAE8vD,YAAW,KAE1ExwD,MAAK,SAAAqV,GACF,IAAMq/B,EAASr/B,EAAMggB,eAAezf,YAAY,UAC1Cg8C,EAAgBld,GAAUA,EAAO9sB,SAAW8sB,EAAO9sB,QAAQ3pB,QAC3DoK,EAAiBgN,EAAMhN,eAAe0R,oBACtC83C,EAAyBxpD,GAAkB,aAAqBA,GAEtE,IAAsB,IAAlBupD,EACA,MAAM,IAAI,KAGd,OAAKA,GAAiB3B,GAAuB2B,EAAeC,GAA0B,IAC3E,EAAK94B,OAAOzjB,WAGhB,EAAKyjB,OAAOe,SACf,EAAKs2B,6BAA6Bv4C,cAAcs4C,GAAuByB,SAK/E,YAAAJ,sBAAR,SAA8BF,GAC1B,OAAOtwD,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6B7iC,eAAe,SAAU,CACvD66C,YAAac,EAAeQ,gCAKhC,YAAAjB,uBAAR,SAA+BH,EAAkBF,EAAqB9vD,EAAkBkzB,EAAqCh0B,GAA7H,WACI,OAAO,IAAIyQ,SAAQ,SAAC7I,EAAGwV,GACnB,OAAK,EAAKvO,QAAQsmC,kBAIX,EAAKtmC,QAAQsmC,kBAAkBgd,qBAClCrB,EACAF,GACA,SAACwB,GACG,OAAO,EAAKj5B,OAAOe,SACf,EAAKyjB,oBAAoBhB,YAAY,CAAE3oB,eAAc,GAAIh0B,IAExDI,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,EAAK0e,6BAA6BzB,kBAAkBr2C,EAAU,CAC1D8vD,YAAW,EACX58B,eAAc,QAGrB5zB,MAAK,WAGF,OAFAgyD,EAAiBC,UAEV,IAAI5hD,SAAe,kBAE7B/P,OAAM,SAAAC,GAGH,OAFAyxD,EAAiBzxD,QAEVyc,EAAOzc,SAxBnByc,EAAO,IAAI,KAAoB,KAAwBhN,4BA8B9E,EA1PA,G,GCLA,WAII,WACY+oB,EACAm5B,EACA/3B,EACAojB,EACAsK,EACA9sB,GANZ,WACY,KAAAhC,SACA,KAAAm5B,gCACA,KAAA/3B,8BACA,KAAAojB,sBACA,KAAAsK,wBACA,KAAA9sB,+BAwFJ,KAAAo3B,gBAAkB,WACtB,IAAK,EAAKn3B,cACN,MAAM,IAAI,KAAoB,KAAwBhrB,uBAK1D,OAFA,EAAKgrB,cAAco3B,QAEZ,IAAI/hD,QAAe,UA2FlC,OAvLU,YAAAT,WAAN,SAAiBhQ,G,gJAGb,GAFQc,EAAwBd,EAAO,WAArBo5C,EAAcp5C,EAAO,WAGnC,MAAM,IAAI,KAAqB,2EAGrB,SAAMoB,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,K,OAG5F,GAHM2U,EAAQ,WACR6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,IAGxD,MAAM,IAAI,IAAiB,IAAqB7F,sBAGpD,SAAMmG,KAAK+5B,6BAA6BnrB,WAAWlP,I,OAWnD,OAXA,SAEQ2xD,EAAiBn4C,EAAckC,mBAAkB,aACnDk2C,EAAWtZ,EAAUuZ,aAEvBF,GAAgBC,EAChBtxD,KAAKwxD,gBAAgBF,EAAUD,EAAc,iBAE7CrxD,KAAKg6B,cAAgBh6B,KAAKi6B,oBAAoB+d,EAAUrf,UAAWzf,GAGhE,CAAP,EAAOlZ,KAAK+3B,OAAOzjB,oBAGjB,YAAAmoC,QAAN,SAAcgV,EAAgC7yD,G,kJAG1C,KAFQ4J,EAAYipD,EAAY,SAG5B,MAAM,IAAI,GAA4B,CAAC,YAK7B,OAFN/xD,EAAa8I,EAAO,SAEd,GAAMxI,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,K,OAG5F,GAHM2U,EAAQ,WACR6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,IAGxD,MAAM,IAAI,IAAiB,IAAqB7F,sB,OAG5Cw3D,EAAiBn4C,EAAckC,mBAAkB,eAG/CguC,EAAiB,CACnB1pD,SAAQ,EACR0a,YAAa,CAAEoZ,MAAO69B,IAG1B,GAAMrxD,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYkW,EAAc7yD,MAN9E,M,OAMA,S,iBAGW,O,sBAAA,GAAMoB,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAcqtC,K,OAA3E,MAAO,CAAP,EAAO,U,OAEP,I,sBAAqB,MAAsC,+BAAtB,EAAMnuD,KAAKE,OAC5C,MAAO,CAAP,EAAO,IAAIkU,SAAQ,WACfoJ,OAAOC,SAAShH,QAAQ,EAAMzW,KAAKijD,2BAA2BnjC,KAAK22C,kBAI3E,MAAM,E,OAId,MAAO,CAAP,EAAO1xD,KAAK2xD,oBAAoB3xD,KAAKmxD,0BAGzC,YAAAtU,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGxB,YAAAgd,aAAN,SAAmBmL,G,gIAMf,OALInkC,KAAKg6B,eAAiBh6B,KAAKg6B,cAAcE,aACzCl6B,KAAKg6B,cAAcE,WAAWC,YAAYn6B,KAAKg6B,eAC/Ch6B,KAAKg6B,mBAAgBp6B,GAGzB,GAAMI,KAAK+5B,6BAA6Bf,gB,OAExC,OAFA,SAEO,CAAP,EAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,qBAa/B,YAAAk9C,gBAAR,SAAwBp0D,EAAY48C,EAAmB4X,GAAvD,WACU5xB,EAAS36B,SAAS+0B,eAAeh9B,GAEvC,GAAK4iC,EAAL,CAIA,IAAM6xB,EAAQ7xB,EAAO8xB,WAAU,GAC/B9xB,EAAO+xB,YAAYF,GAEnBA,EAAMz7B,iBAAiB,SAAS,WAAM,SAAKu7B,qBAAoB,WAAM,WAAItiD,QAAQ,eAEjFrP,KAAK+5B,6BAA6Bi4B,WAAW50D,EAAI48C,EAAW4X,KAGxD,YAAAD,oBAAR,SAA4BrT,GACxB,OAAOt+C,KAAK+3B,OAAOe,SAAS94B,KAAKkxD,8BAA8B9d,mBAAkB,WAE7E,OAAIkL,EACOA,IAGJjvC,QAAQ2M,YACf,CAAE6c,QAAS,uBAGX,YAAAoB,oBAAR,SAA4B7Z,EAAqBlH,GAC7C,IAAMyf,EAAYtzB,SAAS+0B,eAAeha,GAE1C,IAAKuY,EACD,MAAM,IAAI,KAAqB,+DAGnC,IAAMtkB,EAAQrU,KAAK+3B,OAAOzjB,WACpBjI,EAAOgI,EAAMhI,KAAKmJ,UAClBhB,EAASH,EAAMG,OAAOkF,iBAE5B,IAAKlF,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAK2f,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAIhD,QAAA2a,OACI6lB,EAAA,EAAAA,WACAC,EAAA,EAAAA,SAEJ,IAAAlf,mBACImf,EAAA,EAAAA,iBACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,sBACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,+BAIR,IAAKN,EACD,MAAM,IAAI,IAAiB,IAAqBxgC,sBAGpD,IAAIihC,EAAc,KAAsBE,WAEpC3uB,GAAgD,IAAxCA,EAAKhE,UAAUgD,cAAc/N,SACrCw9B,EAAc,KAAsBC,SAGxC,IAAMH,EAAsB,CACxBP,WAAU,EACVQ,UAAWP,EACXC,iBAAgB,EAChBC,eAAc,EACdE,OAAM,EACNI,YAAW,EACXG,sBAAuB,CACnBv0B,OAAQ+zB,EACRt6B,IAAQqU,EAAOwtC,MAAMiQ,SAAQ,oBAAoB/4C,EAAc9b,GAAE,mBACjEu9B,+BAA8B,GAElCQ,UAAW,KAAqB+c,UAKpC,OAFAl4C,KAAK+5B,6BAA6BsB,aAAa,IAAIjb,EAAewa,GAE3DjC,GAEf,EApMA,G,GCZI,SAAY8rB,GAAZ,WACUyN,EAAc,IAAI7iD,SAAW,SAAC7I,EAAGwV,GACnC,EAAKm2C,OAASn2C,KAGlBhc,KAAKykD,QAAUp1C,QAAQu1C,KAAK,CAACH,EAASyN,K,YCS9C,WAII,WACYn6B,EACAwkB,EACAsK,GAFA,KAAA9uB,SACA,KAAAwkB,sBACA,KAAAsK,wBAuEhB,OApEU,YAAApK,QAAN,SAAcgV,EAAgC7yD,G,gJAG1C,KAFQ4J,EAAYipD,EAAY,SAG5B,MAAM,IAAI,GAA4B,CAAC,YAG3C,IAAKzxD,KAAKoyD,mBACN,MAAM,IAAI,KACN,KAAwBpjD,uBAIhC,SAAMhP,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYkW,EAAc7yD,K,OAQ9E,OARA,SAEM,EAAoBoB,KAAKoyD,mBAAvB5tB,EAAM,SAAE9H,EAAK,QACf21B,EAAQryD,KAAKsyD,cA5BP,iCA4BkC51B,GACxC+nB,EAAU,IAAI,GAA8B,IAAIp1C,QAAQ,UAE9Dm1B,EAAO6tB,GAAO,WAAM,OAAA5N,EAAQ0N,OAAO,IAAI,OAEhC,CAAP,EAAOnyD,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB3qC,yBACnD1T,EAAQ9I,SACR8I,EAAQ6Q,eACRzZ,GACA,EACAyyD,EAAMn7D,KACNutD,EAAQA,mBAIhB,YAAA5H,SAAA,SAASj+C,GACL,IAAMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpBvM,EAAQsM,EAAMtM,MAAMkR,WACpB9d,EAASkZ,EAAM7L,QAAQolB,mBAE7B,OAAI7lB,GAAU5M,IAAW,MAAkCA,IAAW,KAI/DkU,QAAQ2M,OAAO,IAAI,IAHfhc,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBf,cAAczzC,EAAMK,QAASxJ,KAM1F,YAAAgQ,WAAA,SAAWhQ,GAGP,OAFAoB,KAAKoyD,mBAAqBxzD,GAAWA,EAAQ0sB,WAEtCjc,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAAg+C,cAAR,SAAsBp7D,EAAcwlC,GAChC,IAAM0I,EAAS//B,SAASC,cAAc,UAItC,GAFA8/B,EAAOluC,KAAOA,EAEVwlC,EAAO,CACC,IAAAsL,EAAA,EAAAA,OAAQ5F,EAAA,EAAAA,OAAQqF,EAAA,EAAAA,MAExBrC,EAAO1I,MAAMsL,OAASA,EACtB5C,EAAO1I,MAAM0F,OAASA,EACtBgD,EAAO1I,MAAM+K,MAAQA,EAGzB,OAAOrC,GAEf,EA9EA,GCRA,I,GAAA,WACI,WACYrN,EACAwkB,EACAsK,GAFA,KAAA9uB,SACA,KAAAwkB,sBACA,KAAAsK,wBAuChB,OApCI,YAAAj4C,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGjC,YAAAmoC,QAAN,SAAcpqC,EAA2B8xB,G,4IAGrC,GAFQ37B,EAAsB6J,EAAO,QAAjBtK,EAAK,iBAAKsK,EAAxB,cAED7J,EACD,MAAM,IAAI,GAA4B,CAAC,YAK3C,GAFQ9I,EAA0B8I,EAAO,SAAvB4R,EAAgB5R,EAAO,aAEpC9I,EACD,MAAM,IAAI,IAAiB,IAAqB7F,sBAGpD,IAAKugB,ICnCFje,QDmC8Bie,ECnCUoZ,ODoCvC,MAAM,IAAI,IAAiB,IAAqB75B,gBAGpD,SAAMqG,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOo8B,K,OAEvE,OAFA,SAEO,CAAP,EAAOnkC,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAc,CACjErc,SAAQ,EACR0a,YAAW,cAInB,YAAAyiC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAElC,EA3CA,GEWA,I,GAAA,WAMI,WAAYpd,GACF,8BAAEygD,EAAA,EAAAA,QAASkT,EAAA,EAAAA,aAAcC,EAAA,EAAAA,YAE/BxyD,KAAKyyD,SAAWpT,EAChBr/C,KAAK0yD,cAAgBH,EACrBvyD,KAAK2yD,aAAeH,EAgI5B,OA7HI,YAAAxtB,KAAA,SAAKpmC,GAAL,WAEQoB,KAAK2yD,aAAalT,gBAItBz/C,KAAK4yD,eAAeh0D,GAEpByG,SAASpK,KAAKmkC,YAAYp/B,KAAK2yD,cAG/B9pB,YAAW,WAAM,SAAK4pB,SAAS/1B,MAAM0K,QAAU,SAGnD,YAAAyrB,OAAA,sBACS7yD,KAAK2yD,aAAalT,gBAInBz/C,KAAK8yD,kBACL9yD,KAAK8yD,mBAGT9yD,KAAK+yD,yBAELlqB,YAAW,WAAM,SAAK4pB,SAAS/1B,MAAM0K,QAAU,SAG3C,YAAA4rB,gBAAR,SAAwBp0D,GACpB,IASI2zD,EACAU,EACAC,EACAC,EAZE9T,EAAUh6C,SAASC,cAAc,OACjC,QACF,IAAA8tD,kBAAA,IAAa,EAAb,uBACA,IAAAh2D,UAAA,IAAK,EAAL,oBACA,IAAAi2D,0BAAA,IAAqB,EAArB,MACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,UAEAf,EAAcnT,EAUlB,GAJIjiD,IACAiiD,EAAQjiD,GAAKA,GAGbm2D,EAAW,CACX,IAAMC,EAAcnuD,SAASC,cAAc,OAC3C6tD,EAAsB/1D,EAAE,gBACxBo2D,EAAYra,UAAYga,EACxBK,EAAYp0B,YAAYm0B,GAExBlU,EAAQjgB,YAAYo0B,GAkBxB,OAfIF,IACAJ,EAAgB91D,EAAE,WAClBm1D,EAAeltD,SAASC,cAAc,QACzB6zC,UAAa+Z,EAE1BD,EAAiB71D,EAAE,YACnBo1D,EAAcntD,SAASC,cAAc,QACzB6zC,UAAY8Z,EAExBT,EAAYpzB,YAAYigB,GACxBmT,EAAYpzB,YAAYmzB,IAG5BC,EAAYpzB,YC/FL,SAAyBxgC,GAC5B,IAAAxB,EAAA,EAAAA,GAAIg2D,EAAA,EAAAA,WAAYC,EAAA,EAAAA,mBAAoBJ,EAAA,EAAAA,YAAaE,EAAA,EAAAA,iBAAkBD,EAAA,EAAAA,WACrErtB,EAASxgC,SAASC,cAAc,SAChCmuD,EAAiBR,EAAc,MAAMA,EAAgB,GAqE3D,OAnEAptB,EAAOzoC,GAAQA,EAAE,WACjByoC,EAAO3sC,KAAO,WACd2sC,EAAO6tB,UAAY,cACZt2D,EAAKq2D,EAAc,wNASnBr2D,EAAE,uCACqBi2D,EAAkB,yCAC1BD,EAAU,8CAK5BD,IACAttB,EAAO6tB,WAAa,mBACZt2D,EAAE,qJAKFA,EAAE,KAAK+1D,EAAgB,0KAS/BD,IACArtB,EAAO6tB,WAAa,kBACbt2D,EAAE,gEAGF61D,EAAW,KAAKC,EAAU,mSAU1BD,EAAW,KAAKC,EAAU,aAAaD,EAAW,KAAKC,EAAU,+OAQjED,EAAW,KAAKC,EAAU,sFAG1BD,EAAW,KAAKC,EAAU,kFAM9BrtB,EDuBqB8tB,CAAgB,CAAEv2D,GAAE,EAAEg2D,WAAU,EAAEC,mBAAkB,EAAEJ,YAAW,EAAEE,iBAAgB,EAAED,WAAU,KAEhH,CAAE7T,QAAO,EAAEkT,aAAY,EAAEC,YAAW,IAGvC,YAAAoB,kBAAR,SAA0BvU,EAAuBhe,GACxCge,GAAYhe,GAIjBge,EAAQjpB,iBAAiB,QAASiL,IAG9B,YAAAwyB,qBAAR,SAA6BxU,EAAuBhe,GAC3Cge,GAAYhe,GAIjBge,EAAQ9oB,oBAAoB,QAAS8K,IAGjC,YAAAuxB,eAAR,SAAuBh0D,GAAvB,WAKI,GAJIoB,KAAK8yD,kBACL9yD,KAAK8yD,mBAGLl0D,EAAS,CACD,QAAAyiC,QAAS,IAAAyyB,aAEjB9zD,KAAK4zD,kBAAkB5zD,KAAKyyD,SAAU,GACtCzyD,KAAK4zD,kBAAkB5zD,KAAK0yD,cAAe,GAE3C1yD,KAAK8yD,iBAAmB,WACpB,EAAKe,qBAAqB,EAAKpB,SAAU,GACzC,EAAKoB,qBAAqB,EAAKnB,cAAe,GAC9C,EAAKI,sBAAmBlzD,KAK5B,YAAAmzD,uBAAR,sBACUgB,EAA2C,SAAAt+B,GAEG,YAA3CA,EAA0Bu+B,eAI3B,EAAKrB,aAAalT,eAClB,EAAKkT,aAAaE,SAGtB,EAAKJ,SAASl8B,oBAAoB,gBAAiBw9B,KAGvD/zD,KAAKyyD,SAASr8B,iBAAiB,gBAAiB29B,IAExD,EA3IA,G,GEAA,WAGI,WACYz4B,EACA24B,GADA,KAAA34B,uBACA,KAAA24B,WAiIhB,OA9HI,YAAArlD,WAAA,SAAWC,EAAqBjQ,GAC5BoB,KAAKs7B,qBAAqB1sB,WAAWC,GACrC7O,KAAKk0D,qBAAuBt1D,GAAWA,EAAQmP,cAGnD,YAAAomD,cAAA,WACI,OAAOn0D,KAAKs7B,qBAAqBnsB,aAGrC,YAAAilD,aAAA,SAAa5rD,EAAkCnB,GACnC,IAAA+S,EAAA5R,EAAA4R,YACFi6C,EAAcr0D,KAAKs0D,iBAAiBl6C,EAAqC/S,GAE/E,OAAOrH,KAAKs7B,qBAAqBvsB,YAC5B/P,MAAK,SAAA6O,GAAU,OAAAA,EAAOsK,QAAQk8C,MAC9Br1D,MAAK,SAAC,GAAoB,OACvBw0B,MADK,EAAA+gC,YACc,GAAG/gC,WAIlC,YAAArlB,OAAA,SAAO,GAAP,WAASq2C,EAAA,EAAAA,qBAAsB,+CAC3B,OAAOxkD,KAAKs7B,qBAAqBnsB,YAC5BnQ,MAAK,SAAAmP,GAKF,OAJA,EAAK8lD,SAASjvB,KAAK,CACf3D,QAAS,WAAM,OAAAlzB,EAAOqmD,iBAGnBrmD,EAAOqmC,SAAS,oBACnBnX,uBAAuB,EACvBD,KAAMonB,EAAuB,QAAU,WACvCiQ,WAAY,UACTjgD,OAGVxV,MAAK,SAAA5D,GAGF,OAFA,EAAK64D,SAASpB,SAEPz3D,KAEVkE,OAAM,SAAAC,GAGH,MAFA,EAAK00D,SAASpB,SAERtzD,MAIlB,YAAAm1D,WAAA,SAAWlsD,EAAkCnB,EAAyBnG,GAClE,IAAKlB,KAAKk0D,qBACN,MAAM,IAAI,KAAoB,KAAwBllD,uBAGpD,gCAAE2lD,EAAA,EAAAA,SAAUC,EAAA,EAAAA,YAElB,OAAOvlD,QAAQC,IAAI,CACftP,KAAKo0D,aAAa5rD,EAASnB,GAC3BrH,KAAKs7B,qBAAqB7rB,WAC3BzQ,MAAK,SAAC,G,IAACob,EAAA,KAAarM,EAAA,KACXylB,EAAA,EAAAA,MACFqhC,EAAmB,WAAM,OAAA9mD,EAAa8mD,mBACvC71D,MAAK,SAAA5D,GAGF,OAFA05D,EAAa3C,OAAO,IAAI,IAEjB/2D,MAGT05D,EAAe,IAAI,GACrB/mD,EAAa2mD,WAAW,CACpBC,SAAU,SAACp1D,EAAO6lC,GACduvB,EAASp1D,EAAO6lC,EAAQyvB,IAE5B3zD,OAAM,EACNsyB,MAAK,EACLohC,YAAW,KAInB,OAAOE,EAAarQ,YAI5B,YAAAsQ,aAAA,WACI,OAAO/0D,KAAKs7B,qBAAqB3rB,mBAC5B3Q,MAAK,SAAC,GAAmB,OAAjB,EAAA+Q,eAMjB,YAAAilD,gBAAA,SAAgBC,GAAhB,WACI,OAAOA,EACFj2D,MAAK,SAAAob,GAAe,OAAA/K,QAAQC,IAAI,CAAC8K,EAAa,EAAKkhB,qBAAqB3rB,wBACxE3Q,MAAK,SAAC,G,IAACob,EAAA,KAAerK,EAAA,KAAAA,WAAkB,OAAC,kBAAD,CAAC,sBAAKqK,GAAW,CAAElb,gBAAiB6Q,QAGrF,YAAAipB,aAAA,WACI,OAAOh5B,KAAKs7B,qBAAqBtrB,YAG7B,YAAAskD,iBAAR,SAAyBY,EAAkC7tD,GACvD,IAAI8tC,EAAgB9tC,EAAe1J,SAMnC,OAJI0J,EAAexJ,WACfs3C,EAAgB,IAAI9tC,EAAexJ,UAGhC,CACHkd,KAAM,CACFm6C,WAAY,CACRC,eAAgBD,EAAWt5C,OAC3B05B,OAAQ4f,EAAW35C,SACnB65C,IAAKF,EAAW75C,MAChBg6C,eAAmBH,EAAWx5C,SAAS/K,MAAK,IAAIukD,EAAWx5C,SAAS9K,KACpEhS,QAAS,CACLo9C,UAAU,GAEd30C,eAAgB,CACZunD,YAAavnD,EAAehJ,QAC5BD,WAAYiJ,EAAejJ,WAC3B+2C,cAAa,KAIzBmgB,SAAU,+BACV5uD,OAAQ,SAGpB,EAtIA,GCdA,I,GAAA,YACI,WAAYlM,GAAZ,MACI,YAAMA,GAAW,qGAAmG,K,OAEpH,EAAKtD,KAAO,2BACZ,EAAKgC,KAAO,gC,EAEpB,OAPsD,yBAOtD,EAPA,CAAsD,MCQtD,I,GAAA,WAGI,WACY6+B,EACAwkB,EACAsK,EACA1tB,EACAo8B,GAJA,KAAAx9B,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAAo8B,6BA4FhB,OAzFI,YAAA3mD,WAAA,SAAWhQ,GAAX,WACI,OAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBb,EAAQc,WAClFV,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiBxa,EAAQc,UAEpE,IAAKwZ,IAAkBA,EAAcrK,YACjC,MAAM,IAAI,IAAiB,IAAqBhV,sBAMpD,OAHA,EAAK07D,2BAA2B3mD,WAAWsK,EAAcrK,YAAajQ,EAAQgP,WAC9E,EAAK4nD,cAAgBt8C,EAAc1E,OAAOo7C,aAEnC,EAAK73B,OAAOzjB,cAEtBhV,OAAM,SAACC,GAAiB,SAAKk2D,aAAal2D,OAGnD,YAAAk9C,QAAA,SAAQgV,EAAgC7yD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK+3B,OAAOe,SACf94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IAE3CI,MAAK,SAAAqV,GACF,OAAAA,EAAM7L,QAAQslB,sBAAsB/lB,EAAM6qB,iBAAmBpqB,EACzD,EAAKktD,oBAAoBltD,GACzB6G,QAAQY,QAAQzH,MAEvBxJ,MAAK,SAAAwJ,GACF,SAAKuvB,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcvT,OAEjElJ,OAAM,SAACC,GAAiB,SAAKk2D,aAAal2D,OAGnD,YAAAs9C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,sBACI,OAAOh5B,KAAKu1D,2BAA2Bv8B,eAClCh6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGxB,YAAAmhD,aAAR,SAAqBl2D,GACjB,GAAmB,mBAAfA,EAAMrI,KACN,MAAM,IAAI,GAAyBqI,EAAM/E,SAG7C,MAAM+E,GAGF,YAAAo2D,iBAAR,SAAyBv7C,GACrB,OC9EEnJ,ED8EmBmJ,EC5EjB,aAAoBnJ,IACD,iBAAhBA,EAAK2K,QACa,iBAAlB3K,EAAKsK,UACa,iBAAlBtK,EAAKyK,UACmB,iBAAxBzK,EAAKyK,SAAS/K,OACS,iBAAvBM,EAAKyK,SAAS9K,KD2Ed,aAAoBwJ,GAHhBje,QAAQie,EAAYoqC,sBChFxB,IACLvzC,GDqFE,YAAAykD,oBAAR,SAA4BltD,GAChB,IAAA4R,EAAA5R,EAAA4R,YACF/F,EAAQrU,KAAK+3B,OAAOzjB,WAE1B,GAAI8F,GAAepa,KAAK21D,iBAAiBv7C,GACrC,OAAO/K,QAAQY,QAAQzH,GAG3B,IAAMT,EAAQsM,EAAMtM,MAAMkR,WACpB5R,EAAiBgN,EAAMhN,eAAe0R,oBAE5C,IAAKhR,EACD,MAAM,IAAI,IAAiB,IAAqBtO,cAGpD,IAAK4N,EACD,MAAM,IAAI,IAAiB,IAAqBlO,uBAGpD,IAAMy8D,EAAgB51D,KAAKw1D,cACvBx1D,KAAKu1D,2BAA2Bb,WAAWlsD,EAASnB,EAAgBU,EAAM6C,aAC1E5K,KAAKu1D,2BAA2BnB,aAAa5rD,EAASnB,GAE1D,OAAOrH,KAAKu1D,2BAA2BP,gBAAgBY,GAClD52D,MAAK,SAAAob,GAAe,OAAC,kBAAD,CAAC,sBAAK5R,GAAO,CAAE4R,YAAW,QAE3D,EApGA,GEGA,ICwBYy7C,GAuGAC,GAKAC,GAOAC,GASAC,GAIAC,GAIAC,G,GD5JZ,WAGI,WACYp+B,EACAwkB,EACAsK,EACA1tB,EACAo8B,EACAa,QAAA,IAAAA,OAAA,GALA,KAAAr+B,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAAo8B,6BACA,KAAAa,UAsIhB,OAnII,YAAAxnD,WAAA,SAAWhQ,GAAX,WACY,IAAAgP,UAA6BlO,EAAA,EAAAA,SAIrC,OAFAM,KAAK47B,eAAiB57B,KAAK+3B,OAAOzjB,WAAW6E,eAAeC,iBAAiB1Z,GAEzEM,KAAK47B,gBAAkB57B,KAAK47B,eAAepI,MACpCnkB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,YAGhCtU,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GAGF,GAFA,EAAKunB,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IAEvD,EAAKk8B,iBAAmB,EAAKA,eAAe/sB,YAC7C,MAAM,IAAI,IAAiB,IAAqBhV,sBAKpD,OAFA,EAAK07D,2BAA2B3mD,WAAW,EAAKgtB,eAAe/sB,YAAawnD,GAErE,EAAKd,2BAA2BpB,mBAE1Cn1D,MAAK,WAAM,SAAK+4B,OAAOzjB,cACvBhV,OAAM,SAACC,GAAiB,SAAKk2D,aAAal2D,OAGnD,YAAAk9C,QAAA,SAAQgV,EAAgC7yD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAQA,EAAUxI,KAAK01D,oBAAoBltD,EAAST,EAAM6qB,gBAAkBvjB,QAAQY,QAAQzH,IACvFxJ,MAAK,SAAAwJ,GAAW,OAAA6G,QAAQC,IAAI,CAAC9G,EAAS,EAAKuvB,OAAOe,SAAS,EAAKyjB,oBAAoBhB,YAAYxzC,EAAOnJ,SACvGI,MAAK,SAAC,G,IAACwJ,EAAA,KAAa,SAAKuvB,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcvT,OAClFlJ,OAAM,SAACC,GAAiB,SAAKk2D,aAAal2D,OAGnD,YAAAs9C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,sBACI,OAAOh5B,KAAKu1D,2BAA2Bv8B,eAClCh6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGxB,YAAAmhD,aAAR,SAAqBl2D,GACjB,IE5EO,SAA0BA,GACrC,MAAsB,mBAAfA,EAAMrI,KF2EJo/D,CAAiB/2D,GAClB,MAAMA,EAGV,GAAmB,wBAAfA,EAAM+I,KACN,MAAM,IAAI,GAA4B/I,EAAM/E,SAGhD,MAAM,IAAI,GAAyB+E,EAAM/E,UAGrC,YAAAk7D,oBAAR,SAA4BltD,EAAkCoqB,GAA9D,WACUve,EAAQrU,KAAK+3B,OAAOzjB,WACpB3J,EAAa0J,EAAMnI,SAASymB,sBAAsBC,GAClDpe,EAASH,EAAMG,OAAOkF,iBAE5B,IAAK/O,EACD,MAAM,IAAI,IAAiB,IAAqBrR,iBAGpD,IAAKkb,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAKyG,KAAK47B,eACN,MAAM,IAAI,KAAoB,KAAwB5sB,uBAGlD,IAAA7G,EAAA,EAAAA,SAA0BuwC,EAAA,eAAAA,cAC5B,sBAAEllB,EAAA,EAAAA,MAAiB+iC,EAAA,SAAAA,kBACjB,EAAA/tD,EAAA4R,mBAAA,IAAc,EAAd,KAER,GAAIoZ,EACA,OAAOnkB,QAAQY,QAAQ,yCAAKzH,GAAO,CAAE4R,YAAapa,KAAKw2D,kBAAkBhjC,MAG7E,GAAI,aAAoBpZ,IAAgB,aAA0BA,GAAc,CAC5E,IAAKm8C,EACD,MAAM,IAAI,KAAqB,qFAGnC,OAAOlnD,QAAQY,QAAQzH,GAG3B,GAAI4R,EAAYoqC,uBAAyB+R,EACrC,MAAM,IAAI,KAAqB,gEAGnC,IG1HsDt5D,EH0HhDqY,EAAkBjB,EAAMiB,gBAAgBgE,qBAExCikB,EAA0BjoB,EG3H7B,CACH+oB,eAFsDphC,EH4HkCqY,GG1H9D/X,UAAS,IAAIN,EAAQO,SAC/CkhC,MAAOzhC,EAAQU,SACfihC,MAAO3hC,EAAQY,SACfC,KAAMb,EAAQa,KACduW,MAAOpX,EAAQiB,oBACfE,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQsB,YHmH4FqB,EAE3G,OAAOyP,QAAQC,IAAI,CACftP,KAAKu1D,2BAA2BpnD,OAAO,CACnCjN,OAAQyJ,EACRwpC,OAAQuE,EACRvwC,SAAUA,EAASG,KACnBm1B,YAAaz9B,KAAKo2D,QAClB74B,wBAAuB,EACvBinB,qBAAsBpqC,EAAYoqC,uBAAwB,IAE9DxkD,KAAKu1D,2BAA2BR,iBACjC/1D,MAAK,SAAC,G,IACL,OAAEw0B,EAAA,EAAAA,MAAO4K,EAAA,EAAAA,QACT4b,EAAA,KACE,OAAC,kBAAD,CAAC,sBACAxxC,GAAO,CACV4R,YAAa,EAAKo8C,kBAAkBhjC,EAAO4K,EAAQ12B,MAAOsyC,EAAW5/B,EAAYoqC,4BAIjF,YAAAgS,kBAAR,SAA0B95D,EAAegL,EAAgBsyC,EAAoByc,GACzE,MAAO,CACHj6D,iBAAkB,CACdkoD,yBAA0B+R,GAA0B,KACpDC,YAAa1c,GAAa,KAC1B2c,eAAgB,CACZj6D,MAAK,EACLgL,MAAOA,GAAS,SAKpC,EA/IA,G,GIFA,WAGI,WACYqwB,EACA+B,EACAX,EACA+3B,EACArK,EACAtK,EACAnE,EACAC,GAPA,KAAAtgB,SACA,KAAA+B,yBACA,KAAAX,8BACA,KAAA+3B,gCACA,KAAArK,wBACA,KAAAtK,sBACA,KAAAnE,yCACA,KAAAC,4BAoHhB,OAjHI,YAAAzpC,WAAA,SAAWhQ,GAAX,WACY,IAAA25C,sBAA4C74C,EAAA,EAAAA,SAEpD,IAAK84C,EACD,MAAM,IAAI,KAAqB,kGAGnC,OAAOx4C,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GACF,EAAKunB,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,GAE5D,IAAMwM,EAAWmI,EAAMnI,SAAS0I,cAC1B6E,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKxN,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAKmgB,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,IAAK,EAAKqiC,iBAAmB,EAAKA,eAAe/sB,YAC7C,MAAM,IAAI,IAAiB,IAAqBhV,sBAIhD,QAAAojC,eAAA,IAAU,EAAV,eACA,IAAA+yB,uBAAA,IAAkB,EAAlB,eAGEvX,EAAc,CAChBtE,OAAQ16B,EAAYmB,aAAa89B,cACjCtE,iBAAiB,EACjB1rC,SAAUwD,EAASxD,SACnBkmC,aAAcn1B,EAAYtR,SAASG,MAGvC,OAAO+G,QAAQC,IAAI,CACf,EAAK+oC,0BAA0B1Y,KAAK,EAAK/D,eAAepnB,OAAO8lB,UAC/D,EAAK8d,uCAAuCxpC,WAAW,EAAKgtB,eAAe/sB,YAAa4pC,KAE3Fz5C,MAAK,SAAC,G,IAACuP,EAAA,KAAcqoD,EAAA,KAClBroD,EAAaqqC,KAAKge,GAClBroD,EAAaiF,GAAG,mBAAmB,SAACqlC,GAChC,SAAKC,2BAA2BD,GAC3B75C,MAAK,WAAM,OAAAgxD,OACX1wD,OAAM,SAAAC,GAAS,OAAA09B,EAAQ19B,SAEhCgP,EAAaiF,GAAG,iBAAiB,SAAChN,EAAGjH,GAAU,OAAA09B,EAAQ19B,YAG9DP,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAAmoC,QAAA,SAAQgV,EAAgC7yD,GAAxC,WACY4J,EAAA,EAAAA,QAAS,kCAEjB,IAAKA,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAKxI,KAAK47B,iBAAmB57B,KAAK47B,eAAexgB,qBAAuBpb,KAAK47B,eAAexgB,mBAAmBoY,MAC3G,MAAM,IAAI,IAAiB,IAAqB35B,sBAG5C,IAAA25B,EAAA,uCAAAA,MAER,OAAOxzB,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAa,CAAEoZ,MAAK,UAEnGl0B,OAAM,SAACC,GAAiB,SAAKk2D,aAAal2D,OAGnD,YAAAs9C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,sBACI,OAAOh5B,KAAKo4C,uCAAuCpf,eAC9Ch6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGxB,YAAAwkC,2BAAR,SAAmCD,GAAnC,WACUxkC,EAAQrU,KAAK+3B,OAAOzjB,WAE1B,IAAKtU,KAAK47B,eACN,MAAM,IAAIjhC,MAAM,kCAGZ,0BAAAyC,GAER,OAAO4C,KAAK+3B,OAAOe,SAAS94B,KAAKkxD,8BAA8B9d,mBAAkB,WAC7E,OAAO,EAAKgF,uCAAuC7Y,cAC/CsZ,EACAxkC,EAAMiB,gBAAgBgE,qBACtBjF,EAAMhN,eAAe0R,qBAExB/Z,MAAK,WAAM,OAAAqQ,QAAQC,IAAI,CACpB,EAAKyoB,OAAOe,SAAS,EAAKgB,uBAAuB9kB,uBACjD,EAAK+iB,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkBC,WAE7E,CAAEA,SAAQ,IAAK,CAAEm5B,QAAS,uBAGzB,YAAA48B,aAAR,SAAqBl2D,GACjB,GAAmB,mBAAfA,EAAMrI,KACN,MAAM,IAAI,GAAyBqI,EAAM/E,SAG7C,MAAM+E,GAEd,EA/HA,G,GCDA,WACI,WACYw4B,EACA8uB,EACA1tB,EACA09B,GAHA,KAAA9+B,SACA,KAAA8uB,wBACA,KAAA1tB,8BACA,KAAA09B,kBA+EhB,OA5EU,YAAAC,QAAN,SAAcpwD,G,wIACV,SAAM1G,KAAK62D,gBAAgBl3B,KAAKj5B,EAAOtJ,GAAIsJ,EAAO8N,OAAO8lB,W,OACpB,OADrC,SACM,KAAAt6B,KAAK62D,iBAAgBnd,UAAU,GAAM15C,KAAK+2D,gBAAgBrwD,I,OAAhE,SAAM,WAA+B,Y,cAArC,S,YAGE,YAAAswD,MAAN,SACIva,EACApqC,EACAzT,EACAq4D,G,qKAEM,EAAsFj3D,KAAK+3B,OAAOzjB,WAAjFoc,EAAiB,gCAAsBa,EAAuB,yCAC7E,EAAsDlf,EAAO,QAAlD,GAAX,aAA+C,GAAE,GAAtC3S,gBAAQ,IAAG,KAAE,EAAE,IAAA0a,mBAAW,IAAG,KAAE,EAC5Cle,EAAa,aAAoBke,IAAgBsW,EAAkBtW,EAAYhe,eAC/E+mD,EAAMjnD,EAAaA,EAAWg7D,IAAMD,GAAcA,EAAW7T,UAG/D,GAAMpjD,KAAK62D,gBAAgBM,cAAchU,IADzC,M,OACA,S,iBAIO,O,sBAAA,GAAM1G,EAAQ,iBAAMpqC,EAAS,CAChC7J,QAAS,CACL4R,YAAa,CACTrM,aAAc,CAAErR,MAAO60B,EAAwB7xB,GAAUmP,iBAGjEjQ,I,OANJ,MAAO,CAAP,EAAO,U,OAQP,M,sBAAuB,MAAkB,gBAAK,EAAM3D,KAAKI,OAAQ,CAAEiN,KAAM,6BACrE,MAAM,EAGW,SAAMtI,KAAK62D,gBAAgBO,oBAAoB,EAAMn8D,KAAKo8D,gBAAiBr3D,KAAKs3D,kB,cAA/FvpD,EAAe,SAEhBkpD,EAAD,MACO,GAAMj3D,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAc,iBAAM1J,EAAQ7J,QAAS,CAC9F4R,YAAa,CAAErM,aAAY,Q,OAD/B,MAAO,CAAP,EAAO,U,OAKX,SAAMkpD,EAAWxT,OAAO,iBAAMpxC,EAAQ7J,QAAS,CAC3C4R,YAAa,CAAErM,aAAY,O,OAG/B,OAJA,SAIO,CAAP,EAAO/N,KAAK+3B,OAAOzjB,Y,yBAIb,YAAAyiD,gBAAd,SAA8BrwD,G,gIAC1B,OAAIA,EAAOmI,YACA,CAAP,EAAOnI,EAAOmI,aAGsC,GAAM7O,KAAK+3B,OAAOe,SACtE94B,KAAKm5B,4BAA4B15B,kBAAkBiH,EAAOtJ,M,OAG9D,MAAO,CAAP,GAJ0Bm0B,EAA8B,SAEvD,wCAE8B7qB,EAAOtJ,IAAIyR,aAAe,YAGrD,YAAAyoD,cAAR,WACI,IAAMjjD,EAAQrU,KAAK+3B,OAAOzjB,WACpBjN,EAAiBgN,EAAMhN,eAAeylB,2BACtCxX,EAAkBjB,EAAMiB,gBAAgBgE,qBACxCpN,EAAWmI,EAAMnI,SAASwmB,qBAC1B3qB,EAAQsM,EAAMtM,MAAMmrB,kBAE1B,MAAO,CACH7rB,eAAc,EACdiO,gBAAe,EACfs5B,aAAc1iC,EAASG,KAAKlE,SAASG,KACrClL,GAAI2K,EAAMK,QAAQtF,WAClB5B,OAAQgL,EAASG,KAAK+zB,aAGlC,EApFA,GJfam3B,GAAoC,CAAC,OAAQ,KAAM,KAAM,OA0CtE,SAAY1B,GACR,cACA,sBACA,oBAHJ,CAAYA,QAA0B,KAuGtC,SAAYC,GACR,0CACA,iCAFJ,CAAYA,QAAiB,KAK7B,SAAYC,GACR,oBACA,sBACA,oBACA,gBAJJ,CAAYA,QAAuB,KAOnC,SAAYC,GACR,YACA,kBACA,kBACA,8BACA,sBACA,kCANJ,CAAYA,QAAmB,KAS/B,SAAYC,GACR,2BADJ,CAAYA,QAAqB,KAIjC,SAAYC,GACR,YADJ,CAAYA,QAAoB,KAIhC,SAAYC,GACR,UACA,SAFJ,CAAYA,QAA6B,KKvJzC,ICvBYqB,G,GDuBZ,WAII,WACYhqD,GAAA,KAAAA,gBAHJ,KAAAiqD,eAAyB,EA4KrC,OAtKI,YAAA93B,KAAA,SAAK7U,EAAkBwP,GAKnB,OAJKt6B,KAAK03D,OACN13D,KAAK03D,KAAO13D,KAAKwN,cAAcmyB,KAAK7U,EAAUwP,IAG3Ct6B,KAAK03D,KAAK14D,MAAK,gBAG1B,YAAA06C,UAAA,SAAU7qC,GAAV,WACI,OAAI7O,KAAKy3D,cACEpoD,QAAQY,UAGZjQ,KAAK23D,gBACP34D,MAAK,SAAA6O,GAAU,WAAIwB,SAAc,SAACY,EAAS+L,GACxCnO,EAAO2F,GAAGsiD,GAAkB8B,gBAAgB,WACxC/pD,EAAOgqD,IAAI/B,GAAkB8B,gBAC7B/pD,EAAOgqD,IAAI/B,GAAkBjU,WAE7B,EAAK4V,eAAgB,EAErBxnD,OAGJpC,EAAO2F,GAAGsiD,GAAkBjU,WAAW,SAAC9mC,GAIpC,OAHAlN,EAAOgqD,IAAI/B,GAAkB8B,gBAC7B/pD,EAAOgqD,IAAI/B,GAAkBjU,WAErB9mC,EAAK+8C,YACT,KAAK/B,GAAwBp7D,MACrB,oBAAS48D,GAAmCx8C,EAAKg9C,cACjD/7C,EAAO,IAAI,IAAiB,IAAqBniB,uBAErDmiB,EAAO,IAAI,GAAyBjB,EAAKi9C,uBAKrDnqD,EAAOoqD,MAAMpC,GAA2BqC,KAAM,CAC1CC,IAAKtpD,WAKrB,YAAAsoD,cAAA,SAAciB,GACV,OAAOp4D,KAAK23D,gBACP34D,MAAK,SAAA6O,GAAU,OAAAA,EAAOgpB,QAAQo/B,GAAsBoC,WAAYD,GAAW94D,OAAM,kBACjFN,MAAK,SAAA6B,GACF,IAAKA,IAAWA,EAAOy3D,OACnB,MAAM,IAAI,KAAoB,KAAwBtpD,2BAKtE,YAAAooD,oBAAA,SAAoBmB,EAAiCC,GAArD,WACI,OAAOx4D,KAAK23D,gBACP34D,MAAK,SAAA6O,GACF,OAAO,IAAIwB,SAA2B,SAACY,EAAS+L,GAC5CnO,EAAO2F,GAAGsiD,GAAkBjU,WAAW,SAAC9mC,EAA6Bo9C,GAEjE,GADAtqD,EAAOgqD,IAAI/B,GAAkBjU,YACxBsW,EACD,OAAOn8C,EAAO,IAAI,GAAyBjB,EAAKi9C,iBAAmBj9C,EAAKi9C,iBAAmB,+DAG/F,IAAKj9C,EAAK+8C,WACN,OAAO7nD,EAAQ,CAAEvT,MAAOy7D,IAG5B,OAAQp9C,EAAK+8C,YACT,KAAK/B,GAAwB0C,QACzB,OAAOxoD,EAAQ,CAAEvT,MAAOy7D,IAC5B,KAAKpC,GAAwB2C,SACzB,OAAI39C,EAAKg9C,YAAc,EACZ/7C,EAAO,IAAI,GAAyBjB,EAAKi9C,mBACxCj9C,EAAK49C,SAAY59C,EAAK49C,QAAQC,cAAgB79C,EAAK49C,QAAQC,aAAaC,wBAA0B1C,GAA8B2C,IAIrI7oD,EAAQ,CAAEvT,MAAOy7D,IAHbn8C,EAAO,IAAI,GAAyB,kDAInD,KAAK+5C,GAAwBgD,QACzB,OAAO/8C,EAAO,IAAI,GAAyB,6FAC/C,KAAK+5C,GAAwBp7D,MACzB,OAAOqhB,EAAO,IAAI,GAAyBjB,EAAKi9C,uBAI5D,IAAMgB,EAAiB,CACnBC,OAAQV,EAAiBW,QACzBC,QAASZ,EAAiBa,eAGxBC,EAAe,EAAKC,mBAAmBd,EAAWD,EAAiBgB,oBAEzE1rD,EAAO2rD,SAAStD,GAAqBuD,IAAKT,EAAgBK,UAKlE,YAAAC,mBAAR,SAA2Bd,EAA8BkB,GACrD,IAAMC,EAA6B,CAC/BC,eAAgB55D,KAAK65D,sBAAsBrB,EAAUnxD,iBAezD,OAZImxD,EAAUp+C,cACVu/C,EAASG,QAAU95D,KAAK+5D,sBAAsBvB,EAAUp+C,cAGxDo+C,EAAUnxD,eAAeK,QACzBiyD,EAASK,OAASxB,EAAUnxD,eAAeK,OAG3C8wD,EAAUljD,kBACVqkD,EAASM,gBAAkBj6D,KAAK65D,sBAAsBrB,EAAUljD,kBAG5D,CACJ4kD,SAAUP,EACVQ,aAAc,CACVC,YAAa5B,EAAUp7D,GACvBi9D,OAAQ7B,EAAUt3D,OAClBo5D,aAAc9B,EAAU5pB,aACxB2rB,aAAc,IACdC,cAAed,KAKnB,YAAAK,sBAAR,SAA8B3/C,GAC1B,MAAO,CACHqgD,cAAep0B,OAAOjsB,EAAYmB,UAClCm/C,gBAAiBr0B,OAAOjsB,EAAYsB,SAAS/K,OAC7CgqD,eAAgBt0B,OAAOjsB,EAAYsB,SAAS9K,MAC5CgqD,cAAexgD,EAAYwB,OAC3Bi/C,SAAUx0B,OAAOjsB,EAAYiB,SAI7B,YAAAw+C,sBAAR,SAA8B58D,GAC1B,IAAM69D,EAAmC,CACrCC,UAAW99D,EAAQM,UACnBy9D,SAAU/9D,EAAQO,SAClBy9D,SAAUh+D,EAAQU,SAClBu9D,KAAMj+D,EAAQa,KACdq9D,MAAOl+D,EAAQe,gBACfo9D,WAAYn+D,EAAQmB,WACpBi9D,YAAap+D,EAAQqB,aAWzB,OARIrB,EAAQY,WACRi9D,EAAgBQ,SAAWr+D,EAAQY,UAGnCZ,EAAQsB,QACRu8D,EAAgBS,OAASt+D,EAAQsB,OAG9Bu8D,GAGH,YAAAnD,cAAR,WACI,IAAK33D,KAAK03D,KACN,MAAM,IAAI,KAAoB,KAAwB1oD,uBAG1D,OAAOhP,KAAK03D,MAEpB,EA9KA,G,GEdA,WACI,WACYlqD,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAgBhB,OAbI,YAAAkyB,KAAA,SAAK7U,EAAkBwP,GAAvB,WACUn6B,EAAMm6B,EAVC,gEACA,4DAWb,OAAOt6B,KAAKwN,cACPG,WAAWxN,EAAM,MAAQ2qB,GACzB9rB,MAAK,WACF,IAAK,EAAKyO,QAAQ+tD,SACd,MAAM,IAAI,IAGd,OAAO,EAAK/tD,QAAQ+tD,aAGpC,EAnBA,IDTA,SAAYhE,GACR,gCACA,sCACA,kCAHJ,CAAYA,QAAiB,KEsB7B,IC2CYiE,GAYAC,GDvDS,GAArB,WAMI,WACY3jC,EACA+B,EACAyiB,EACAsK,EACA1tB,EACA+3B,EACAxyD,EACA26C,EACAsiB,GARA,KAAA5jC,SACA,KAAA+B,yBACA,KAAAyiB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAA+3B,gCACA,KAAAxyD,iBACA,KAAA26C,wBACA,KAAAsiB,mBAER37D,KAAK47D,cAAgB,IAAI,UAoNjC,OAjNI,YAAAhtD,WAAA,SAAWhQ,GAAX,WAGI,GAFAoB,KAAKg/B,UAAYpgC,EAAQc,UAEpBd,EAAQ06C,SACT,MAAM,IAAI,KAAqB,qFAGnC,IAAMiY,EAAe3yD,EAAQ06C,SAASiY,cAAgBlsD,SAAS+0B,eAAex7B,EAAQ06C,SAASiY,cAO/F,OALIA,IACAvxD,KAAKg6B,cAAgBu3B,EACrBvxD,KAAKg6B,cAAc5D,iBAAiB,QAASp2B,KAAKm/B,2BAG/Cn/B,KAAK67D,iBAAiBj9D,EAAQ06C,UAChCt6C,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAQI,OAPIh5B,KAAKg6B,eACLh6B,KAAKg6B,cAAczD,oBAAoB,QAASv2B,KAAKm/B,0BAGzDn/B,KAAKg6B,mBAAgBp6B,EACrBI,KAAK87D,qBAAkBl8D,EAEhByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACI,OAAOoB,KAAK+7D,cACPz8D,OAAM,SAAAC,GACH,GAAIA,EAAMtG,UAAY,IAAqBU,eACvC,OAAO,EAAKqiE,iBACPh9D,MAAK,WAAM,SAAK+8D,iBAGzB,MAAMx8D,KAETP,MAAK,SAAAwJ,GACF,SAAKyzD,aAAazzD,EAAS6J,EAAQugB,eAAgBh0B,OAI/D,YAAAi+C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAA6/C,iBAAR,SAAyBj9D,GAAzB,WACUyV,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgB7E,EAAM8E,eAAeC,iBAAiBpZ,KAAKg/B,WAC3DvlB,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKR,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,IAAK4f,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,OAAOyG,KAAKq5C,sBAAsB1Z,KAAKzmB,EAAc1E,OAAO8lB,UACvDt7B,MAAK,SAAC,G,IAAEy6C,EAAA,EAAAA,SACL,EAAKqiB,gBAAkBriB,EAEnB76C,EAAQs9D,eAAiB72D,SAAS+0B,eAAex7B,EAAQs9D,gBACzD,EAAKJ,gBAAgBK,gBAAgB,CACjCj6B,MAAO,QACPzJ,WAAY,CAAC75B,EAAQs9D,iBAI7B,EAAKJ,gBAAgBpiB,UAAU,CAC3BC,SAAUlgC,EAAYmB,aAAa89B,gBAGvC,EAAKojB,gBAAgBtoD,GAAGgkD,GAAkB4E,gBAAgB,WACtD,EAAKR,cAAc98D,KAAK,CAAE5F,KAAMs+D,GAAkB4E,iBAE9Cx9D,EAAQy9D,UACRz9D,EAAQy9D,cAIhB,EAAKP,gBAAgBtoD,GAAGgkD,GAAkB8E,kBAAkB,SAACjqD,GACzD,EAAKkqD,iBAAiBlqD,EAAQkoC,cACzBv7C,MAAK,WACF,EAAK48D,cAAc98D,KAAK,CAAE5F,KAAMs+D,GAAkB8E,mBAE9C19D,EAAQoxD,iBACRpxD,EAAQoxD,4BAO5B,YAAAgM,eAAR,sBACI,OAAOh8D,KAAK+3B,OAAOe,SAAS94B,KAAKkxD,8BAA8B9d,mBAAkB,WAkB7E,OAjBA,EAAKrb,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkB,EAAKu/B,YACxEhgC,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB,EAAK4lB,WAEjE,IAAK,EAAK88B,gBACN,MAAM,IAAI,KAAoB,KAAwB9sD,uBAG1D,IAAKkK,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,EAAKiiE,gBAAgBU,uBACrB,EAAKV,gBAAgB7hB,cAAc/gC,EAAckC,mBAAmBo+B,qBAIrE,IAAInqC,SAAQ,SAACY,EAAS+L,GACzB,EAAK4/C,cACAppD,KAAK,gBAAK,IACV0lB,WAAU,SAACzC,GACJA,EAAMv8B,OAASs+D,GAAkB4E,eACjCpgD,EAAO,IAAI,IACJyZ,EAAMv8B,OAASs+D,GAAkB8E,kBACxCrsD,YAIjB,CAAEvQ,SAAUM,KAAKg/B,YAAc,CAAEnG,QAAS,uBAGzC,YAAA0jC,iBAAR,SAAyBhiB,GAAzB,WAEUrhC,EADQlZ,KAAK+3B,OAAOzjB,WACE6E,eAAeC,iBAAiBpZ,KAAKg/B,WAC3Dob,EAAoBlhC,GAAiBA,EAAckC,mBAAmBg/B,kBAE5E,OAAOp6C,KAAKtB,eAAe2Z,KAAK,eAAgB,CAC5Cnd,QAAS,CACL+E,OAAQ,YACR,eAAgB,oDAEpBhF,KAAM,CACFmX,OAAQ,wBACR0Y,SAAU9qB,KAAKg/B,UACfub,aAAY,EACZH,kBAAiB,KAIpBp7C,MAAK,WAAM,OAAAqQ,QAAQC,IAAI,CACpB,EAAKyoB,OAAOe,SAAS,EAAKgB,uBAAuB9kB,uBACjD,EAAK+iB,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkB,EAAKu/B,iBAEhFhgC,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGxB,YAAAynD,YAAR,sBACI,OAAO/7D,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBO,KAAKg/B,YAC/EhgC,MAAK,WACF,MAAuB,UAAnB,EAAKggC,UACE,EAAK28B,iBAAiB/sD,aACxB5P,MAAK,SAAA6O,GAAU,OAAAA,EAAO4uD,kBAGxB,MAEVz9D,MAAK,SAAA09D,GACF,IACMxjD,EADQ,EAAK6e,OAAOzjB,WACE6E,eAAeC,iBAAiB,EAAK4lB,WAEjE,IAAK9lB,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,IAAKqf,EAAckC,mBAAmBuhD,kBAClC,MAAM,IAAI,IAAiB,IAAqBhjE,gBAGpD,IAAMygB,EAAc,CAChB1T,OAAQ,EAAKs4B,UACb49B,aAAc1jD,EAAckC,mBAAmBuhD,kBAC/CE,IAAK3jD,EAAckC,mBAAmByhD,IACtCnD,cAAerqB,KAAKn2B,EAAckC,mBAAmB0hD,YACrDphD,SAAU,CACN/K,MAAOuI,EAAckC,mBAAmB2hD,QAAQj6D,WAAWk6D,OAAO,EAAG,GACrEpsD,KAAMsI,EAAckC,mBAAmB2hD,QAAQj6D,WAAWk6D,OAAO,EAAG,IAExEzhD,SAAUrC,EAAckC,mBAAmB6hD,WAC3CC,YAAahkD,EAAckC,mBAAmB8hD,YAC9CC,UAAWT,EAAY,CAAEA,UAAS,QAAK98D,GAG3C,MAAO,CACHF,SAAU,EAAKs/B,UACf5kB,YAAW,OAKnB,YAAA6hD,aAAR,SAAqBzzD,EAAkBoqB,EAA0Bh0B,GAAjE,WACI,OAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAY,CAAE3oB,eAAc,GAAIh0B,IAChFI,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcvT,QAI1E,YAAA22B,yBAAR,SAAiC1J,GAC7BA,EAAM4J,iBAENr/B,KAAKg8D,kBAHT,sBADC,M,6CAML,EArOA,G,GETA,WACI,WACYjkC,EACAwkB,EACAsK,EACArrB,GAHA,KAAAzD,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAArrB,cAgDhB,OA7CI,YAAAihB,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACX4R,EAAc5R,GAAWA,EAAQ4R,YAEvC,IAAK5R,IAAY4R,EACb,MAAM,IAAI,GAA4B,CAAC,wBAG3C,OAAOpa,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAW,SAE1F9a,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMtE,KAAKI,OAAQ,CAAEiN,KAAM,4BAIlE,IAAI+G,SAAQ,WACf,EAAKmsB,YAAYmC,SAASp+B,EAAMtE,KAAKo8D,gBAAgB6B,QAAS,CAC1DkE,MAAO79D,EAAMtE,KAAKo8D,gBAAgBkC,mBAClC8D,QAAS99D,EAAMtE,KAAKo8D,gBAAgBiG,aACpCC,GAAIh+D,EAAMtE,KAAKo8D,gBAAgB+B,mBAP5B/pD,QAAQ2M,OAAOzc,OAatC,YAAAs9C,SAAA,SAASj+C,GACL,IAAMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpBvM,EAAQsM,EAAMtM,MAAMkR,WAE1B,OAAIlR,GAASsM,EAAM7L,QAAQolB,qBAAuB,KACvC5tB,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBf,cAAczzC,EAAMK,QAASxJ,IAG/EyQ,QAAQ2M,OAAO,IAAI,KAG9B,YAAApN,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EArDA,G,GCDA,WAII,WACcyjB,EACAwkB,EACAsK,EACA2W,GAHA,KAAAzlC,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA2W,qBA0FlB,OAvFI,YAAA/gB,QAAA,SAAQpqC,EAA2BzT,GAC/B,OAAOoB,KAAKy9D,+BAAiCz9D,KAAK09D,wBAC9C19D,KAAK29D,uBAAuBtrD,EAASzT,GACrCoB,KAAK49D,0BAA0BvrD,EAASzT,IAGhD,YAAAi+C,SAAA,SAAS1Y,GACL,OAAO90B,QAAQ2M,OAAO,IAAI,KAG9B,YAAApN,WAAA,SAAWhQ,GAAX,WACI,IAAKoB,KAAKy9D,gCAAkCz9D,KAAK69D,wBAAwBj/D,GAGrE,OAFAoB,KAAK09D,yBAA0B,EAExBruD,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,YAGvC,IAAMwpD,EAAcl/D,GAAWA,EAAQs2D,YAAct2D,EAAQs2D,WAAW/gC,KAChE3f,EAAA,uBAAAA,OACA,2BAAAupD,gBAAmB,oBAAAC,cAAA,kBACnB,6BAAAx1D,QAAW,oBAAAy3C,cAAA,IAAS,EAAT,KAEnB,IAAK6d,IAAgB7d,EACjB,MAAM,IAAI,KAGd,IAAM9rB,EAAOn0B,KAAKw9D,mBAAmBvlE,OAAOyqC,EAAMud,EAAQ6d,GAE1D,OAAO3pC,EAAK4Q,SACP/lC,MAAK,WAIF,OAHA,EAAK0+D,yBAA0B,EAC/B,EAAKO,YAAc9pC,EAEZ,EAAK4D,OAAOzjB,eAI/B,YAAA0kB,aAAA,SAAamL,GAKT,OAJInkC,KAAKi+D,aACLj+D,KAAKi+D,YAAYx4B,SAGdp2B,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAAspD,0BAAR,SAAkCvrD,EAA2BzT,GAA7D,WACY4J,EAAA,EAAAA,QAAS,kCACX4R,EAAc5R,GAAWA,EAAQ4R,YAEvC,IAAK5R,IAAY4R,EACb,MAAM,IAAI,GAA4B,CAAC,wBAG3C,OAAOpa,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAW,UAI3F,YAAAujD,uBAAR,SAA+BtrD,EAA2BzT,GAA1D,WACY4J,EAAA,EAAAA,QAAS,kCACX2rB,EAAOn0B,KAAKi+D,YAElB,IAAK9pC,EACD,MAAM,IAAI,KAAoB,KAAwBnlB,uBAG1D,IAAKxG,IAAYA,EAAQ9I,SACrB,MAAM,IAAI,GAA4B,CAAC,qBAG3C,OAAOy0B,EAAK6nB,WACPh9C,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAKyjB,oBAAoBhB,YAAYxzC,EAAOnJ,OAC5EI,MAAK,WAAM,OAAAm1B,EAAKsvB,OAAOj7C,MACvBxJ,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAKyjB,oBAAoBX,wBAG1D,YAAA6hB,4BAAR,WACY,IACA,GADA,uBAAAjpD,OACA,sBAAAuvC,iBAAoB,oBAAAma,2BAE5B,YAF4B,IAA6B,GAA7B,GAKxB,YAAAL,wBAAR,SAAgCj/D,GAC5B,OAAS,kBAAOA,GAAWA,EAAQs2D,YAAct2D,EAAQs2D,WAAW/gC,KAAKmtB,QAAQrsB,MAAM,WAE/F,EAlGA,G,GCJA,YACI,WACIxiB,EACA0rD,EACAC,EACAC,EACQC,GALZ,MAOI,YACI7rD,EACA0rD,EACAC,EACAC,IACH,K,OAPO,EAAAC,oB,EAsChB,OA5CwD,yBAgB9C,YAAA1vD,WAAN,SAAiBhQ,G,wIACb,SAAM,YAAMgQ,WAAU,UAAChQ,I,cAAvB,SAE0B2yB,EAA8BvxB,KAAK+3B,OAAOzjB,WAAU,wCACxE4E,EAAgBqY,EAAwB3yB,EAAQc,WAEpC8U,OAAOo7C,aACrB,GAAM5vD,KAAKs+D,kBAAkBxH,QAAQ59C,IADrC,M,OACA,S,iBAGJ,MAAO,CAAP,EAAOlZ,KAAK+3B,OAAOzjB,oBAGjB,YAAAmoC,QAAN,SAAcpqC,EAA2BzT,G,mHAIrC,OAHQ,EAAoCyT,EAAO,QAAhC,cAAkB,GAAE,YAApB3S,OAAQ,IAAG,KAAE,GACN6xB,EAA8BvxB,KAAK+3B,OAAOzjB,WAAU,wCAElD5U,GAAU8U,OAAOo7C,aAClC,CAAP,EAAO5vD,KAAKs+D,kBAAkBtH,MAC1B,YAAMva,QAAQtkD,KAAK6H,MACnBqS,EACAzT,EACAoB,KAAKi+D,cAIN,CAAP,EAAO,YAAMxhB,QAAO,UAACpqC,EAASzT,WAEtC,EA5CA,CAAwD,ICSnC,GAArB,WAKI,WACYm5B,EACA+B,EACAX,EACA+3B,EACArK,EACAtK,EACAxd,GANA,KAAAhH,SACA,KAAA+B,yBACA,KAAAX,8BACA,KAAA+3B,gCACA,KAAArK,wBACA,KAAAtK,sBACA,KAAAxd,6BA4KhB,OAzKI,YAAAnwB,WAAA,SAAWhQ,GAAX,WAGI,OAFAoB,KAAKg/B,UAAYpgC,EAAQc,SAElBM,KAAK++B,2BAA2BnwB,WAAW5O,KAAKg/B,WAClDhgC,MAAK,WAGF,GAFA,EAAKu/D,kBAAoB,EAAK3jB,qBAAqBh8C,IAE9C,EAAK2/D,kBACN,MAAM,IAAI,KAAqB,sFAGnC,IAAMhN,EAAe,EAAKgN,kBAAkBhN,cAAgBlsD,SAAS+0B,eAAe,EAAKmkC,kBAAkBhN,cAO3G,OALIA,IACA,EAAKv3B,cAAgBu3B,EACrB,EAAKv3B,cAAc5D,iBAAiB,QAAS,EAAK+I,2BAG/C,EAAKpH,OAAOzjB,eAI/B,YAAA0kB,aAAA,sBAOI,OANIh5B,KAAKg6B,eACLh6B,KAAKg6B,cAAczD,oBAAoB,QAASv2B,KAAKm/B,0BAGzDn/B,KAAKg6B,mBAAgBp6B,EAEdI,KAAK++B,2BAA2B/F,eAClCh6B,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACI,IAAKoB,KAAKu+D,kBACN,MAAM,IAAI,KAAqB,sFAG7B,6BACF,IAAAthC,eAAA,IAAU,EAAV,eACA,IAAA+yB,uBAAA,IAAkB,EAAlB,eAGJ,OAAO3gD,QAAQY,QAAQjQ,KAAK+7D,eACvB/8D,MAAK,SAAAwJ,GACF,OAAKA,EAAQ4R,YAAYoZ,OAAUhrB,EAAQ4R,YAAY26B,gBAahDvsC,EAXI,EAAKu2B,2BAA2BO,gBAClCtgC,MAAK,SAAAob,GAAe,SAAK0+B,2BAA2B1+B,MACpDpb,MAAK,WAAM,OAAAgxD,OACXhxD,MAAK,WAAM,SAAK+8D,iBAChBz8D,OAAM,SAAAC,GACsB,aAArBA,EAAMi/D,YACNvhC,EAAQ19B,SAO3BP,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAKyjB,oBAAoBhB,YAAY,CAAE3oB,eAAgBvgB,EAAQugB,gBAAkBh0B,IACjGI,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,EAAKggD,uBAI/F,YAAAlf,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAA4+B,qBAAR,SAA6Bh8C,GACzB,GAAyB,qBAArBA,EAAQc,UAAmCd,EAAQi8C,iBACnD,OAAOj8C,EAAQi8C,iBAGnB,GAAyB,0BAArBj8C,EAAQc,UAAwCd,EAAQk8C,sBACxD,OAAOl8C,EAAQk8C,sBAGnB,GAAyB,uBAArBl8C,EAAQc,UAAqCd,EAAQm8C,mBACrD,OAAOn8C,EAAQm8C,mBAGnB,GAAyB,oBAArBn8C,EAAQc,UAAkCd,EAAQo8C,gBAClD,OAAOp8C,EAAQo8C,gBAGnB,MAAM,IAAI,MAGN,YAAA+gB,YAAR,WACI,IAAK/7D,KAAKg/B,UACN,MAAM,IAAI,KAAoB,KAAwBhwB,uBAG1D,IAWIwkB,EAVEta,EADQlZ,KAAK+3B,OAAOzjB,WACE6E,eAAeC,iBAAiBpZ,KAAKg/B,WAEjE,IAAK9lB,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,IAAKqf,EAAckC,mBAAmBoY,MAClC,MAAM,IAAI,IAAiB,IAAqB75B,gBAMhD65B,EADmB,qBAAnBxzB,KAAKg/B,UACGjB,KAAKC,UAAU,CACnB9kC,KAAMmtD,GAAuBoY,UAC7BC,eAAgBxlD,EAAckC,mBAAmBoY,QAG7Cta,EAAckC,mBAAmBoY,MAG7C,IAAMpZ,EAAc,CAChB1T,OAAQ1G,KAAKg/B,UACbxL,MAAK,EACLuhB,gBAAiB77B,EAAckC,mBAAmBy5B,kBAGtD,MAAO,CACHn1C,SAAUM,KAAKg/B,UACf5kB,YAAW,IAKX,YAAA+kB,yBAAR,SAAiC1J,GADjC,WAII,GAFAA,EAAM4J,kBAEDr/B,KAAKg/B,YAAch/B,KAAKu+D,kBACzB,MAAM,IAAI,KAAoB,KAAwBvvD,uBAGpD,6BACF,IAAAiuB,eAAA,IAAU,EAAV,eACA,IAAA+yB,uBAAA,IAAkB,EAAlB,eAGJ,OAAOhwD,KAAK+3B,OAAOe,SAAS94B,KAAKkxD,8BAA8B9d,mBAAkB,WAC7E,OAAO,EAAKrU,2BAA2BO,gBAClCtgC,MAAK,SAAAob,GAAe,SAAK0+B,2BAA2B1+B,MACpDpb,MAAK,WAAM,OAAAgxD,OACX1wD,OAAM,SAAAC,GACsB,aAArBA,EAAMi/D,YACNvhC,EAAQ19B,QAGrB,CAAEG,SAAUM,KAAKg/B,YAAc,CAAEnG,QAAS,uBAGnC,YAAAigB,2BAAd,SAAyC1+B,G,sIACrC,IAAKpa,KAAKg/B,UACN,MAAM,IAAI,KAAoB,KAAwBhwB,uBAM1D,OAHMtP,EAAWM,KAAKg/B,UAGtB,GAAMh/B,KAAK++B,2BAA2BQ,cAAcnlB,I,OAE7C,OAFP,SAEO,GAAM/K,QAAQC,IAAI,CACrBtP,KAAK+3B,OAAOe,SAAS94B,KAAK85B,uBAAuB9kB,uBACjDhV,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,O,OAF5E,MAAO,CAAP,EAAO,kBAlCX,sBADC,M,6CAwCL,EAxLA,GCjBai/D,GAAqB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5EC,GAAoC,CAAC,M,GCiBlD,WAII,WACY7mC,EACAwkB,EACApjB,EACAqe,EACAqnB,GAJA,KAAA9mC,SACA,KAAAwkB,sBACA,KAAApjB,8BACA,KAAAqe,+BACA,KAAAqnB,sBA8JhB,OA3JI,YAAAjwD,WAAA,SAAWhQ,GAAX,WACI,OAAOoB,KAAK6+D,oBAAoBl/B,OAC3B3gC,MAAK,SAAA8/D,GAAkB,EAAKC,cAAgBD,KAC5C9/D,MAAK,WAcF,OAbA,EAAKggE,aAAe,EAAKjnC,OAAOG,WAC5B,SAAA7jB,GACQA,EAAM+f,kBAAkBzS,cAAc/iB,EAAQc,WAC9C,EAAKu/D,YAAYrgE,MAGzB,SAAAyV,GACI,IAAMnI,EAAWmI,EAAMnI,SAAS0I,cAEhC,OAAO1I,GAAYA,EAAS4mB,sBAI7B,EAAKmsC,YAAYrgE,MAE3BI,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAKI,OAJIh5B,KAAKg/D,cACLh/D,KAAKg/D,eAGF3vD,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACI,IAAKyT,EAAQ7J,QACT,MAAM,IAAI,KAAqB,yEAGnC,IAAQ,IAAAA,QAAwB,GAAb,EAAA4R,YAAa,qCAEhC,OAAOpa,KAAKk/D,aACPlgE,MAAK,SAAC,G,IAAE,IAAAmgE,oBAA8C,SAAKpnC,OAAOe,SAC/D,EAAK0e,6BAA6BzB,kBAAkBqT,EAAe1pD,SAAU,CAAE0/D,mBAAkB,QAEpGpgE,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,EAAKyjB,oBAAoBhB,YAAY,yCAC9BlpC,GAAO,CACV7J,QAAS4gD,EACTx2B,eAAgBvgB,EAAQugB,iBACzBh0B,QAIf,YAAAi+C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAAijD,YAAR,SAAoBrgE,GAApB,WACI,IAAKA,EAAQygE,OACT,MAAM,IAAI,KAAqB,4EAG3B,IAAA3/D,EAAA,EAAAA,SAAU,IAAA2/D,OAAU1mC,EAAA,EAAAA,UAAW6L,EAAA,EAAAA,OAEvC,OAAOxkC,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GAAS,WAAIhF,SAA4B,SAAAY,GAC3C,IAAMiJ,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,GAE5D,IAAKwZ,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,IAAK,EAAKklE,gBAAkB7lD,EAAcrK,YACtC,MAAM,IAAI,KAAoB,KAAwBG,uBAG1D,EAAK+vD,cAAcnmB,KAAK,CAAE0mB,aAAcpmD,EAAcrK,cAEtD,EAAKkwD,cAAcp/B,KAAK,CAAEhH,UAAS,IAAI,SAAAv9B,GAC/BopC,GACAA,EAAOppC,GAEX6U,EAAQ7U,aAKhB,YAAAmkE,sBAAR,SAA8Bl4D,EAAgCiO,GAC1D,IAAK,oBAAS,yBAAIqpD,GAAuBC,IAAoCv3D,EAAe/I,aACxF,MAAO,GAGX,IAAMyc,EAAkC,CACpCmjB,gBAAiBl+B,KAAKw/D,oBAAoBn4D,EAAgBA,EAAeK,QAO7E,OAJI4N,IACAyF,EAAK+iB,iBAAmB99B,KAAKw/D,oBAAoBlqD,EAAiBjO,EAAeK,QAG9EqT,GAGH,YAAA0kD,gBAAR,SAAwBnhE,GACpB,OAAO,oBAASsgE,GAAmCtgE,IAG/C,YAAAkhE,oBAAR,SAA4BviE,EAAkByK,GAC1C,IAAMg4D,EAA+B,CACjCC,eAAgB1iE,EAAQU,SACxBG,KAAMb,EAAQa,KACdO,QAASpB,EAAQqB,YACjBshE,WAAY3iE,EAAQM,UACpBsiE,YAAa5iE,EAAQO,SACrBshC,YAAa7hC,EAAQmB,WACrBs8B,OAAQ16B,KAAKy/D,gBAAgBxiE,EAAQqB,aAAerB,EAAQiB,oBAAsBjB,EAAQe,gBAC1F0J,MAAK,GAWT,OARIzK,EAAQY,WACR6hE,EAAcI,gBAAkB7iE,EAAQY,UAGxCZ,EAAQsB,QACRmhE,EAAcnhE,MAAQtB,EAAQsB,OAG3BmhE,GAGH,YAAAR,WAAR,sBACI,OAAO,IAAI7vD,SAAQ,SAACY,EAAS+L,GACzB,IAAM3U,EAAiB,EAAK0wB,OAAOzjB,WAAWjN,eAAe0R,oBACvDzD,EAAkB,EAAKyiB,OAAOzjB,WAAWgB,gBAAgBgE,qBAE/D,IAAKjS,EACD,MAAM,IAAI,IAAiB,IAAqBlO,uBAGpD,IAAK,EAAK4lE,cACN,MAAM,IAAI,KAAoB,KAAwB/vD,uBAG1D,IAAM+wD,EAAoB,EAAKR,sBAAsBl4D,EAAgBiO,GAErE,EAAKypD,cAAcnnB,UAAUmoB,GAAmB,SAAAt/B,GAC5C,OAAIA,EAAIu/B,SACG/vD,EAAQwwB,GAGfA,EAAIw/B,UACGjkD,EAAO,IAAI,SAGtBA,EAAO,IAAI,aAI3B,EAvKA,G,GCXA,WACI,WACYxO,GAAA,KAAAA,gBAOhB,OAJI,YAAAmyB,KAAA,WACI,OAAO3/B,KAAKwN,cAAcG,WARlB,wCASH3O,MAAK,WAAM,OAACyZ,OAAmCynD,OAAOC,WAEnE,EATA,G,GCWA,WAGI,WACYpoC,EACAwkB,EACApjB,EACAqe,EACA4oB,GAJA,KAAAroC,SACA,KAAAwkB,sBACA,KAAApjB,8BACA,KAAAqe,+BACA,KAAA4oB,wBAoJhB,OAjJI,YAAAxxD,WAAA,SAAWhQ,GAAX,WACI,OAAOoB,KAAKogE,sBAAsBzgC,OAC7B3gC,MAAK,SAAAqhE,GAAoB,EAAKC,gBAAkBD,KAChDrhE,MAAK,WAAM,SAAKuhE,oBAAoB3hE,MACpCI,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACI,IAAKyT,EAAQ7J,QACT,MAAM,IAAI,KAAqB,yEAGnC,IAAQ,IAAAA,QAAwB,GAAb,EAAA4R,YAAa,qCACxBf,EAAA,EAAAA,UAER,IAAKA,EACD,MAAM,IAAI,KAAqB,mFAGnC,OAAOrZ,KAAKk/D,WAAW9V,EAAe1pD,UACjCV,MAAK,SAAC,G,IAAE,IAAAmgE,oBAA8C,SAAKpnC,OAAOe,SAC/D,EAAK0e,6BAA6BzB,kBAAkB18B,EAAW,CAAE+lD,mBAAkB,QAEtFpgE,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,EAAKyjB,oBAAoBhB,YAAY,yCAC9BlpC,GAAO,CACV7J,QAAS4gD,EACTx2B,eAAgBvgB,EAAQugB,iBACzBh0B,QAIf,YAAAi+C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAAukD,oBAAR,SAA4B3hE,GAA5B,WACI,IAAKA,EAAQ4hE,SACT,MAAM,IAAI,KAAqB,8EAG3B,IAAA9gE,EAAA,EAAAA,SAAU2Z,EAAA,EAAAA,UAAW,IAAAmnD,SAAY7nC,EAAA,EAAAA,UAAW6L,EAAA,EAAAA,OAC9CnwB,EAAQrU,KAAK+3B,OAAOzjB,WAE1B,IAAK+E,EACD,MAAM,IAAI,KAAqB,mFAGnC,OAAOrZ,KAAKygE,aAAapnD,GAAWra,MAAK,WAAM,WAAIqQ,SAA4B,SAAAY,GAC3E,IAAMiJ,EAAgB7E,EAAM8E,eAAeoY,wBAAwB7xB,GAEnE,IAAK,EAAK4gE,kBAAoBpnD,EAAcrK,YACxC,MAAM,IAAI,KAAoB,KAAwBG,uBAG1D,EAAKsxD,gBAAgB1nB,KAAK,CAAE0mB,aAAcpmD,EAAcrK,cACxD,EAAKyxD,gBAAgB3gC,KAAK,CAAEhH,UAAS,EAAE+nC,wBAAyBxnD,EAAc9b,KAAM,SAAAhC,GAC5EopC,GACAA,EAAOppC,GAGX6U,EAAQ7U,aAKZ,YAAAmkE,sBAAR,SAA8Bl4D,EAAgCiO,GAC1D,IAAK,oBAAS,yBAAIqpD,GAAuBC,IAAoCv3D,EAAe/I,aACxF,MAAO,GAGX,IAAMyc,EAAkC,CACpCmjB,gBAAiBl+B,KAAKw/D,oBAAoBn4D,EAAgBA,EAAeK,QAO7E,OAJI4N,IACAyF,EAAK+iB,iBAAmB99B,KAAKw/D,oBAAoBlqD,EAAiBjO,EAAeK,QAG9EqT,GAGH,YAAA0kD,gBAAR,SAAwBnhE,GACpB,OAAO,oBAASsgE,GAAmCtgE,IAG/C,YAAAkhE,oBAAR,SAA4BviE,EAAkByK,GAC1C,IAAMg4D,EAA+B,CACjCC,eAAgB1iE,EAAQU,SACxBG,KAAMb,EAAQa,KACdO,QAASpB,EAAQqB,YACjBshE,WAAY3iE,EAAQM,UACpBsiE,YAAa5iE,EAAQO,SACrBshC,YAAa7hC,EAAQmB,WACrBs8B,OAAQ16B,KAAKy/D,gBAAgBxiE,EAAQqB,aAAerB,EAAQiB,oBAAsBjB,EAAQe,gBAC1F0J,MAAK,GAWT,OARIzK,EAAQY,WACR6hE,EAAcI,gBAAkB7iE,EAAQY,UAGxCZ,EAAQsB,QACRmhE,EAAcnhE,MAAQtB,EAAQsB,OAG3BmhE,GAGG,YAAAe,aAAd,SAA2BpnD,G,gIACvB,SAAMrZ,KAAKm5B,4BAA4B15B,kBAAkB4Z,GAAWuc,a,cAApE,S,YAGI,YAAAspC,WAAR,SAAmBx/D,GAAnB,WACI,OAAO,IAAI2P,SAAqC,SAACY,EAAS+L,GACtD,IAAM3U,EAAiB,EAAK0wB,OAAOzjB,WAAWjN,eAAe0R,oBACvDzD,EAAkB,EAAKyiB,OAAOzjB,WAAWgB,gBAAgBgE,qBAE/D,IAAKjS,EACD,MAAM,IAAI,IAAiB,IAAqBlO,uBAGpD,IAAM4mE,EAAoB,EAAKR,sBAAsBl4D,EAAgBiO,GAErE,IAAK,EAAKgrD,gBACN,MAAM,IAAI,KAAoB,KAAwBtxD,uBAG1D,EAAKsxD,gBAAgB1oB,UAAU,CAAE8oB,wBAAyBhhE,GAAYqgE,GAAmB,SAAAt/B,GACrF,OAAIA,EAAIu/B,SACG/vD,EAAQwwB,GAGfA,EAAIw/B,UACGjkD,EAAO,IAAI,SAGtBA,EAAO,IAAI,aAI3B,EA5JA,G,GCXA,WACI,WACYxO,GAAA,KAAAA,gBAOhB,OAJI,YAAAmyB,KAAA,WACI,OAAO3/B,KAAKwN,cAAcG,WARlB,4CASH3O,MAAK,WAAM,OAACyZ,OAAqCynD,OAAOS,aAErE,EATA,G,GCDA,WACI,WACY5oC,EACAwkB,GADA,KAAAxkB,SACA,KAAAwkB,sBAkBhB,OAfI,YAAAE,QAAA,SAAQpqC,EAA2BzT,GAC/B,OAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYlpC,EAASzT,KAG9E,YAAAi+C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAApN,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EArBA,GCQqB,GAArB,WAKI,WACYyjB,EACAwkB,EACAsK,EACAnnB,GAHA,KAAA3H,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAAnnB,0BA+GhB,OA5GI,YAAA9wB,WAAA,SAAWhQ,GAAX,WACYc,EAAA,EAAAA,SAIR,GAFAM,KAAK47B,eAAiB57B,KAAK+3B,OAAOzjB,WAAW6E,eAAeC,iBAAiB1Z,IAExEM,KAAK47B,eACN,MAAM,IAAI,IAAiB,IAAqB/hC,sBAGpD,OAAOmG,KAAK0/B,wBAAwBC,KAAK3/B,KAAK47B,eAAepnB,OAAO8lB,UAC/Dt7B,MAAK,SAAA4gC,GAGF,GAFA,EAAKC,kBAAoBD,GAEpBhhC,EAAQghC,WACT,MAAM,IAAI,KAAqB,uFAGnC,IAAM2xB,EAAgB3yD,EAAQghC,WAAW2xB,cAAgBlsD,SAAS+0B,eAAex7B,EAAQghC,WAAW2xB,cAOpG,OALIA,IACA,EAAKv3B,cAAgBu3B,EACrB,EAAKv3B,cAAc5D,iBAAiB,QAAS,EAAK+I,2BAG/C,EAAKpH,OAAOzjB,eAI/B,YAAA0kB,aAAA,WAUI,OATAh5B,KAAK47B,oBAAiBh8B,EAElBI,KAAKg6B,eACLh6B,KAAKg6B,cAAczD,oBAAoB,QAASv2B,KAAKm/B,0BAGzDn/B,KAAKg6B,mBAAgBp6B,EACrBI,KAAK6/B,uBAAoBjgC,EAElByP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY4J,EAAA,EAAAA,QACFT,EAAQ,CAAE6qB,eAAgBvgB,EAAQugB,gBAExC,IAAKpqB,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAKxI,KAAK47B,iBAAmB57B,KAAK47B,eAAexgB,qBAAuBpb,KAAK47B,eAAexgB,mBAAmBD,QAC3G,MAAM,IAAI,IAAiB,IAAqBthB,sBAIpD,IAAMugB,EAAcpa,KAAK47B,eAAexgB,mBAAmBhB,YAG3D,IAAKA,EACD,MAAM,IAAI,KAAqB,sGAGnC,OAAOpa,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WAAM,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAW,UAG3G,YAAAyiC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAAkkB,yBAAR,WACI,IAAM7rB,EAAQrU,KAAK+3B,OAAOzjB,WACpBpI,EAAWmI,EAAMnI,SAAS0I,cAC1B6E,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKxN,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAKmgB,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,IAAKyG,KAAK47B,iBAAmB57B,KAAK47B,eAAexgB,mBAC7C,MAAM,IAAI,IAAiB,IAAqBvhB,sBAGpD,MAAO,CACH6a,WAAY1U,KAAK47B,eAAexgB,mBAAmB1G,WACnDyrB,iBAAkBngC,KAAK47B,eAAexgB,mBAAmB+kB,iBACzDj/B,OAAQgL,EAASxD,SAASqmC,QAAQ,GAClC5mC,SAAUsR,EAAYtR,SAASG,KAC/B+3B,OAAQn0B,EAASG,KAAKjP,GACtBkjC,yBAAyB,EACzBr3B,YAAa,aAAe,cAK5B,YAAAk2B,yBAAR,SAAiC1J,GAG7B,GAFAA,EAAM4J,iBAEDr/B,KAAK6/B,kBAAV,CAIA,IAAMxtB,EAAUrS,KAAKkgC,2BACrBlgC,KAAK6/B,kBAAkB3zB,SAASmG,KARpC,sBADC,M,6CAWL,EAxHA,G,GCNA,WACI,WACY0lB,EACAwkB,GADA,KAAAxkB,SACA,KAAAwkB,sBAoBhB,OAjBI,YAAAE,QAAA,SAAQgV,EAAgC7yD,GACpC,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKu8C,oBAAoBhB,YAAY,gBAAKkW,EAAc,WAAY7yD,KAI5E,YAAAi+C,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAApN,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EAvBA,G,GCFA,WACI,WACYyjB,EACAwkB,GADA,KAAAxkB,SACA,KAAAwkB,sBAuBhB,OApBI,YAAAE,QAAA,SAAQpqC,EAA2BzT,GAC/B,IAAMwT,EAASpS,KAAKu8C,oBAAoBhB,YAAY,yCAC7ClpC,GAAO,CACV7J,QAAS6J,EAAQ7J,QAAU,CAAE9I,SAAU2S,EAAQ7J,QAAQ9I,eAAaE,IACrEhB,GAEH,OAAOoB,KAAK+3B,OAAOe,SAAS1mB,IAGhC,YAAAyqC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAApN,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EA1BA,G,GCIA,WACI,WACYyjB,EACAwkB,EACAsK,GAFA,KAAA9uB,SACA,KAAAwkB,sBACA,KAAAsK,wBAqDhB,OAlDI,YAAApK,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACXo4D,EAAe5gE,KAAK6gE,yBAAyBr4D,GAAW6J,EAAUtK,EAClEqS,EAAc5R,GAAWA,EAAQ4R,YACjChe,EAAege,GAAgBA,EAAkChe,aACjEooD,EAAuBpqC,GAAgBA,EAAiCoqC,qBAE9E,IAAKh8C,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYqlB,EAAchiE,IAC1EI,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB3qC,yBAC5C1T,EAAQ9I,SACR8I,EAAQ6Q,UACRjd,EACAooD,QAIhB,YAAA3H,SAAA,SAASj+C,GACL,IAAMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpBvM,EAAQsM,EAAMtM,MAAMkR,WACpB9d,EAASkZ,EAAM7L,QAAQolB,mBAE7B,OAAI7lB,GAAU5M,IAAW,MAAkCA,IAAW,KAI/DkU,QAAQ2M,OAAO,IAAI,IAHfhc,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBf,cAAczzC,EAAMK,QAASxJ,KAM1F,YAAAgQ,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAAusD,yBAAR,SAAiCr4D,GAG7B,QAAKA,IAIwB,UAAtBA,EAAQ6Q,WAA+C,gBAAtB7Q,EAAQ6Q,WAAoD,iBAArB7Q,EAAQ9I,WAE/F,EAzDA,G,GCDA,YACI,WACI+S,EACA0rD,EACAC,EACAC,EACQC,GALZ,MAOI,YACI7rD,EACA0rD,EACAC,EACAC,IACH,K,OAPO,EAAAC,oB,EA+ChB,OArDsD,yBAgB5C,YAAA1vD,WAAN,SAAiBhQ,G,wIACb,SAAM,YAAMgQ,WAAU,UAAChQ,I,cAAvB,SAE0B2yB,EAA8BvxB,KAAK+3B,OAAOzjB,WAAU,wCACxE4E,EAAgBqY,EAAwB3yB,EAAQc,WAEpC8U,OAAOo7C,aACrB,GAAM5vD,KAAKs+D,kBAAkBxH,QAAQ59C,IADrC,M,OACA,S,iBAGJ,MAAO,CAAP,EAAOlZ,KAAK+3B,OAAOzjB,oBAGvB,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GACvB,QAAA4J,QAAW,oBAAA9I,gBAAA,IAAW,EAAX,KACb,yBAAakuB,EAAA,UAAAA,iBAAsC2D,EAAA,iBAAAA,wBAEzD,OAAI3D,MAAuB,KAChB5tB,KAAK+3B,OAAOe,SACf94B,KAAKu8C,oBAAoBhB,YAAY,yCAC9BlpC,GAAO,CACV7J,QAAS,CAAE9I,SAAQ,KACpBd,IAIP2yB,EAAwB7xB,GAAU8U,OAAOo7C,aAClC5vD,KAAKs+D,kBAAkBtH,MAC1B,YAAMva,QAAQtkD,KAAK6H,MACnBqS,EACAzT,EACAoB,KAAKi+D,aAIN,YAAMxhB,QAAO,UAACpqC,EAASzT,IAEtC,EArDA,CAAsD,I,GCGtD,WAKI,WACYm5B,EACAwkB,EACA/uC,EACAC,QAAA,IAAAA,MAAA,QAHA,KAAAsqB,SACA,KAAAwkB,sBACA,KAAA/uC,gBACA,KAAAC,UANJ,KAAAqzD,kBAA4B,EA8GxC,OArGI,YAAAlyD,WAAA,SAAWhQ,GAAX,WACUyV,EAAQrU,KAAK+3B,OAAOzjB,WAK1B,OAHAtU,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiBxa,EAAQc,UACpEM,KAAK8gE,kBAAwF,KAApEliE,EAAQmiE,eAAiBniE,EAAQmiE,cAAcC,iBAEnEhhE,KAAKihE,sBAIHjhE,KAAKwN,cAAcU,aACrBlP,MAAK,SAAAmP,GAGF,GAFA,EAAK+yD,WAAa/yD,GAEb,EAAKytB,iBAAmB,EAAKA,eAAepnB,OAAO6lB,WACpD,MAAM,IAAI,IAAiB,IAAqBxgC,sBAGpD,EAAKqnE,WAAWh1D,SAAS+rD,MAAM,EAAKr8B,eAAepnB,OAAO6lB,WAAY,CAClE2F,OAAQ,gBACRinB,YAAa,EAAKrrB,eAAepnB,OAAO8lB,SAAW,UAAY,kBAGtEt7B,MAAK,WAAM,SAAK+4B,OAAOzjB,cAhBjBjF,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAmB3C,YAAA0kB,aAAA,WAMI,OALIh5B,KAAKihE,uBAAyBjhE,KAAKkhE,aACnClhE,KAAKkhE,WAAWh1D,SAASi1D,YACzBnhE,KAAKkhE,gBAAathE,GAGfyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACUuP,EAASnO,KAAKkhE,WAEpB,GAAIlhE,KAAKohE,6BACL,OAAOphE,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYlpC,EAASzT,IAG9E,IAAKoB,KAAKihE,uBAAyBjhE,KAAK8gE,iBACpC,OAAO9gE,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYlpC,EAASzT,IACrEI,MAAK,SAAAqV,GACF,IAAMkf,EAAclf,EAAM7L,QAAQqlB,wBAOlC,OALI0F,IACA,EAAK9lB,QAAQm6B,IAAIlvB,SAASnT,KAAOguB,GAI9B,IAAIlkB,SAAe,kBAItC,IAAKlB,EACD,MAAM,IAAI,KAAoB,KAAwBa,uBAK1D,OAFAb,EAAOjC,SAASm1D,SAETrhE,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYlpC,EAASzT,IACrEI,MAAK,SAAAqV,GACF,IAAMkf,EAAclf,EAAM7L,QAAQqlB,wBAOlC,OALI0F,GACAplB,EAAOjC,SAASo1D,UAAU/tC,GAIvB,IAAIlkB,SAAe,kBAE7B/P,OAAM,SAAAC,GAGH,OAFA4O,EAAOjC,SAASi1D,YAET9xD,QAAQ2M,OAAOzc,OAIlC,YAAAs9C,SAAA,SAASj+C,GACL,IACMmJ,EADQ/H,KAAK+3B,OAAOzjB,WACNvM,MAAMkR,WAE1B,OAAIlR,GAAS/H,KAAKohE,6BACPphE,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBf,cAAczzC,EAAMK,QAASxJ,IAG/EyQ,QAAQ2M,OAAO,IAAI,KAGtB,YAAAolD,2BAAR,WACI,IAAM/sD,EAAQrU,KAAK+3B,OAAOzjB,WAE1B,OAAOD,EAAM7L,QAAQolB,qBAAuB,MACrCvZ,EAAM7L,QAAQolB,qBAAuB,MAGxC,YAAAqzC,oBAAR,WACI,SAAUjhE,KAAK47B,iBAAkB57B,KAAK47B,eAAepnB,OAAO6lB,aAEpE,EAjHA,G,aCFA,WAEI,WACYtC,EACAwkB,EACAsK,EACA3lB,EACAqgC,GAJA,KAAAxpC,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA3lB,+BACA,KAAAqgC,kCAwDhB,OArDI,YAAA3yD,WAAA,SAAW,G,IAAE4yD,EAAA,EAAAA,eAGT,OAFAxhE,KAAKuhE,gCAAgC3yD,WAAW,CAAE6yD,QAASD,GAAkBA,EAAeC,UAErFpyD,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGjC,YAAAmoC,QAAN,SAAcpqC,EAA2BzT,G,gJAKrC,GAJQ4J,EAAsB6J,EAAO,QAAjBtK,EAAK,iBAAKsK,EAAxB,aACAgC,EAAQrU,KAAK+3B,OAAOzjB,WACpB4E,EAAgB7E,EAAM8E,eAAeoY,wBAAwB3yB,EAAQc,WAEtE8I,EACD,MAAM,IAAI,GAA4B,CAAC,Y,OAG3B,EAAA0Q,EAAckC,mBAAmBhT,SAAjC,MAA4C,GAAMpI,KAAK0hE,YAAY9iE,EAAQc,W,SAA/B,S,iBAY5D,OAVM0a,EAAe,CACjB5d,iBAAkB,CACdkoD,yBAA0B,KAC1BgS,YAAa,KACbC,eAAgB,CACZ30B,SAPI,KAYhB,GAAMhiC,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,K,OAEvE,OAFA,SAEO,CAAP,EAAOoB,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAW,eAGlG,YAAAyiC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,WAGI,OAFAh5B,KAAKuhE,gCAAgCvoC,eAE9B3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGzB,YAAAotD,YAAd,SAA0BhiE,G,8IAGU,OAF1B2U,EAAQrU,KAAK+3B,OAAOzjB,WACpBjI,EAAOgI,EAAMhI,KAAKiiB,iBACQ,GAAMtuB,KAAKkhC,6BAA6BY,aAAapiC,EAAU2M,EAAKjP,K,cAA9F,EAA0B,SAAxBukE,EAAU,aAAEv5D,EAAO,UAEvBu5D,EACA,GAAM3hE,KAAKuhE,gCAAgCK,cAAcD,IADzD,M,OACA,S,iBAGJ,MAAO,CAAP,EAAOv5D,WAEf,EA/DA,G,aCGA,WAKI,aAJQ,KAAAqF,QAAUgL,OAgGtB,OA1FI,YAAA7J,WAAA,SAAW,G,IAAE6yD,EAAA,EAAAA,QACTzhE,KAAKi0D,SAAW,IAAI,GAAQ,CAAEX,gBAAgB,EAAMC,UAAWvzD,KAAK6hE,oBAAoBJ,MAG5F,YAAAG,cAAA,SAAcD,GAAd,WACI,OAAO,IAAItyD,SAAQ,SAACY,EAAS+L,GACzB,IAAM8lD,EAAgB,EAAKC,mBAErBC,EAAc,SAACC,EAAoBC,QAAA,IAAAA,OAAA,GACrC,EAAKz0D,QAAQ8oB,oBAAoB,UAAW4rC,GAExC,EAAKC,SACL,EAAKA,OAAOz8B,QACZ,EAAKy8B,YAASxiE,GAGdsiE,GAAmB,EAAKjO,UACxB,EAAKA,SAASpB,SAGlBoP,EACMhyD,GAAQ,GACR+L,EAAO,IAAI,IAAiB,IAAqBriB,kBAGrDwoE,EAAiB,SAAC1sC,GACpB,GAAqB,mCAAjBA,EAAM7vB,QAAgE,2BAAjB6vB,EAAM7vB,OAA/D,CAIA,IAAMmV,EAAOgjB,KAAKgS,MAAMta,EAAM1a,MAEP,uBAAnBA,EAAKsnD,WAAsCtnD,EAAKunD,eAChD,EAAK70D,QAAQ8oB,oBAAoB,UAAW4rC,GAC5CH,GAAY,MAIpB,EAAKv0D,QAAQ2oB,iBAAiB,UAAW+rC,GACzC,EAAKC,OAAS,EAAK30D,QAAQ69C,KAAKqW,EAAY,UAAWG,GAEvD,IAAMS,EAAYC,aAAY,WACrB,EAAKJ,SAAU,EAAKA,OAAOK,SAC5BC,cAAcH,GAEdP,GAAY,MAEjB,KAEC,EAAK/N,UACL,EAAKA,SAASjvB,KAAK,CACf3D,QAAS,WAAM,SAAK+gC,OAAS,EAAKA,OAAOO,QAAUX,GAAY,IAC/DlO,aAAc,WAAM,OAAAkO,GAAY,GAAO,UAMvD,YAAAhpC,aAAA,WACIh5B,KAAKi0D,cAAWr0D,GAGZ,YAAAiiE,oBAAR,SAA4BjjE,QAAA,IAAAA,MAAA,IACxB,IAAMgkE,EAAWv9D,SAASw9D,yBACpB53D,EAAW5F,SAASC,cAAc,OAClCw9D,EAAez9D,SAASC,cAAc,UAe5C,OAbA2F,EAASkuC,UAAY,+BACrBluC,EAASyoD,UAAY90D,EAAQqM,UAAY,yKAEzC63D,EAAa3pB,UAAY,+BACzB2pB,EAAapP,UAAY90D,EAAQkkE,cAAgB,oBACjDA,EAAapmC,MAAMqmC,UAAY,OAC/BD,EAAapmC,MAAM4K,QAAU,QAC7Bw7B,EAAapmC,MAAMwF,MAAQ,QAC3B4gC,EAAapmC,MAAMsmC,eAAiB,YAEpCJ,EAASxjC,YAAYn0B,GACrB23D,EAASxjC,YAAY0jC,GAEdF,GAGH,YAAAb,iBAAR,WACI,MAAO,sBACIh9D,KAAKC,OAAOyT,OAAOgtC,OAAOrjB,OAtG1B,KAsGiD,GAAE,sBACpDr9B,KAAKC,OAAOyT,OAAOgtC,OAAOhe,MAtGxB,KAsG+C,GAAE,8GAIrE,EAjGA,G,GCDA,YACI,WACIh1B,EACA0rD,EACAC,EACAC,EACQ7iC,GALZ,MAOI,YAAM/oB,EAAO0rD,EAAoBC,EAAsBC,IAAkB,K,OAFjE,EAAA7iC,c,EAgChB,OAtCoD,yBAWhD,YAAAihB,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACI,OAAO,YAAM69C,QAAO,UAACpqC,EAASzT,GACzBU,OAAM,SAACC,GACJ,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMtE,KAAKI,OAAQ,CAAEiN,KAAM,4BAIlE,IAAI+G,SAAQ,WACf,EAAKmsB,YAAYmC,SAASp+B,EAAMtE,KAAKo8D,gBAAgB6B,QAAS,CAC1DkE,MAAO79D,EAAMtE,KAAKo8D,gBAAgBkC,mBAClC8D,QAAS99D,EAAMtE,KAAKo8D,gBAAgBiG,aACpCC,GAAIh+D,EAAMtE,KAAKo8D,gBAAgB+B,oBAChCx5D,EAAW,WARPyP,QAAQ2M,OAAOzc,OAatC,YAAAs9C,SAAA,SAASj+C,GACL,IAAMyV,EAAQrU,KAAK+3B,OAAOzjB,WACpBvM,EAAQsM,EAAMtM,MAAMkR,WAE1B,OAAIlR,GAASsM,EAAM7L,QAAQolB,qBAAuB,KACvC5tB,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBf,cAAczzC,EAAMK,QAASxJ,IAG/E,YAAMi+C,SAAQ,UAACj+C,IAE9B,EAtCA,CAAoD,I,aCNpD,YACI,WAAYpE,GAAZ,MACI,YAAMA,GAAW,8BAA4B,K,OAE7C,EAAKtD,KAAO,0BACZ,EAAKgC,KAAO,sB,EAEpB,OAPqD,yBAOrD,EAPA,CAAqD,OpB2DrD,SAAYuiE,GACR,qCACA,sBACA,mCACA,YACA,0BACA,4BACA,wBACA,cACA,gCATJ,CAAYA,QAAS,KAYrB,SAAYC,GACR,sBACA,0BACA,cAHJ,CAAYA,QAAiB,KqBzD7B,I,GAAA,WAMI,WACY3jC,EACA+B,EACAyiB,EACAsK,EACA1tB,EACA+3B,EACAxyD,EACA8O,GAPA,KAAAuqB,SACA,KAAA+B,yBACA,KAAAyiB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAA+3B,gCACA,KAAAxyD,iBACA,KAAA8O,gBAyPhB,OAtPI,YAAAoB,WAAA,SAAWhQ,GAAX,WACYc,EAAA,EAAAA,SAIR,OAFAM,KAAKijE,mBAAmBvjE,GAEjBM,KAAKwN,cAAcmyB,OACrB3gC,MAAK,SAAAkkE,GACF,WAAI7zD,SAAQ,SAACY,EAAS+L,GAClB,EAAKmnD,aAAeD,EAChB,EAAKE,gBAAgBxkE,EAAS,CAAEqR,QAAO,EAAE+L,OAAM,KAEnD,EAAKmnD,aAAaE,cAEzBrkE,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAAmoC,QAAA,SAAQgV,EAAgC7yD,GAAxC,WACY4J,EAAA,EAAAA,QAER,IAAKA,IAAYA,EAAQ9I,SACrB,MAAM,IAAI,KAAqB,yFAKnC,OAFAM,KAAKijE,mBAAmBz6D,EAAQ9I,UAEzBM,KAAKsjE,oBAAoB96D,EAAQ9I,UACnCV,MAAK,SAAAob,GACF,SAAK2d,OAAOe,SAAS,EAAKyjB,oBAAoBhB,YAAY,gBAAKkW,EAAc,WAAY7yD,IACxFI,MAAK,WACF,SAAK+4B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAKvT,GAAO,CAAE4R,YAAW,aAIvG,YAAAyiC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAA2uD,mBAAR,SAA2BvjE,GACvB,IAAM2U,EAAQrU,KAAK+3B,OAAOzjB,WAG1B,GAFAtU,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IAEvDM,KAAK47B,iBAAmB57B,KAAK47B,eAAexgB,mBAC7C,MAAM,IAAI,IAAiB,IAAqBvhB,uBAIhD,YAAA0pE,gBAAR,SAAwB3U,GACpB,OAAQA,EAAY4U,eAChB,IAAK,aACD,MAAO,KACX,IAAK,YACD,MAAO,KACX,QACI,MAAO,OAIX,YAAAF,oBAAR,SAA4B5jE,GAA5B,WAEUwZ,EADQlZ,KAAK+3B,OAAOzjB,WACE6E,eAAeC,iBAAiB1Z,GAE5D,GAAIwZ,EAAe,CACP,IAAAkC,EAAA,EAAAA,mBACR,GAAIA,GAAsBA,EAAmBhB,YAAYoZ,MACrD,OAAOnkB,QAAQY,QAAQ,CAAEujB,MAAOta,EAAckC,mBAAmBhB,YAAYoZ,QAIrF,OAAO,IAAInkB,SAAyB,SAACY,EAAS+L,GAC1C,IAAK,EAAKmnD,aACN,MAAM,IAAI,KAAoB,KAAwBn0D,uBAGtD,EAAKy0D,uBACL,EAAKA,sBAAsBznD,OAAO,IAAI,MAG1C,EAAKynD,sBAAwB,CAAExzD,QAAO,EAAE+L,OAAM,GAC9C,EAAKmnD,aAAaO,uBAIlB,YAAAN,gBAAR,SAAwBxkE,EAAmC+kE,GAA3D,WACY,IAAAC,OAER,IAAKC,IAAkB7jE,KAAK47B,eACxB,MAAM,IAAI,KAAqB,wEAKnC,OAFA57B,KAAK8jE,eAAiBD,EAEf,4DACA7jE,KAAK8jE,gBACL9jE,KAAK47B,eAAexgB,oBAAkB,CACzC2oD,UAAW,CACPC,0BAA2B,SAAC3oE,EAAQm4B,EAAOywC,EAAUC,EAAgBC,GAC7DF,GAAYA,EAASG,sBAAwB1I,GAAkB2I,KAC/D,EAAKC,2BAA2BjpE,EAAQm4B,EAAOywC,EAAUC,EAAgBC,GAEzE,EAAKI,yBAAyBlpE,EAAQm4B,IAG9CgxC,qBAAsB,WAAM,SAAKC,0BACjCC,iBAAkB,SAAAC,GACN,IAAA/kC,EAAA,EAAAA,WAEJA,GACA,EAAKglC,oBAAoBD,EAAS/kC,IAG1CilC,kBAAmB,WACflB,EAAS1zD,UACT,EAAK60D,kBAETC,2BAA4B,WAAM,OAAApB,EAAS3nD,OAAO,IAAI,SAK1D,YAAAsoD,2BAAR,SACIjpE,EACAm4B,EACAywC,EACAC,EACAC,GAEA,IAAMlnC,EAAUj9B,KAAK8jE,gBAAkB9jE,KAAK8jE,eAAe7mC,SAAW,OAChE+yB,EAAkBhwD,KAAK8jE,gBAAkB9jE,KAAK8jE,eAAe9T,iBAAmB,OAElF30D,EACA4hC,EAAQ5hC,GACDm4B,GAASxzB,KAAK47B,gBACrB57B,KAAK84C,2BACD94C,KAAK47B,eAAex+B,GACpBo2B,EACAywC,EACAC,EACAC,GAECnlE,KAAKgxD,GACL1wD,MAAM29B,IAIX,YAAAsnC,yBAAR,SAAiClpE,EAAiCm4B,GAC9D,IAAKxzB,KAAKyjE,sBACN,MAAM,IAAI,KAAoB,KAAwBz0D,wBAGtDwkB,GAAUn4B,IAME2E,KAAK8jE,gBAAkB9jE,KAAK8jE,eAAe7mC,SAAW,QAE9D5hC,GAER2E,KAAKyjE,sBAAsBznD,OAAO3gB,IAT9B2E,KAAKyjE,sBAAsBxzD,QAAQ,CAAEujB,MAAK,KAY1C,YAAAslB,2BAAR,SACIp5C,EACA8zB,EACAywC,EACAC,EACAC,GALJ,WAOI,OAAOnkE,KAAK+3B,OAAOe,SAAS94B,KAAKkxD,8BAA8B9d,mBAAkB,WAC7E,OAAO,EAAKiH,yBAAyB7mB,EAAOywC,EAAUC,EAAgBC,GACrEnlE,MAAK,WACF,OAAAqQ,QAAQC,IAAI,CACZ,EAAKyoB,OAAOe,SAAS,EAAKgB,uBAAuB9kB,uBACjD,EAAK+iB,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkBC,WAE7E,CAAEA,SAAQ,IAAK,CAAEm5B,QAAS,uBAGzB,YAAA4rC,uBAAR,WACI,IAAMpwD,EAAQrU,KAAK+3B,OAAOzjB,WACpBpI,EAAWmI,EAAMnI,SAAS0I,cAC1B6E,EAAcpF,EAAMG,OAAOkF,iBAEjC,IAAKxN,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAKmgB,EACD,MAAM,IAAI,IAAiB,IAAqBlgB,uBAGpD,MAAO,CACHyrE,wBAAwB,EACxBC,oBAAoB,EACpBr2B,aAAcn1B,EAAYtR,SAASG,KACnChK,YAAa0B,KAAKujE,gBAAgB9pD,EAAYmB,aAAa20B,cAC3Dyd,MAAO,CACH3iC,MAAO5Q,EAAYmB,aAAasqD,UAChChkE,OAAQozC,OAAOpoC,EAASxD,UACxBy8D,SAAS,KAKb,YAAA9qB,yBAAR,SAAiC7mB,EAAgBywC,EAAqBC,EAA0BC,GAC5F,OAAOnkE,KAAKtB,eAAe2Z,KAAK,gBAAiB,CAC7Cnd,QAAS,CACL+E,OAAQ,YACR,eAAgB,qCAEpBhF,KAAM,CACFu4B,MAAK,EACL1I,SAAU,WACV1Y,OAAQ,wBACR6xD,SAAUlmC,KAAKC,UAAUimC,GACzBC,eAAgBnmC,KAAKC,UAAUkmC,GAC/BC,gBAAiBpmC,KAAKC,UAAUmmC,OAKpC,YAAAW,eAAR,WACI,IACMz9D,EADQrH,KAAK+3B,OAAOzjB,WACGjN,eAAe0R,oBAE5C,IAAK/Y,KAAKmjE,aACN,MAAM,IAAI,KAAoB,KAAwBn0D,uBAGtD3H,GAAkBA,EAAejJ,YACjC4B,KAAKmjE,aAAaiC,cAAc/9D,EAAejJ,aAI/C,YAAAwmE,oBAAR,SAA4BD,EAAqCtlB,GAC7D,IAAMgmB,EAAgBhgE,SAAS+0B,eAAeilB,EAAQimB,WAElDD,GAAiBV,EAAQ/kC,aACzBylC,EAAc3oC,MAAM4K,QAAU,iBAG1C,EAvQA,G,GCfA,WACI,WACY95B,GAAA,KAAAA,gBAWhB,OARI,YAAAmyB,KAAA,WAGI,OAAO3/B,KAAKwN,cAAcG,WAFR,oCAGb3O,MAAK,WAAM,gBAACJ,GACT,WAAK6Z,OAAmC8sD,cAAc3mE,QAGtE,EAbA,G,GCeA,WAII,WACYm5B,EACAoB,EACA0tB,EACAtK,EACAipB,GAJA,KAAAztC,SACA,KAAAoB,8BACA,KAAA0tB,wBACA,KAAAtK,sBACA,KAAAipB,sBA2PhB,OAxPU,YAAA52D,WAAN,SAAiBhQ,G,8IAGb,KAFM6mE,EAAgB7mE,EAAQusB,UAG1B,MAAM,IAAI,KAAqB,qFAKnC,KAFMjS,EAAgBlZ,KAAK+3B,OAAOzjB,WAAW6E,eAAeC,iBAAiBxa,EAAQc,WAGjF,MAAM,IAAI,IAAiB,IAAqB7F,sBAG7B,OAAvB,EAAAmG,KAAuB,GAAMA,KAAKwlE,oBAAoB7lC,KAClDzmB,EAAckC,mBAAmB21B,qBACjC73B,EAAckC,mBAAmBsqD,yB,OAQrC,OAVA,EAAKC,gBAAkB,SAGjBC,EAAW5lE,KAAK2lE,gBAAgBC,YAChCC,EAAcD,EAAS3tE,OAAO,OAAQ,CACxCykC,MAAO+oC,EAAc/oC,SAEb8sB,MAAM,IAAIic,EAAcrlD,aACpCpgB,KAAK8lE,aAAeD,EAEb,CAAP,EAAOx2D,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,qBAGvC,YAAAmoC,QAAA,SAAQpqC,EAA2BzT,GAAnC,WACY4J,EAAA,EAAAA,QAAS,kCACX4R,EAAc5R,GAAWA,EAAQ4R,YACjCoqC,EAAuBroD,QAAQie,GAAgBA,EAAiCoqC,sBAEtF,IAAKh8C,EACD,MAAM,IAAI,GAA4B,CAAC,YAG3C,OAAOxI,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,IACnEI,MAAK,WACF,OAAIob,GAAe,aAAoBA,GAC5B,EAAK2d,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAc,yCAAIvT,GAAO,CAAE4R,YAAW,MACxF9a,OAAM,SAAAC,GACH,OAAMA,aAAiB,MAAkB,gBAAKA,EAAMtE,KAAKI,OAAQ,CAAEiN,KAAM,4BAIlE,EAAKy9D,eAAeC,kBAAkBzmE,EAAMtE,KAAKo8D,gBAAgB36D,OACnEsC,MAAK,SAAAinE,GACF,GAAIA,EAAe1mE,QAAU0mE,EAAeC,cAAc9oE,GACtD,MAAM,IAAI,GAAyB6oE,EAAe1mE,OAAS0mE,EAAe1mE,MAAM/E,SAGpF,IAAM4uD,EAAiB,CACnB1pD,SAAU8I,EAAQ9I,SAClB0a,YAAa,CACToZ,MAAOyyC,EAAeC,cAAc9oE,KAI5C,OAAO,EAAK26B,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcqtC,OAhBlE/5C,QAAQ2M,OAAOzc,MAqB/B,EAAKw4B,OAAOe,SAAS,EAAKK,4BAA4B15B,kBAAkB+I,EAAQ9I,WAClFV,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB5Q,EAAQ9I,UAC9DwmE,EAAgBhtD,GAAiBA,EAAcrK,YAErD,IAAK,EAAKi3D,aACN,MAAM,IAAI,KAAoB,KAAwB92D,uBAG1D,OAAO,EAAK+2D,eAAeI,oBAAoB,OAAQ,EAAKL,aAAc,EAAKM,kCAC1EpnE,MAAK,SAAAqnE,GACF,GAAIA,EAAoB9mE,QAAU8mE,EAAoBntD,cAAc9b,GAChE,MAAM,IAAI,GAAyBipE,EAAoB9mE,OAAS8mE,EAAoB9mE,MAAM/E,SAG9F,IAAK0rE,EACD,MAAM,IAAI,IAAiB,IAAqBrsE,sBAGpD,IAAMysE,EAA2B,yCAC1B,EAAKC,6BAA6B/hB,IAAqB,CAC1DgiB,eAAgBH,EAAoBntD,cAAc9b,KAGtD,OAAO,EAAK2oE,eAAeC,kBAAkBE,EAAeI,MAE/DtnE,MAAK,SAAAinE,GACF,GAAIA,EAAe1mE,QAAU0mE,EAAeC,cAAc9oE,GACtD,MAAM,IAAI,GAAyB6oE,EAAe1mE,OAAS0mE,EAAe1mE,MAAM/E,SAGpF,IAAM4uD,EAAiB,CACnB1pD,SAAU8I,EAAQ9I,SAClB0a,YAAa,CACToZ,MAAOyyC,EAAeC,cAAc9oE,GACpConD,qBAAoB,IAI5B,OAAO,EAAKzsB,OAAOe,SAAS,EAAK+tB,sBAAsB9qC,cAAcqtC,cAMjG,YAAAvM,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAG9B,YAAAgd,aAAA,WAKI,OAJIh5B,KAAK8lE,cACL9lE,KAAK8lE,aAAaxd,UAGfj5C,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAG/B,YAAAyxD,aAAR,WACI,IAAK/lE,KAAK2lE,gBACN,MAAM,IAAI,KAAoB,KAAwB32D,uBAG1D,OAAOhP,KAAK2lE,iBAGR,YAAAc,yBAAR,SAAiCp/D,GAC7B,GAAKA,EAIL,MAAO,CACHvJ,KAAMuJ,EAAevJ,KACrBO,QAASgJ,EAAe/I,YACxBogC,MAAOr3B,EAAe1J,SACtBihC,MAAOv3B,EAAexJ,SACtBihC,YAAaz3B,EAAejJ,WAC5BiW,MAAOhN,EAAenJ,sBAItB,YAAAwoE,0BAAR,SAAkCpxD,GAC9B,OAAKA,EAIE,CACHxX,KAAMwX,EAAgBxX,KACtBO,QAASiX,EAAgBhX,YACzBogC,MAAOppB,EAAgB3X,SACvBihC,MAAOtpB,EAAgBzX,SACvBihC,YAAaxpB,EAAgBlX,WAC7BiW,MAAOiB,EAAgBpX,qBAThB,IAaP,YAAAyoE,yBAAR,SAAiC,G,IAAA,kBAAEt/D,EAAA,EAAAA,eAAgBD,EAAA,EAAAA,SACzCw/D,EAAuB,CACzB3pE,QAAS+C,KAAKymE,yBAAyBp/D,IAG3C,OAAID,EACO,yCACAw/D,GAAoB,CACvBl/D,MAAON,EAASM,MAChBxQ,KAASkQ,EAAS7J,UAAS,IAAI6J,EAAS5J,WAI5C6J,EACO,yCACAu/D,GAAoB,CACvBl/D,MAAOL,EAAeK,MACtBxQ,KAASmQ,EAAe9J,UAAS,IAAI8J,EAAe7J,WAIrD,CACHtG,KAAM,UAIN,YAAA2vE,0BAAR,SAAkC,G,IAAA,kBAAEvxD,EAAA,EAAAA,gBAAiBlO,EAAA,EAAAA,SAC3C0/D,EAAwB,CAC1B7pE,QAAS+C,KAAK0mE,0BAA0BpxD,IAG5C,OAAIlO,EACO,yCACA0/D,GAAqB,CACxB5vE,KAASkQ,EAAS7J,UAAS,IAAI6J,EAAS5J,WAI5C8X,EACO,yCACAwxD,GAAqB,CACxB5vE,KAASoe,EAAgB/X,UAAS,IAAI+X,EAAgB9X,WAIvD,yCACAspE,GAAqB,CACxB5vE,KAAM,WAIN,YAAA6vE,aAAR,WACI,IAAM3/D,EAAWpH,KAAK+3B,OAAOzjB,WAAWlN,SAAS4R,cAEjD,IAAI5R,GAC2B,KAAvBA,EAAS7J,WAA0C,KAAtB6J,EAAS5J,UAAsC,KAAnB4J,EAASM,MAK1E,OAAON,GAGH,YAAAm/D,6BAAR,SAAqC/hB,GACjC,IAAMp9C,EAAWpH,KAAK+mE,eAChBzxD,EAAkBtV,KAAK+3B,OAAOzjB,WAAWgB,gBAAgBgE,qBAEzD0tD,EAAkB,CACpB/8D,SAAUjK,KAAK6mE,0BAA0B,CAAEvxD,gBAAe,EAAElO,SAAQ,KAGxE,OAAIA,EACO,yCACA4/D,GAAe,CAClBC,oBAAqBziB,IAGlB,sBACAwiB,IAKP,YAAAZ,+BAAR,WACI,IAAMh/D,EAAWpH,KAAK+mE,eAChB1/D,EAAiBrH,KAAK+3B,OAAOzjB,WAAWjN,eAAe0R,oBAE7D,MAAO,CACHmuD,gBAAiBlnE,KAAK2mE,yBAAyB,CAAEt/D,eAAc,EAAED,SAAQ,MAGrF,EApQA,G,GCdA,WACI,WACYoG,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAiBhB,OAdI,YAAAkyB,KAAA,SAAKwnC,EAAwBC,GAA7B,WACI,OAAOpnE,KAAKwN,cACPG,WAAW,6BACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQ45D,OACd,MAAM,IAAI,IAGd,OAAO,EAAK55D,QAAQ45D,OAAOF,EAAgB,CACvCG,MAAO,CAAC,yBACRF,cAAa,QAIjC,EApBA,G,GCGA,WAGI,WACY55D,GAAA,KAAAA,gBAmBhB,OAhBI,YAAAoB,WAAA,sBACI,OAAO5O,KAAKwN,cACPG,WAXM,8CAYN3O,MAAK,WAAM,SAAKuoE,YAAe9uD,OAAkC+uD,MAAMC,QACvEzoE,MAAK,WAAM,aAGpB,YAAAy9D,aAAA,WACI,IAAKz8D,KAAKunE,YACN,MAAM,IAAI,KAAoB,KAAwBv4D,uBAK1D,OAFAhP,KAAKunE,YAAYG,sBAEV1nE,KAAKunE,YAAYI,kBAEhC,EAvBA,G,GCEA,YACI,WACIl1D,EACA0rD,EACAC,EACAC,EACQ1C,GALZ,MAOI,YAAMlpD,EAAO0rD,EAAoBC,EAAsBC,IAAkB,K,OAFjE,EAAA1C,mB,EAuBhB,OA7BkD,yBAW9C,YAAA/sD,WAAA,SAAWhQ,GAGP,OAFAoB,KAAK27D,iBAAiB/sD,aAEf,YAAMA,WAAU,UAAChQ,IAG5B,YAAA69C,QAAA,SAAQpqC,EAA2BzT,GAC/B,IAAMlC,EAAQsD,KAAK27D,iBAAiBc,eAC9BmL,EAAmB,iBAAM,GAAIv1D,EAAS,CACxC7J,QAAS,CACL4R,YAAa,CACTlb,gBAAiBxC,MAK7B,OAAO,YAAM+/C,QAAO,UAACmrB,EAAkBhpE,IAE/C,EA7BA,CAAkD,I,YCJlD,YACI,WAAYpE,GAAZ,MACI,YAAMA,GAAW,oFAAkF,K,OAEnG,EAAKtD,KAAO,6BACZ,EAAKgC,KAAO,mB,EAEpB,OAPwD,yBAOxD,EAPA,CAAwD,M,GCWxD,WAII,WACY6+B,EACAwkB,EACAsK,EACA1tB,EACAm1B,EACAuZ,EACAnpE,GANA,KAAAq5B,SACA,KAAAwkB,sBACA,KAAAsK,wBACA,KAAA1tB,8BACA,KAAAm1B,4BACA,KAAAuZ,mBACA,KAAAnpE,iBA2GhB,OAxGU,YAAAkQ,WAAN,W,sIACgB,SAAM5O,KAAK6nE,iBAAiBloC,Q,OAGxC,OAHMmoC,EAAM,SACZ9nE,KAAK+nE,WAAaD,EAEX,CAAP,EAAO9nE,KAAK+3B,OAAOzjB,oBAGvB,YAAA0kB,aAAA,WAII,OAHAh5B,KAAK47B,oBAAiBh8B,EACtBI,KAAK+nE,gBAAanoE,EAEXyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGjC,YAAAmoC,QAAN,SAAcpqC,EAA2BzT,G,uJAIrC,GAHQ4J,EAAsB6J,EAAO,QAAjBtK,EAAK,iBAAKsK,EAAxB,aACc21D,EAAchoE,KAAI,YAEjCwI,EACD,MAAM,IAAI,KAAqB,gFAGnC,IAAKw/D,EACD,MAAM,IAAI,KAAoB,KAAwBh5D,uBAG1D,SAAMhP,KAAK+3B,OAAOe,SAAS94B,KAAKu8C,oBAAoBhB,YAAYxzC,EAAOnJ,K,cAAvE,cAIuBgB,KAFfgzB,EAAmBvgB,EAAO,gBAE9B,MACA,GAAMrS,KAAK+3B,OAAOe,SAAS94B,KAAKsuD,0BAA0BpK,iBAAiBtxB,K,OAA3E,S,iBAGU,SAAM5yB,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkB+I,EAAQ9I,SAAUd,K,OAI9G,GAJMyV,EAAQ,SAEdrU,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiB5Q,EAAQ9I,WAE/DM,KAAK47B,iBAAmB57B,KAAK47B,eAAe/sB,YAC7C,MAAM,IAAI,IAAiB,IAAqBhV,sBAGtC,SAAM,IAAIwV,SAA4B,SAACY,EAAS+L,GAC1DgsD,EAAU9vB,SAASU,KAAK,CACpBvU,WAAY,SAAO,G,IAAE3vB,EAAA,EAAAA,WAAYL,EAAA,EAAAA,M,6HAC7B,MAAc,cAAVA,EACO,CAAP,EAAO2H,EAAO,IAAI,KAGR,aAAV3H,GAA4CK,EAC5C,GAAM1U,KAAKioE,gCAAgCz/D,EAAQ9I,SAAUgV,IAD7D,M,OAGA,OAFA,SAEO,CAAP,EAAOzE,K,OAGX,MAAc,aAAVoE,GAA4CK,EACrC,CAAP,EAAOzE,EAAQyE,IAGL,aAAVL,EACO,CAAP,EAAO2H,EAAO,IAAI,GAA2B,yFAGjDA,EAAO,IAAI,M,aAEfksD,WAAY,SAAAC,GACR,IAAK,EAAKvsC,iBAAmB,EAAKA,eAAe/sB,YAC7C,MAAM,IAAI,IAAiB,IAAqBhV,sBAGpDsuE,EAAUpqC,KAAKgS,MAAM,EAAKnU,eAAe/sB,qB,OAKrD,YAAcjP,KAjCR4zB,EAAQ,UAkCH,CAAP,EAAOxzB,KAAK+3B,OAAOe,SAAS94B,KAAK6mD,sBAAsB9qC,cAAc,CACjErc,SAAU8I,EAAQ9I,SAClB0a,YAAa,CAAEoZ,MAAK,OAIrB,CAAP,EAAOxzB,KAAK+3B,OAAOzjB,oBAGvB,YAAAuoC,SAAA,WACI,OAAOxtC,QAAQ2M,OAAO,IAAI,KAGtB,YAAAisD,gCAAR,SAAwCn9C,EAAkBs9C,GACtD,IAAMjoE,EAAM,2BAA2B2qB,EAAQ,oBACzClsB,EAAU,CACZ1D,QAAS,CACL+E,OAAQ,IAAYC,OACpB,iBAAkB,MAEtBjF,KAAM,CACFmtE,WAAU,EACVt9C,SAAQ,IAIhB,OAAO9qB,KAAKtB,eAAe2Z,KAAKlY,EAAKvB,IAE7C,EAtHA,G,GCbA,WACI,WACY4O,EACDC,QAAA,IAAAA,MAAA,QADC,KAAAD,gBACD,KAAAC,UAcf,OAXI,YAAAkyB,KAAA,sBACI,OAAO3/B,KAAKwN,cACPG,WAAW,wDACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQ46D,IACd,MAAM,IAAI,IAGd,OAAO,EAAK56D,QAAQ46D,QAGpC,EAjBA,GC8Ce,SAASC,GACpB71D,EACA81D,EACA5lC,EACA6lC,EACAr0B,GAEA,IAAMtR,EAAW,IAAI,GAAwBpwB,EAAO,CAAEk6B,aAAc,GAAoB0Y,cAClFviB,EAAe,4BACf2lC,EAA4B,IAAI,KAChCC,EAAuB,IAAI,KAAqBH,GAChDI,EAA8B,IAAI,IACpC,IAAI,IAA4BhmC,GAChC,IAAI,KAA2B,IAAI,KAA2BA,KAE5DimC,EC1DK,SAAyC9lC,GACpD,IAAM0S,EAAwB,IAAI,IAAsB1S,GAClD2S,EAAsB,IAAI,IAAoBD,GAC9CisB,EAAU,IAAI,GAEpB,OAAO,IAAI,GAA0BhsB,EAAqBgsB,GDqDxBoH,CAAgC/lC,GAC5DgmC,EAAwB,IAAI,IAAsBnmC,GAClDomC,EAAoB,IAAI,GAAkBD,GAC1CE,EAA8B,IAAI,GAA4BR,EAAgB,IAAI,GAA4B7lC,IAC9Gw7B,EAAqB,IAAI,GAAmB,IAAI,GAAmBx7B,GAAgBomC,GACnFE,EAA2B,IAAI,GAAyB,IAAI,GAAyBtmC,IACrFumC,EAAkC,IAAI,GAAgCnpB,GAAqB,iCAC3Fqe,EAAuB,IAAI,GAAqBsK,EAAsBvK,EAAoBsK,EAA2BS,GACrHC,EAA6B,IAAI,IAA2B,IAAI,IAA2BxmC,IAC3FymC,EAA8B,IAAI,GAA4B,IAAI,GAA4BzmC,IAC9F0mC,EAAsB,IAAI,IAAoB,IAAI,IAAoB1mC,IACtEI,EAAwB,IAAI,IAAsB+lC,EAAuBO,GACzEC,EAA+B,IAAI,GAA6BzmC,EAAUs7B,EAAoB6K,GAC9FpmC,EAAa,6BACby7B,EAAoB,IAAI,GAAkB5rD,GAsYhD,OApYAowB,EAAStmB,SAAS,GAAoBgtD,SAAS,WAC3C,WAAI,GACA92D,EACA2rD,EACAD,EACA,IAAI,GAAoBr7B,EAAc,iCACtCqR,MAIRtR,EAAStmB,SAAS,GAAoBitD,mBAAmB,WACrD,WAAI,GACA/2D,EACAswB,EACAomC,EACAG,EACAlL,EACAD,EACA,YACI1rD,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,GAAoBktD,QAAQ,WAC1C,WAAI,GACAh3D,EACA0rD,EACAC,EACA+K,EACA,IAAI,OAIZtmC,EAAStmB,SAAS,GAAoBmtD,UAAU,WAC5C,WAAI,GACAj3D,EACAs2D,EACA5K,EACAC,EACA+K,EACAF,EACA,IAAI,GAAqBnmC,OAIjCD,EAAStmB,SAAS,GAAoBotD,QAAQ,WAC1C,WAAI,GACAl3D,EACA0rD,EACAwK,EACAS,EACA,IAAI,EAAsBtmC,OAIlCD,EAAStmB,SAAS,GAAoBqtD,yBAAyB,WAC3D,WAAI,GACAn3D,EACAswB,EACAomC,EACAG,EACAlL,EACAD,EACA,YACI1rD,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,GAAoBstD,aAAa,WAC/C,WAAI,GACAp3D,EACA62D,EACAH,EACAhL,EACAC,EACA,YAAkC3rD,OAI1CowB,EAAStmB,SAAS,GAAoButD,YAAY,WAC9C,WAAI,GACAr3D,EACA0rD,EACAC,MAIRv7B,EAAStmB,SAAS,GAAoB8oC,aAAa,WAC/C,WAAI,GACA5yC,EACA0rD,EACAC,EACAC,MAIRx7B,EAAStmB,SAAS,GAAoBwtD,aAAa,WAC/C,WAAI,GACAt3D,EACA0rD,EACAC,EACAC,EACA,IAAI,GACA5rD,EACA2rD,EACA+K,EACA,IAAI,GAAe,IAAI,GAAqBrmC,SAKxDD,EAAStmB,SAAS,GAAoBytD,QAAQ,WAC1C,WAAI,GACAv3D,EACA0rD,EACAgL,EACAC,EACA,IAAI,GAAmBtmC,OAI/BD,EAAStmB,SAAS,GAAoByoC,UAAU,WAC5C,WAAI,GACAvyC,EACA0rD,EACAgL,EACAC,EACA,IAAI,GAAqBtmC,OAIjCD,EAAStmB,SAAS,GAAoB4oC,QAAQ,WAC1C,WAAI,GACA1yC,EACA0rD,MAIRt7B,EAAStmB,SAAS,GAAoBxf,SAAS,WAC3C,WAAI,GACA0V,EACA0rD,MAIRt7B,EAAStmB,SAAS,GAAoB6oC,SAAS,WAC3C,WAAI,GACA3yC,EACA0rD,EACAC,MAIRv7B,EAAStmB,SAAS,GAAoB0tD,QAAQ,WAC1C,WAAI,GACAx3D,EACA0rD,EACAC,EACAC,EACA,IAAI,GACA5rD,EACA2rD,EACA+K,EACA,IAAI,GAAe,IAAI,GAAqBrmC,SAKxDD,EAAStmB,SAAS,GAAoB2tD,gBAAgB,WAClD,WAAI,GACAz3D,EACA0rD,EACA,IAAI,KAAmBr7B,OAI/BD,EAAStmB,SAAS,GAAoB4tD,uBAAuB,WACzD,WAAI,GACA13D,EACA0rD,EACA,IAAI,KAAmBr7B,OAI/BD,EAAStmB,SAAS,GAAoB6tD,iBAAiB,WACnD,WAAI,GACA33D,EACA0rD,EACAC,EACA,IAAI,KAA4Bz7B,GAChC,IAAI,OAIZE,EAAStmB,SAAS,GAAoB8tD,wBAAwB,WAC1D,WAAI,GACA53D,EACA0rD,EACAC,EACA,IAAI,KAA4Bz7B,GAChC,IAAI,OAIZE,EAAStmB,SAAS,GAAoB+tD,UAAU,WAC5C,WAAI,GACA73D,EACA0rD,EACAC,EACAC,EACAz7B,MAIRC,EAAStmB,SAAS,GAAoBguD,QAAQ,WAC1C,WAAI,GACA93D,EACAswB,EACAo7B,EACAC,EACA+K,EACAG,EACA3mC,EACA,IAAI,GAAmBG,OAI/BD,EAAStmB,SAAS,GAAoBqgC,0BAA0B,WAC5D,WAAI,GACAnqC,EACA0rD,MAIRt7B,EAAStmB,SAAS,GAAoBiuD,WAAW,WAC7C,WAAI,GACA/3D,EACA0rD,EACAC,EACA+K,EACAP,MAIR/lC,EAAStmB,SAAS,GAAoBymB,kBAAkB,WACpD,WAAI,GACAvwB,EACA0rD,EACAC,EACA+K,EACAP,MAIR/lC,EAAStmB,SAAS,GAAoB0mB,yBAAyB,WAC3D,WAAI,GACAxwB,EACA0rD,EACAC,EACA+K,EACAP,GACA,MAIR/lC,EAAStmB,SAAS,GAAoBkuD,yBAAyB,WAC3D,WAAI,GACAh4D,EACAswB,EACAomC,EACAG,EACAlL,EACAD,EACA5oB,EAA4CzS,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAAStmB,SAAS,GAAoBmuD,WAAW,WAC7C,WAAI,GACAj4D,EACAswB,EACAo7B,EACAC,EACA+K,EACAG,EACA3mC,EACA,IAAI,EAAqBG,GACzB,IAAI,GAAgBA,OAI5BD,EAAStmB,SAAS,GAAoBouD,sBAAsB,WACxD,WAAI,GACAl4D,EACAswB,EACAomC,EACAG,EACAlL,EACAD,EACA,YACI1rD,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBqwB,UAO9CD,EAAStmB,SAAS,GAAoBquD,QAAQ,WAC1C,WAAI,GACAn4D,EACA0rD,EACAC,EACAC,EACA,IAAI,GAAgBv7B,OAI5BD,EAAStmB,SAAS,GAAoB2mB,YAAY,WAC9C,WAAI,GACAzwB,EACA0rD,EACAC,EACA,IAAI,IAAuBt7B,OAInCD,EAAStmB,SAAS,GAAoBsuD,mBAAmB,WACrD,WAAI,GACAp4D,EACAswB,EACAomC,EACAG,EACAlL,EACAD,EACA,YACI1rD,EACA,IAAI,SAKhBowB,EAAStmB,SAAS,GAAoBuuD,KAAK,WACvC,WAAI,GACAr4D,EACA0rD,EACAC,EACA+K,EACAF,EACA,IAAI,GAAgBnmC,GACpBH,MAIRE,EAAStmB,SAAS,GAAoBwuD,UAAU,WAC5C,WAAI,GACAt4D,EACA0rD,EACAC,EACAx7B,MAIRC,EAAStmB,SAAS,GAAoByuD,UAAU,WAC5C,WAAI,GACAv4D,EACA02D,EACA/K,EACAD,EACA,IAAI,GAAmBr7B,OAI/BD,EAAStmB,SAAS,GAAoB0uD,MAAM,WACxC,WAAI,GACAx4D,EACA0rD,EACAC,MAIDv7B,E,gBE1cX,WACI,WACYqoC,GAAA,KAAAA,2BAyHhB,OAtHI,YAAAC,gBAAA,sBACI,OAAO,SAAA14D,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/BA,EAASC,KAAK,uBAAa,KAAqBonB,2BAEhD,IAAMklD,EAAU,EAAKC,mBAAmB54D,GAClC/V,EAAQ,EAAK4uE,uBAAuB74D,GACpC6C,EAAkB,EAAK82C,oBAAoB35C,GAEjD,OAAO,EAAK84D,qBAAqB7uE,GAC5BsC,MAAK,SAAAwsE,GACF,SAAKN,yBAAyBC,gBAAgB,yCACnCC,GAAO,CACVjxD,UAAWqxD,EAAalxD,mBAE5BhF,GAECtW,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBACV,KAAqBinB,yBACrB9qB,EACAuwE,IAEJ3sE,EAASQ,iBAGpBC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAqB+mB,sBAAuBlrB,YAK7F,YAAAqwE,iBAAA,SAAiBrvE,GAAjB,WACI,OAAO,SAAAqW,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/BA,EAASC,KAAK,uBAAa,KAAqBqnB,+BAA2BvmB,EAAW,CAAExD,aAAY,KAEpG,IAAMgvE,EAAU,EAAKC,mBAAmB54D,GAClC/V,EAAQ,EAAK4uE,uBAAuB74D,GAE1C,OAAO,EAAK84D,qBAAqB7uE,GAC5BsC,MAAK,SAAAwsE,GACF,SAAKN,yBAAyBO,iBAAiB,yCACxCL,GAAO,CACVjxD,UAAWqxD,EAAalxD,mBACzBle,GACE4C,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,KAAqBmnB,0BAA2BhrB,EAAM,oBAC7EmB,aAAY,GACTovE,KAEP3sE,EAASQ,iBAGpBC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAAqBgnB,uBAAwBnrB,EAAU,CAAEgB,aAAY,aAK9G,YAAAsvE,yBAAR,SAAiChvE,GAC7B,IAAKA,IAAUA,EAAM4d,iBACjB,OAAO,EAGX,IChF2BqxD,EAAYzqE,EACrC0qE,EDkFF,OEnFO,SAAkBD,GAC7B,OAAOA,EAAKE,UAAYnpE,KAAKujC,MFkFlB6lC,ECnFoBH,EDiFD,IAAIjpE,KAAKhG,EAAMqvE,mBCjFF7qE,EDgFlB,GC/EnB0qE,EAAU,IAAIlpE,KAAKipE,EAAKhpE,YAEtBqpE,WAAWL,EAAKM,aAAe/qE,GAEhC0qE,KDiFC,YAAAN,uBAAR,SAA+B74D,GACnB,IACFxT,EADE,aAAA4a,YACiBC,qBAEzB,GAAK7a,EAIL,MAAO,CACHqb,iBAAkBrb,EAAKqb,iBACvByxD,kBAAmB9sE,EAAK8sE,oBAIxB,YAAAR,qBAAR,SAA6B7uE,GACzB,OAAOA,GAASsD,KAAK0rE,yBAAyBhvE,GAC1C2S,QAAQY,QAAQvT,GAChBsD,KAAKkrE,yBAAyBgB,sBAAsBltE,MAAK,SAAC,GAAa,OAAX,EAAA/D,SAG5D,YAAAmxD,oBAAR,SAA4B35C,GAGxB,OAFcA,EAAM6B,WAEPgB,gBAAgBgE,sBAGzB,YAAA+xD,mBAAR,SAA2B54D,GACvB,IAAM4B,EAAQ5B,EAAM6B,WACdE,EAASH,EAAMG,OAAOkF,iBACtBrN,EAAOgI,EAAMhI,KAAKmJ,UAExB,IAAKhB,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAGpD,IAAK8S,EACD,MAAM,IAAI,IAAiB,IAAqBjT,aAOpD,MAAO,CACHmO,WALI,EAAAA,WAMJ4kE,QALI,eAAAA,QAMJv9B,cALI,gEAAAtmC,OAQhB,EA3HA,GGHA,I,GAAA,yBAiDA,OAhDI,YAAA8jE,kBAAA,SACIhxE,GAEA,IAAM,6BAAEH,EAAA,EAAAA,KAAM,+BAEd,OAAO,yCACAoX,GAAO,CACVpX,KAAM,CACF+qB,mBAAoBhmB,KAAKqsE,6BAA6BpxE,EAAKqxE,yBAKvE,YAAAC,uBAAA,SACInxE,GAEA,OAAO4E,KAAKic,mBAAmB7gB,IAGnC,YAAAoxE,6BAAA,SACIpxE,GAEA,OAAO,yCACAA,GAAQ,CACXH,KAAM,CACFqf,iBAAkBlf,EAASH,KAAK8f,KAAKre,MACrCqvE,kBAAmB3wE,EAASH,KAAK8f,KAAK0xD,eAK1C,YAAAJ,6BAAR,SAAqCrmD,GAArC,WACI,YADiC,IAAAA,MAAA,IAC1BA,EACFllB,KAAI,SAAA5E,GAAc,SAAKwwE,qBAAqBxwE,GCxClD,SAAgCA,GACnC,MAAO,CACH20B,YAAa30B,EAAWO,aACxBkwE,kBAAmBzwE,EAAW0wE,mBAC9B9hD,SAAU5uB,EAAW4uB,SACrBs9C,WAAYlsE,EAAW2wE,YACvBC,uBAAwB5wE,EAAW6wE,yBACnCrmE,OAAQxK,EAAWwK,OACnBxN,KAAMgD,EAAW8wE,YACjBC,KAAM/wE,EAAW+wE,KACjBC,OAAQhxE,EAAWgxE,QD8B4CC,CAAuBjxE,GExCvF,SAA6BA,GAChC,MAAO,CACH20B,YAAa30B,EAAWO,aACxBkwE,kBAAmBzwE,EAAW0wE,mBAC9B9hD,SAAU5uB,EAAW4uB,SACrBosC,IAAKh7D,EAAWg7D,IAChBtmB,MAAO10C,EAAWkxE,OAClBC,YAAanxE,EAAW6rD,aACxBulB,WAAYpxE,EAAW8rD,YACvBlkD,MAAO5H,EAAW4H,MAClBgpE,uBAAwB5wE,EAAW6wE,yBACnCrmE,OAASxK,EAAWwK,OACpBxN,KAAM,QF4B8Fq0E,CAAoBrxE,OAGpH,YAAAwwE,qBAAR,SAA6BxwE,GACzB,MAAkC,SAA3BA,EAAW8wE,aAAqD,YAA3B9wE,EAAW8wE,aAGnD,YAAA/wD,mBAAR,SAA8B7gB,GAClB,QAAA2f,KAAY,+BAEpB,OAAO,yCACA1I,GAAO,CACVpX,KAAI,KAGhB,EAjDA,G,GGCA,WAGI,WACYgU,EACAvQ,GADA,KAAAuQ,UACA,KAAAvQ,iBAERsB,KAAKwtE,aAAe,IAAI,GAkFhC,OA/EI,YAAAtB,oBAAA,SACI,G,IAAEnsE,QAAA,YAAAA,QAIF,OAAOC,KAAKtB,eAAelH,IAFf,uDAEwB,CAAEuI,QAAO,IAAIf,MAAK,SAAA5D,GAAY,OAAC,kBAAD,CAAC,sBAC5DA,GAAQ,CACXH,KAAM,CACFqf,iBAAkBlf,EAASH,KAAK8f,KAAKre,MACrCqvE,kBAAmB3wE,EAASH,KAAK8f,KAAK0xD,kBAKlD,YAAAtB,gBAAA,SACIsC,EACAn4D,GAEA,OAAO,EACHtV,KAAK0tE,4BAA4BD,EAAgBn4D,GACjDtV,KAAK2tE,iBAAiBF,IAG9B,YAAAhC,iBAAA,SACIgC,EACArxE,GAFJ,WAIUiW,EAAU,yCACTo7D,GAAc,CACjBrxE,aAAY,IAGhB,OAAO,IAAIiT,SAAQ,SAACY,EAAS+L,GACzB,EAAK/M,QAAQ2+D,wBACTv7D,GAAS,SACL6K,EACA9hB,GACE,OAAA8hB,EACFlB,EAAO,EAAKwxD,aAAajB,uBAAuBrvD,IAChDjN,EAAQ,EAAKu9D,aAAapB,kBAAkBhxE,WAKpD,YAAAuyE,iBAAR,SACIF,GADJ,WAGI,OAAO,IAAIp+D,SAAQ,SAACY,EAAS+L,GACzB,EAAK/M,QAAQk8D,gBACTsC,GAAgB,SACZvwD,EACA9hB,GACC,OAAA8hB,EACDlB,EAAO,EAAKwxD,aAAajB,uBAAuBrvD,IAChDjN,EAAQ,EAAKu9D,aAAapB,kBAAkBhxE,WAKpD,YAAAsyE,4BAAR,SACID,EACAn4D,GAFJ,WAIUjD,EAAU,yCACTo7D,GAAc,CACjBn4D,gBAAiB,aAAqBA,KAG1C,OAAO,IAAIjG,SAAQ,SAACY,EAAS+L,GACzB,EAAK/M,QAAQ4+D,2BACTx7D,GAAS,SACL6K,EACA9hB,GACC,OAAA8hB,EACDlB,EAAO,EAAKwxD,aAAajB,uBAAuBrvD,IAChDjN,EAAQ,EAAKu9D,aAAapB,kBAAkBhxE,WAIhE,EAzFA,G,gCCFA,WACI,WACY0yE,GAAA,KAAAA,gCAiBhB,OAdI,YAAA1yB,cAAA,SAAcx8C,GAAd,WACI,OAAO,aAAW3G,QAAO,SAAC4G,GACtBA,EAASC,KAAK,uBAAa,KAA0B0oB,iCAErD,EAAKsmD,8BAA8B1yB,cAAcx8C,GAC5CI,MAAK,SAAA5D,GACFyD,EAASC,KAAK,uBAAa,KAA0ByoB,+BAAgCnsB,EAASH,KAAK8f,OACnGlc,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,KAA0BkoB,4BAA6BrsB,WAI5G,EAnBA,G,GCHA,WACI,WACYsD,EACA28C,GADA,KAAA38C,iBACA,KAAA28C,UAWhB,OARI,YAAAD,cAAA,SAAc,G,IAAEr7C,QAAA,YAAAA,QAEN7E,EAAU,CACZ,kBAAmB8E,KAAKq7C,QAAQlH,QAGpC,OAAOn0C,KAAKtB,eAAelH,IALf,qCAKwB,CAAE0D,QAAO,EAAE6E,QAAO,KAE9D,EAdA,G,YCMA,WACI,WACYizC,GAAA,KAAAA,oBAyFhB,OAtFI,YAAAn8B,cAAA,SAAc5Z,EAAsC2B,GAApD,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAM2J,EAAUiK,EAAM6B,WAAW9L,QAAQmlB,eACnCjuB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnEvK,EAASC,KAAK,uBAAa,KAA2B6oB,4BAAwB/nB,EAAW,CAAEF,SAAQ,KAEnG,EAAKszC,kBAAkBx7C,IAAIkI,GACtBmX,cAAc5Z,EAAS,yCAAK2B,GAAO,CAAEc,SAAQ,KAC7CV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2B8oB,4BAAwBhoB,EAAW,CAAEF,SAAQ,KACnGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2BwoB,oBAAqBxoB,EAAO,CAAEG,SAAQ,aAKlH,YAAAquE,aAAA,SAAa93D,EAA0BrX,GAAvC,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAM2J,EAAUiK,EAAM6B,WAAW9L,QAAQmlB,eACnCjuB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnEvK,EAASC,KAAK,uBAAa,KAA2BkpB,2BAAuBpoB,EAAW,CAAEF,SAAQ,KAElG,EAAKszC,kBAAkBx7C,IAAIkI,GACtBquE,aAAa93D,EAAkB,yCAAKrX,GAAO,CAAEc,SAAQ,KACrDV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2BmpB,2BAAuBroB,EAAW,CAAEF,SAAQ,KAClGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2B6oB,mBAAoB7oB,EAAO,CAAEG,SAAQ,aAKjH,YAAAkP,WAAA,SAAWhQ,GAAX,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACd9L,EAAU6L,EAAM7L,QAAQmlB,eACxBjuB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAC7D4kE,EAAgB,yCAAKpvE,GAAO,CAAEc,SAAQ,IAE5C,GAAIA,GAAY2U,EAAMkgB,mBAAmB5S,cAAcjiB,GACnD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,KAA2B+iB,yBAAqBjiB,EAAW,CAAEF,SAAQ,KAEhG,EAAKszC,kBAAkBx7C,IAAIkI,GACtBkP,WAAWo/D,GACXhvE,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2B4iB,yBAAqB9hB,EAAW,CAAEF,SAAQ,KAChGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2ByiB,iBAAkBziB,EAAO,CAAEG,SAAQ,aAK/G,YAAAs5B,aAAA,SAAap6B,GAAb,WACI,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACd9L,EAAU6L,EAAM7L,QAAQmlB,eACxBjuB,EAAWd,GAAWA,EAAQc,UAAY8I,GAAWA,EAAQY,WAEnE,GAAI1J,IAAa2U,EAAMkgB,mBAAmB5S,cAAcjiB,GACpD,OAAOb,EAASQ,WAGpBR,EAASC,KAAK,uBAAa,KAA2BmjB,2BAAuBriB,EAAW,CAAEF,SAAQ,KAElG,EAAKszC,kBAAkBx7C,IAAIkI,GACtBs5B,aAAa,yCAAKp6B,GAAO,CAAEc,SAAQ,KACnCV,MAAK,WACFH,EAASC,KAAK,uBAAa,KAA2B8iB,2BAAuBhiB,EAAW,CAAEF,SAAQ,KAClGb,EAASQ,cAEZC,OAAM,SAAAC,GACHV,EAASU,MAAM,4BAAkB,KAA2B6iB,mBAAoB7iB,EAAO,CAAEG,SAAQ,aAIrH,EA3FA,G,GCKA,WAII,WACYq4B,EACAk2C,EACA90C,EACAqe,EACAhqC,GAJA,KAAAuqB,SACA,KAAAk2C,4BACA,KAAA90C,8BACA,KAAAqe,+BACA,KAAAhqC,gBAERxN,KAAKyN,QAAUgL,OAoJvB,OAjJI,YAAA7J,WAAA,SAAWhQ,GAAX,WACY,IAAA80C,OAAuBh0C,EAAA,EAAAA,SAE/B,IAAK+3C,IAAkB/3C,EACnB,MAAM,IAAI,KAAqB,wEAGnC,OAAOM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GAAS,WAAIhF,SAAQ,SAACY,EAAS+L,GAGjC,GAFA,EAAK4f,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IAEvD,EAAKk8B,eACN,MAAM,IAAI,IAAiB,IAAqB/hC,sBASpD,EAAK2T,cAAc6lC,WAAW,EAAKzX,gBANnB,WACZ,EAAKsyC,mBAAmBz2B,GACnBz4C,KAAKiR,GACL3Q,MAAM0c,MAIV1c,MAAM0c,SAEdhd,MAAK,WAAM,SAAK+4B,OAAOzjB,eAGhC,YAAA0kB,aAAA,WAGI,OAFAh5B,KAAK47B,oBAAiBh8B,EAEfyP,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAuC,cAAA,SAAc5Z,EAA6B2B,GACvC,IAAMuvE,EAA2B,yCAC1BnuE,KAAK+3B,OAAOzjB,WAAWgB,gBAAgBgE,sBAAoB,CAC9D9a,aAAcvB,EAAQuB,eAG1B,OAAOwB,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bp3D,cAAcs3D,EAA0BvvE,KAI/E,YAAAmvE,aAAA,SAAaK,EAAkBxvE,GAC3B,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bn4D,qBAAqBs4D,EAAUxvE,KAI9D,YAAAsvE,mBAAR,SAA2BtvE,GAA3B,WACI,OAAO,IAAIyQ,SAAQ,SAACY,EAAS+L,GACjB,IAAA2c,EAAA,EAAAA,UAAW,IAAA01C,uBAAA,IAAkB,EAAlB,eAA4B,IAAApxC,eAAA,IAAU,EAAV,eAAoB,IAAAgzB,eAAA,IAAU,EAAV,eAC7D51B,EAAa,EAAKuB,gBAAkB,EAAKA,eAAepnB,OAAO6lB,WAErE,IAAKh1B,SAAS+0B,eAAezB,GACzB,OAAO3c,EAAO,IAAI,KAAqB,8EAG3C,IAAK,EAAKvO,QAAQsmC,kBACd,OAAO/3B,EAAO,IAAI,KAAoB,KAAwB/J,yBAGlE,IAAKooB,EACD,OAAOre,EAAO,IAAI,IAAiB,IAAqBniB,uBAG5D,IAAM42D,EAAS,IAAI,EAAKhjD,QAAQsmC,kBAAkB2c,QAAQ4d,YAAY,CAClEle,OAAQ,CACJC,WAAY,cAEhBvY,MAAO,6EACP4X,SAAUr1B,EACVg0C,gBAAiB,SAAA/d,GACb,EAAKie,8BACAvvE,MAAK,WAAM,OAAAqvE,EAAgB/d,MAC3BhxD,MAAM29B,IAEfA,QAAS,SAAA19B,GACLyc,EAAOzc,GACP09B,EAAQ19B,IAEZ0wD,QAAS,SAAAK,GACL,EAAKE,sBAAsBF,GACtBtxD,MAAK,WACFiR,IACAggD,EAAQK,MAEXhxD,MAAM29B,MAMnB,OAFAwzB,EAAOt4D,KAAKwgC,GAEL83B,MAIP,YAAA8d,4BAAR,sBACU7uE,EAAWM,KAAK47B,gBAAkB57B,KAAK47B,eAAex+B,GACtDs2C,EAAS1zC,KAAK+3B,OAAOzjB,WAAW+f,eAAezf,YAAY,UAC3D46C,EAAc9b,EAASA,EAAO8b,iBAAc5vD,EAElD,IAAKF,IAAa8vD,EACd,MAAM,IAAI,KAGd,OAAOxvD,KAAK+3B,OAAOe,SACf,uBAAa,KAA2BnR,4BAAwB/nB,EAAW,CAAEF,SAAQ,KAEpFV,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,EAAK0e,6BAA6B1B,mBAAmBp2C,EAAU,CAAE8vD,YAAW,QAE/ExwD,MAAK,SAAAqV,GACF,IAAMq/B,EAASr/B,EAAMggB,eAAezf,YAAY,UAC1Cg8C,EAAgBld,GAAUA,EAAOzpC,UAAYypC,EAAOzpC,SAAShN,QAC7DA,EAAUoX,EAAMiB,gBAAgBgE,qBAEtC,IAAsB,IAAlBs3C,EACA,MAAM,IAAI,KAGd,OAAKA,GAAiB3B,GAAuB2B,EAAe3zD,GAAW,IAC5D,EAAK86B,OAAOzjB,WAGhB,EAAKyjB,OAAOe,SACf,EAAKm1C,0BAA0Bp3D,cAAcs4C,GAAuByB,QAG3E5xD,MAAK,WAAM,SAAK+4B,OAAOe,SACpB,uBAAa,KAA2BlR,4BAAwBhoB,EAAW,CAAEF,SAAQ,QAExFJ,OAAM,SAAAC,GAAS,SAAKw4B,OAAOe,SACxB,4BAAkB,KAA2B/Q,oBAAqBxoB,EAAO,CAAEG,SAAQ,SAIvF,YAAA8wD,sBAAR,SAA8BF,GAC1B,OAAOtwD,KAAK+3B,OAAOe,SACf94B,KAAKw3C,6BAA6B7iC,eAAe,SAAU,CACvD66C,YAAac,EAAeQ,gCAI5C,EA/JA,G,GCLA,WAGI,WACY/4B,EACAk2C,EACA90C,EACAY,GAHA,KAAAhC,SACA,KAAAk2C,4BACA,KAAA90C,8BACA,KAAAY,+BAmEhB,OAhEI,YAAAljB,cAAA,WACI,OAAOxH,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAAy5D,aAAA,SAAaK,EAAkBxvE,GAC3B,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bn4D,qBAAqBs4D,EAAUxvE,KAIhE,YAAAgQ,WAAN,SAAiBhQ,G,8IAGb,GAFQo5C,EAAwBp5C,EAAO,UAApBc,EAAad,EAAO,UAElCo5C,IAAct4C,EACf,MAAM,IAAI,KAAqB,2EAGrB,SAAMM,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,K,OAG5F,GAHM2U,EAAQ,SACdrU,KAAK47B,eAAiBvnB,EAAM8E,eAAeC,iBAAiB1Z,IAEvDM,KAAK47B,eACN,MAAM,IAAI,IAAiB,IAAqB/hC,sBAGpD,SAAMmG,KAAK+5B,6BAA6BnrB,WAAWlP,I,OASnD,OATA,SAEQ2xD,EAAiBrxD,KAAK47B,eAAexgB,mBAAkB,aACzDk2C,EAAWtZ,EAAUuZ,aAEvBF,GAAgBC,GAChBtxD,KAAKwxD,gBAAgBF,EAAUD,EAAc,iBAG1C,CAAP,EAAOrxD,KAAK+3B,OAAOzjB,oBAGjB,YAAA0kB,aAAN,W,gIACI,SAAMh5B,KAAK+5B,6BAA6Bf,gB,OAExC,OAFA,SAEO,CAAP,EAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,qBAG/B,YAAAk9C,gBAAR,SAAwBp0D,EAAY48C,EAAmB4X,GAAvD,WACU5xB,EAAS36B,SAAS+0B,eAAeh9B,GAEvC,GAAK4iC,EAAL,CAIA,IAAM6xB,EAAQ7xB,EAAO8xB,WAAU,GAC/B9xB,EAAO+xB,YAAYF,GAEnBA,EAAMz7B,iBAAiB,SAAS,WAAM,SAAKu7B,yBAE3C3xD,KAAK+5B,6BAA6Bi4B,WAAW50D,EAAI48C,EAAW4X,KAGxD,YAAAD,oBAAR,WACI,IAAMjyD,EAAWM,KAAK47B,gBAAkB57B,KAAK47B,eAAex+B,GAE5D,OAAO4C,KAAK+3B,OAAOe,SACf,uBAAa,KAA2BnR,4BAAwB/nB,EAAW,CAAEF,SAAQ,MAGjG,EA1EA,G,GCLA,WACI,WACYq4B,EACAk2C,GADA,KAAAl2C,SACA,KAAAk2C,4BAsBhB,OAnBI,YAAAp3D,cAAA,SAAc5Z,EAA6B2B,GACvC,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bp3D,cAAc5Z,EAAS2B,KAI9D,YAAAmvE,aAAA,SAAaK,EAAkBxvE,GAC3B,OAAOoB,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bn4D,qBAAqBs4D,EAAUxvE,KAItE,YAAAgQ,WAAA,WACI,OAAOS,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAGvC,YAAA0kB,aAAA,WACI,OAAO3pB,QAAQY,QAAQjQ,KAAK+3B,OAAOzjB,aAE3C,EAzBA,G,ICJKk6D,G,YCSL,WACI,WACY9vE,GAAA,KAAAA,iBAkBhB,OAfI,YAAA+vE,gBAAA,SACIC,EACA9vE,GAFJ,WAII,OAAO,iBACH,aAAG,uBAAa,KAAsB6pB,2BACtC,iBAAM,kE,4EACe,SAAMzoB,KAAKtB,eAAe+vE,gBAAgBC,EAAc9vE,I,OAEzE,OAFQ3D,EAAS,SAAgE,KAE1E,CAAP,EAAO,uBAAa,KAAsButB,yBAA0BvtB,eAE1EuX,KACE,uBAAW,SAAAjT,GAAS,oBAAiB,KAAsBmpB,sBAAuBnpB,QAG9F,EApBA,G,GCJA,WACI,WACYb,GAAA,KAAAA,iBAoBhB,OAjBI,YAAA+vE,gBAAA,SACI,EAIA,G,IAHI/mE,EAAA,EAAAA,MACA6rB,EAAA,EAAAA,YAGAxzB,QAAA,YAAAA,QAIE7E,EAAU,CAAE+E,OAAQ,IAAYC,QAEtC,OAAOF,KAAKtB,eAAe2Z,KAHf,uCAGyB,CAAEpd,KAAM,CACzCyM,MAAK,EACLgqD,aAAcn+B,GAAe,aAAS9a,OAAOmvB,IAAIlvB,SAASnT,MAAMO,UACjE5K,QAAO,EAAE6E,QAAO,KAE3B,EAtBA,IFLA,SAAKyuE,GACD,4BADJ,CAAKA,QAAoB,K,uBGEnBG,GAAY,oBAAQ,SAAIC,GAC1B,OAAItsE,MAAMC,QAAQqsE,GACPA,EAAM9tE,KAAI,SAAClJ,GAAsB,OACpCi3E,GAAcj3E,MAIlB,aAAcg3E,GACNv3E,OAAOsJ,KAAKiuE,GACfhuE,QAAO,SAACC,EAAQ3I,G,MAAQ,OAAC,kBAAD,CAAC,sBACnB2I,KAAM,MACR3I,GAAM22E,GAAcD,EAAM12E,IAAK,MAChC,IAGL02E,KAMXD,GAAUx3C,MAAQ,IAAIpkB,QAQtB,IAAM87D,GAAgB,SAAID,GACtB,MAAwB,iBAAVA,GAAgC,OAAVA,EAChCD,GAAUC,GACVA,GAOO,SAASE,GAA4Bv8D,GAChD,OAAO,W,IAAE,sDAAmB,OAAAs8D,GAAct8D,EAAE,aAAIpM,K,0CCvC9C4oE,GAA6B,iCAC/B,mBACA,SAAC9vB,EAAQC,GAAW,YAAaD,EAAGC,MAGzB,gBAAqB6vB,ICN7B,SAASC,KACZ,ICyPMp6D,EAKAqE,EAKAyV,EAKApV,EAiCA21D,EAWAl5D,EAKAm5D,EAaAh9C,EAKAnZ,EAsCAo2D,EAKA79C,EAKAlY,EAKAg2D,EAUA55D,EAKA2X,EAKA6C,EAKAhX,EAKAq2D,EAKAvhD,EAKAC,EAQAgD,EAcA5G,EAQAP,EAQA+E,EClMA2gD,EAaAC,EC6CAC,EAQAC,EAWAC,EAeAC,EAeAC,EHvXAC,GCyPAj7D,EAAc,cAChB,SAAC,GAA4C,OAA1C,EAAA1I,SAAmD0I,eACtD,SAAAA,GAAe,UAAMA,MAGnBqE,EAAW,cACb,SAAC,GAAyC,OAAvC,EAAAlR,MAA6CkR,YAChD,SAAAA,GAAY,UAAMA,MAGhByV,EAAY,cACd,SAAC,GAA0C,OAAxC,EAAAla,OAA+CkF,kBAClD,SAAAA,GAAkB,UAAMA,MAGtBJ,EAAqB,cACvB,SAAC,GAAmD,OAAjD,EAAAhE,gBAAiEgE,sBACpE,SAAC,GAA0C,OAAxC,EAAA9E,OAA+CC,oBAClD,SAAC6E,EAAoB7E,GAAqB,WAAM,WAC5C,IAAMa,EAAkBgE,IAClB/E,EAAUE,IAEhB,IAAKa,EAAiB,CAClB,IAAKf,IAAYA,EAAQmG,eACrB,OAGJ,MAAO,CACHnd,UAAW,GACXC,SAAU,GACVC,QAAS,GACTE,SAAU,GACVE,SAAU,GACVC,KAAM,GACNE,gBAAiB,GACjBE,oBAAqB,GACrBE,WAAY,GACZC,QAAS,GACTE,MAAO,GACPC,aAAc,GACdF,YAAaiW,EAAQmG,gBAI7B,OAAOpF,QAIT25D,EAAqB,cACvB,SAAC,GAAgD,OAA9C,EAAA/xE,aAA2D6Y,mBAC9D,SAAAA,GAAmB,WAAM,WACrB,IAAM7Y,EAAe6Y,IAErB,GAAI7Y,GAAgBA,EAAaI,OAC7B,OAAOJ,EAAa,GAAG4yE,+BAK7B/5D,EAAkB,cACpB,SAAC,GAAgD,OAA9C,EAAA7Y,aAA2D6Y,mBAC9D,SAAAA,GAAmB,UAAMA,MAGvBm5D,EAA4B,cAC9B,SAAC,GAAgD,OAA9C,EAAAhyE,aAA2D6Y,mBAC9D,SAAAA,GAAmB,WAAM,WACrB,IAAM7Y,EAAe6Y,IAErB,GAAK7Y,GAAiBA,EAAaI,OAInC,OAAOJ,EAAa,GAAG+d,6BAIzBiX,EAAuB,cACzB,SAAC,GAAqD,OAAnD,EAAAoC,kBAAqEpC,wBACxE,SAAAA,GAAwB,UAAMA,MAG5BnZ,EAAoB,cACtB,SAAC,GAAkD,OAAhD,EAAA1R,eAA+D0R,qBAClE,SAAC,GAA0C,OAAxC,EAAAvE,OAA+CC,oBAClD,SAACsE,EAAmBtE,GAAqB,WAAM,WAC3C,IAAMpN,EAAiB0R,IACjBxE,EAAUE,IAKhB,QAJ+BpN,GAC3B,kBAAO,gBAAKA,EAAgB,oBAAqB,QAAS,OACrD4tB,OAAM,SAAA86C,GAAO,OAACA,IAAQA,EAAIzyE,YAG1BiX,GAAYA,EAAQmG,eAIlB,CACHtd,GAAIiK,EAAiBA,EAAejK,GAAK,GACzCG,UAAW,GACXC,SAAU,GACVC,QAAS,GACTE,SAAU,GACVE,SAAU,GACVC,KAAM,GACN4J,MAAOL,EAAiBA,EAAeK,MAAQ,GAC/C1J,gBAAiB,GACjBE,oBAAqB,GACrBE,WAAY,GACZC,QAAS,GACTE,MAAO,GACPC,aAAc,GACdF,YAAaiW,EAAQmG,gBAItBrT,QAIT8nE,EAAsB,cACxB,SAAC,GAA6C,OAA3C,EAAAtlD,UAAqDqF,gBACxD,SAAAA,GAAgB,UAAMA,MAGpBoC,EAAoB,cACtB,SAAC,GAAkD,OAAhD,EAAAnY,eAA+DmY,qBAClE,SAAAA,GAAqB,UAAMA,MAGzBlY,EAAmB,cACrB,SAAC,GAAkD,OAAhD,EAAAD,eAA+DC,oBAClE,SAAAA,GAAoB,UAAMA,MAGxBg2D,EAA2B,cAC7B,SAAC,GAA2C,OAAzC,EAAA5mE,QAAiDmlB,gBACpD,SAAC,GAAkD,OAAhD,EAAAxU,eAA+DC,oBAClE,SAACuU,EAAcvU,GAAqB,WAAM,WACtC,IAAM5Q,EAAUmlB,IAEhB,OAAOnlB,GAAW4Q,EAAiB5Q,EAAQY,WAAYZ,EAAQ6Q,iBAIjE7D,EAAU,cACZ,SAAC,GAAwC,OAAtC,EAAAnJ,KAA2CmJ,WAC9C,SAAAA,GAAW,UAAMA,MAGf2X,EAAa,cACf,SAAC,GAA2C,OAAzC,EAAArkB,QAAiDqkB,cACpD,SAAAA,GAAc,UAAMA,MAGlB6C,EAAsB,cACxB,SAAC,GAAoD,OAAlD,EAAAnjB,iBAAmEmjB,uBACtE,SAAAA,GAAuB,UAAMA,MAG3BhX,EAAc,cAChB,SAAC,GAA4C,OAA1C,EAAA5R,SAAmD4R,eACtD,SAAAA,GAAe,UAAMA,MAGnBq2D,EAAiB,cACnB,SAAC,GAA+C,OAA7C,EAAAt7C,YAAyD/F,YAC5D,SAAAA,GAAY,UAAMA,MAGhBF,EAAwB,cAC1B,SAAC,GAA2C,OAAzC,EAAAtlB,QAAiDslB,yBACpD,SAAAA,GAAyB,UAAMA,MAG7BC,EAAyB,cAC3B,SAAC,GAA2C,OAAzC,EAAAvlB,QAAiDulB,0BACpD,SAAC,GAAkD,OAAhD,EAAA5U,eAA+DC,oBAClE,SAAC2U,EAAwB3U,GAAqB,WAAM,SAAC1Z,EAAkB2Z,GACnE,OAAO0U,EAAuB3U,EAAiB1Z,EAAU2Z,UAI3D0X,EAAiB,cACnB,SAAC,GAA+C,OAA7C,EAAAlX,YAAyDkX,kBAC5D,SAAC,GAA+C,OAA7C,EAAAlX,YAAyD0W,iCAC5D,SAACQ,EAAgBR,GAOb,OAAO,IAJP,SAAgCrX,GAC5B,OAAOA,EAAgBqX,EAA8BrX,GAAiB6X,UAO5E5G,EAA0B,cAC5B,SAAC,GAAwC,OAAtC,EAAAgK,KAA2ChK,2BAC9C,SAAC,GAA6C,OAA3C,EAAAN,UAAqDqF,gBACxD,SAAC/E,EAAyB+E,GAAiB,WAAM,SAAC5wB,GAC9C,OAAO6rB,EAAwB+E,IAAgB5wB,SAIjDsrB,EAA2B,cAC7B,SAAC,GAAwC,OAAtC,EAAAuK,KAA2CvK,4BAC9C,SAAC,GAAqD,OAAnD,EAAA0K,kBAAqEpC,wBACxE,SAACtI,EAA0BsI,GAAyB,WAAM,SAAC5zB,GACvD,OAAOsrB,EAAyBsI,IAAwB5zB,SAI1DqwB,EAAmB,cACrB,SAAC,GAA0C,OAAxC,EAAAna,OAA+Cma,oBAClD,SAAAA,GAAoB,UAAMA,MAGvB,uBAAW,SACdta,GAEA,MAAO,CACHO,YAAaA,EAAYP,GACzB4E,SAAUA,EAAS5E,GACnBqa,UAAWA,EAAUra,GACrBsa,iBAAkBA,EAAiBta,GACnCiF,mBAAoBA,EAAmBjF,GACvC46D,mBAAoBA,EAAmB56D,GACvC0B,gBAAiBA,EAAgB1B,GACjC66D,0BAA2BA,EAA0B76D,GACrD6d,qBAAsBA,EAAqB7d,GAC3C0E,kBAAmBA,EAAkB1E,GACrC86D,oBAAqBA,EAAoB96D,GACzCid,kBAAmBA,EAAkBjd,GACrC+E,iBAAkBA,EAAiB/E,GACnC+6D,yBAA0BA,EAAyB/6D,GACnDmB,QAASA,EAAQnB,GACjB8Y,WAAYA,EAAW9Y,GACvB2b,oBAAqBA,EAAoB3b,GACzC2E,YAAaA,EAAY3E,GACzByZ,sBAAuBA,EAAsBzZ,GAC7C0Z,uBAAwBA,EAAuB1Z,GAC/Cg7D,eAAgBA,EAAeh7D,GAC/B0c,eAAgBA,EAAe1c,GAC/B8V,wBAAyBA,EAAwB9V,GACjDuV,yBAA0BA,EAAyBvV,QD7erD27D,GE2QAV,EAAW,IACb,SAAC/2C,GAA2D,OAAAA,KAC5D,SAAAA,GAAY,kBACR,IAAkB,UAAAlhC,OAAOsJ,KAAK43B,GAAZ,eAAoF,CAAjG,IAAMrgC,EAAG,KACJqH,EAAQg5B,EAASrgC,KAEvB,GAAIqH,EACA,OAAOA,OAMjBgwE,EAA+B,cACjC,SAAC,GAAsD,OAApD,EAAAh7C,mBAAuEjC,wBAC1E,SAAC,GAAgD,OAA9C,EAAAp1B,aAA2DsvB,gCAC9D,SAAC8F,EAAsB9F,GAAiC,gBAAClV,GACrD,OACIgb,KACA9F,EAA6BlV,OAKlC,uBAAW,SACdjD,GAEA,IAAMkkB,EAAW,CACb03C,qBAAsB57D,EAAMnI,SAAS2f,aACrCqkD,uBAAwB77D,EAAMnI,SAASmgB,eACvC8jD,oBAAqB97D,EAAM+f,kBAAkBzC,gBAC7Cy+C,sBAAuB/7D,EAAM+f,kBAAkBxC,iBAC/Cy+C,kBAAmBh8D,EAAMtM,MAAM8jB,aAC/BykD,iBAAkBj8D,EAAMhI,KAAKwf,aAC7B0kD,6BAA8Bl8D,EAAMwV,UAAUgC,aAC9C2kD,8BAA+Bn8D,EAAMigB,kBAAkBzI,aACvD4kD,2BAA4Bp8D,EAAM8E,eAAe0S,aACjD6kD,0BAA2Br8D,EAAM8E,eAAeqY,mBAChDm/C,0BAA2Bt8D,EAAM+f,kBAAkBnH,mBACnD0C,eAAgBtb,EAAM6f,mBAAmBvE,eACzCC,gBAAiBvb,EAAM6f,mBAAmBtE,gBAC1CghD,2BAA4Bv8D,EAAM6f,mBAAmBjH,mBACrDjB,4BAA6B3X,EAAMnX,aAAa8uB,4BAChDujD,6BAA8BA,EAA6Bl7D,GAC3D0Y,wBAAyB1Y,EAAMhN,eAAe0lB,wBAC9C8jD,6BAA8Bx8D,EAAMhN,eAAeglB,eACnDykD,4BAA6Bz8D,EAAMmgB,cAAcnI,eACjD0kD,8BAA+B18D,EAAMkgB,mBAAmBlC,sBACxD2+C,0BAA2B38D,EAAMnX,aAAaovB,eAC9C2kD,0BAA2B58D,EAAMnX,aAAamvB,eAC9C6kD,2BAA4B78D,EAAMnX,aAAa6uB,eAC/ColD,2BAA4B98D,EAAMkgB,mBAAmBtH,mBACrDmkD,yBAA0B/8D,EAAM5M,YAAY4lB,cAC5CgkD,oBAAqBh9D,EAAMvL,QAAQukB,cACnCikD,qBAAsBj9D,EAAMvL,QAAQskB,eACpCmkD,6BAA8Bl9D,EAAMxH,iBAAiBwgB,cACrDmkD,8BAA+Bn9D,EAAMxH,iBAAiBugB,eACtDqkD,wBAAyBp9D,EAAMwF,YAAYgS,aAC3C6lD,yBAA0Br9D,EAAMwF,YAAYyS,eAC5CqlD,mBAAoBt9D,EAAMG,OAAOqX,aACjC+lD,oBAAqBv9D,EAAM0f,YAAY9F,cAG3C,OAAO,oBACHqhD,SAAUA,EAAS/2C,IAChBA,OF3ULs5C,GGoUArC,EAAY,IACd,SAACj3C,GAA6D,OAAAA,KAC9D,SAAAA,GAAY,kBACR,OAAQlhC,OAAOsJ,KAAK43B,GACfzH,MAAK,SAAA54B,GAAO,OAAAqgC,EAASrgC,YAI5Bu3E,EAA4B,cAC9B,SAAC,GAAsD,OAApD,EAAAl7C,mBAAuEjM,qBAC1E,SAAC,GAAgD,OAA9C,EAAAprB,aAA2DiqB,4BAC9D,SAACmB,EAAmBnB,GAA6B,gBAAC7P,GAC9C,OACIgR,KACAnB,EAAyB7P,OAK/Bo4D,EAAwB,cAC1B,SAAC,GAAsD,OAApD,EAAAx7C,mBAAuE9Q,kBAC1E,SAAC,GAAsD,OAApD,EAAA8Q,mBAAuE5Q,eAC1E,SAAC,GAAsD,OAApD,EAAA4Q,mBAAuE3Q,gBAC1E,SAAC,GAAsD,OAApD,EAAA2Q,mBAAuE1Q,uBAC1E,SAACJ,EAAgBE,EAAaC,EAAcC,GAAwB,gBAAC9jB,GACjE,OACI0jB,EAAe1jB,IACf4jB,EAAY5jB,IACZ6jB,EAAa7jB,IACb8jB,EAAoB9jB,OAK1BiwE,EAAuB,cACzB,SAAC,GAAqD,OAAnD,EAAAv7C,kBAAqEhR,kBACxE,SAAC,GAAqD,OAAnD,EAAAgR,kBAAqExO,eACxE,SAAC,GAAqD,OAAnD,EAAAwO,kBAAqEvO,gBACxE,SAAC,GAAqD,OAAnD,EAAAuO,kBAAqE5Q,uBACxE,SAACJ,EAAgBwC,EAAaC,EAAcrC,GAAwB,gBAAC9jB,GACjE,OACI0jB,EAAe1jB,IACfkmB,EAAYlmB,IACZmmB,EAAanmB,IACb8jB,EAAoB9jB,OAK1BkwE,EAAoB,cACtB,SAAC,GAAqD,OAAnD,EAAAx7C,kBAAqExO,eACxE,SAAC,GAA4C,OAA1C,EAAA1Z,SAAmD6mB,wBACtD,SAACnN,EAAamN,GAAyB,gBAACrzB,GACpC,OACIkmB,EAAYlmB,IACZqzB,QAKL,uBAAW,SACd1e,GAEA,IAAMkkB,EAAW,CACbu5C,kBAAmBz9D,EAAMnI,SAASugB,UAClCslD,mBAAoB19D,EAAMnI,SAASgb,WACnC6L,qBAAsB1e,EAAMnI,SAAS6mB,qBACrC68C,kBAAmBA,EAAkBv7D,GACrC29D,kBAAmB39D,EAAM+f,kBAAkBvO,aAC3CosD,eAAgB59D,EAAMtM,MAAM0kB,UAC5BylD,cAAe79D,EAAMhI,KAAKogB,UAC1B0lD,0BAA2B99D,EAAMwV,UAAU4C,UAC3C2lD,2BAA4B/9D,EAAMigB,kBAAkB7H,UACpD4lD,wBAAyBh+D,EAAM8E,eAAesT,UAC9C6lD,uBAAwBj+D,EAAM8E,eAAe6L,gBAC7CutD,sBAAuBl+D,EAAM+f,kBAAkBhR,eAC/CE,YAAajP,EAAM6f,mBAAmB5Q,YACtCC,aAAclP,EAAM6f,mBAAmB3Q,aACvCivD,uBAAwBn+D,EAAM6f,mBAAmB9Q,eACjDsJ,yBAA0BrY,EAAMnX,aAAawvB,yBAC7C+iD,0BAA2BA,EAA0Bp7D,GACrDo+D,yBAA0Bp+D,EAAMhN,eAAe6f,WAC/CwrD,wBAAyBr+D,EAAMmgB,cAActN,WAC7C8F,oBAAqB3Y,EAAMhN,eAAe2lB,oBAC1C2lD,0BAA2Bt+D,EAAMkgB,mBAAmBlM,kBACpDuqD,sBAAuBv+D,EAAMnX,aAAagqB,WAC1C2rD,sBAAuBx+D,EAAMnX,aAAaspB,WAC1CssD,uBAAwBz+D,EAAMnX,aAAayvB,WAC3ComD,uBAAwB1+D,EAAMkgB,mBAAmBnR,eACjD4vD,sBAAuB3+D,EAAM5M,YAAY6lB,WACzCiC,iBAAkBlb,EAAMvL,QAAQwkB,WAChCkC,iBAAkBnb,EAAMvL,QAAQykB,WAChC4C,0BAA2B9b,EAAMxH,iBAAiBygB,WAClD8C,0BAA2B/b,EAAMxH,iBAAiB0gB,WAClD0lD,qBAAsB5+D,EAAMwF,YAAY4S,UACxCymD,qBAAsB7+D,EAAMwF,YAAY2M,WACxC2sD,gBAAiB9+D,EAAMG,OAAOiY,UAC9B2mD,qBAAsB/+D,EAAM0f,YAAY7F,UACxCwhD,sBAAuBA,EAAsBr7D,GAC7Cs7D,qBAAsBA,EAAqBt7D,IAG/C,OAAO,oBACHm7D,UAAWA,EAAUj3C,IAClBA,OH1aX,OAAO,SAAC9D,GAKJ,MAAO,CACH1Z,KALS80D,EAA4Bp7C,GAMrCp5B,OALW20E,EAAiCv7C,GAM5C7W,SALai0D,EAAkCp9C,KIV3D,I,GAAA,WACI,WACY4+C,GAAA,KAAAA,qBAQhB,OALI,YAAAx6D,UAAA,SAAUtZ,GCPC,IAAsBqvE,EDU7B,OAFArvE,EAAM/E,SCRuBo0E,EDQA5uE,KAAKqzE,mBAAmB9zE,ICHlDqvE,EAAM3xD,MAAM,kBACdnc,KAAI,SAAA8sD,GAAQ,OAAAA,EAAKl8C,QAAQ,SAAU,OACnCpR,KAAK,KACLgzE,OANM,GDQA/zE,GAEf,EAVA,GEoCA,IAAqB,GAArB,WAQI,WACYw4B,EACAq3B,EACAt1B,EACAhmB,EACAm6D,EACAsF,EACAC,EACAr7B,EACAs7B,EACAC,EACAC,EACAp3B,EACApjB,EACA+3B,EACA0iB,EACAC,EACAC,EACAt3B,EACA8R,EACAylB,GC3DD,IACXC,EZQAvhE,EACA0iB,EAEM8+C,EW4BM,KAAAl8C,SACA,KAAAq3B,+BACA,KAAAt1B,yBACA,KAAAhmB,uBACA,KAAAm6D,4BACA,KAAAsF,wBACA,KAAAC,uBACA,KAAAr7B,iCACA,KAAAs7B,sBACA,KAAAC,gCACA,KAAAC,2BACA,KAAAp3B,sBACA,KAAApjB,8BACA,KAAA+3B,gCACA,KAAA0iB,gCACA,KAAAC,iCACA,KAAAC,4BACA,KAAAt3B,+BACA,KAAA8R,4BACA,KAAAylB,8BAER/zE,KAAKk0E,wBC5DT,IAAAF,MAA8C,gBAArBtiC,KAElB,IAAI,IAAwB,SAAAnyC,GAC/B,IAAKy0E,IAmFb,SAAgCz0E,GAC5B,SAAUA,EAAMtG,UAAWsG,EAAMrG,MApFNi7E,CAAuB50E,GAC1C,OAAOA,EAAM/E,QAGjB,OAAQ+E,EAAMtG,SAAWsG,EAAMrG,MAC/B,KAAK,IAAqBG,oBACtB,MAAO,qBACDkG,EAAM/E,QAAO,2PAMvB,KAAK,IAAqBpB,YAC1B,KAAK,IAAqBE,gBACtB,MAAO,qBACDiG,EAAM/E,QAAO,gQAMvB,KAAK,IAAqBjB,sBACtB,MAAO,qBACDgG,EAAM/E,QAAO,oUAOvB,KAAK,IAAqBf,aACtB,MAAO,qBACD8F,EAAM/E,QAAO,6PAMvB,KAAK,IAAqBd,eACtB,MAAO,qBACD6F,EAAM/E,QAAO,8LAKvB,KAAK,IAAqBX,qBACtB,MAAO,qBACD0F,EAAM/E,QAAO,2SAMvB,KAAK,KAAwBwX,uBACzB,MAAO,4OAMX,KAAK,KAAwBhD,sBACzB,MAAO,qBACDzP,EAAM/E,QAAO,yOAMvB,KAAK,KAAwByX,uBACzB,MAAO,qBACD1S,EAAM/E,QAAO,4OAMvB,QACI,OAAO+E,EAAM/E,aDpBjBwF,KAAKo0E,kBAAoBpF,KACzBhvE,KAAKq0E,kBXtDT5hE,EWsDsDzS,KAAK+3B,OXrD3D5C,EWqDmEn1B,KAAKo0E,kBXnDlEH,EAAa,2BACf,SAAC5/D,EAAOjC,GAAW,OAAAA,EAAOlZ,OAASs1E,GAAqB8F,YACpDliE,EAAOC,QACPgC,IACJ5B,EAAM6B,WACN,CAAE6gB,iBAAgB,IAGtB1iB,EAAMylB,WAAU,SAAA7jB,GACZ4/D,EAAWn7C,SAAS,uBAAa01C,GAAqB8F,YAAajgE,MACpE,CAAEkgE,SAAS,IAEPN,GWqnCX,OA1jCI,YAAA3/D,SAAA,WACI,OAAOtU,KAAKq0E,iBAAiB//D,YASjC,YAAAkgE,YAAA,WACIx0E,KAAKq0E,iBAAiBG,eAiC1B,YAAAt8C,UAAA,SACIC,G,UACA,oDAEA,OAAO,EAAAn4B,KAAKq0E,kBAAiBn8C,UAAS,kCAACC,GAAeC,KAqB1D,YAAArkB,aAAA,SAAa3W,EAAawB,GACtB,OAAOoB,KAAKy0E,UAAUr3E,EAClB4C,KAAK85B,uBAAuB/lB,aAAa3W,EAAIwB,GAC7CoB,KAAK85B,uBAAuB1lB,oBAAoBxV,KAiBxD,YAAA+V,eAAA,SAAetC,EAA8BzT,GACzC,IAAMwT,EAASpS,KAAK85B,uBAAuBnlB,eAAetC,EAASzT,GAEnE,OAAOoB,KAAKy0E,UAAUriE,IAoB1B,YAAAkpC,UAAA,SAAUlzC,EAAiBxJ,GAA3B,WACU81E,EAAqB10E,KAAKu8C,oBAAoBjB,UAAUlzC,EAASxJ,GACjE+1E,EAAmB30E,KAAK8T,qBAAqBG,WAAWrV,GAE9D,OAAOyQ,QAAQC,IAAI,CACftP,KAAKy0E,UAAUC,GACf10E,KAAKy0E,UAAUE,EAAkB,CAAE97C,QAAS,aAE3C75B,MAAK,WAAM,SAAKsV,eA2CzB,YAAAinC,YAAA,SAAYlpC,EAA2BzT,GACnC,IAAMwT,EAASpS,KAAKkxD,8BAA8BzU,QAAQpqC,EAASzT,GAEnE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,qBAiC7C,YAAA+7C,sBAAA,SAAsBh2E,GAClB,IAAMwT,EAASpS,KAAKkxD,8BAA8BrU,SAASj+C,GAE3D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,qBA0B7C,YAAAl6B,mBAAA,SAAmBC,GACf,IAAMwT,EAASpS,KAAKm5B,4BAA4Bx6B,mBAAmBC,GAEnE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,oBAe7C,YAAAp5B,kBAAA,SAAkBC,EAAkBd,GAChC,IAAMwT,EAASpS,KAAKm5B,4BAA4B15B,kBAAkBC,EAAUd,GAE5E,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,oBAuB7C,YAAAkd,kBAAA,SAAkBn3C,GACd,IAAMwT,EAASpS,KAAKkxD,8BAA8BtiD,WAAWhQ,GAE7D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,qBAoB7C,YAAAg8C,oBAAA,SAAoBj2E,GAChB,IAAMwT,EAASpS,KAAKkxD,8BAA8Bl4B,aAAap6B,GAE/D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,qBAkB7C,YAAAi8C,qBAAA,SAAqBl2E,GACjB,IAAMwT,EAASpS,KAAKuzE,sBAAsBn4B,cAAcx8C,GAExD,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoB7C,YAAAk8C,sBAAA,SAAsBn2E,GAClB,IAAMwT,EAASpS,KAAK4zE,8BAA8Bx4B,cAAcx8C,GAEhE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,uBAoB7C,YAAAm8C,yBAAA,SAAyBp2E,GACrB,OAAOoB,KAAK80E,qBAAqBl2E,IAoBrC,YAAAq2E,0BAAA,SAA0Br2E,GACtB,OAAOoB,KAAK+0E,sBAAsBn2E,IAqBtC,YAAAs2E,mBAAA,SAAmBt2E,GACf,IAAMwT,EAASpS,KAAKm4C,+BAA+BvpC,WAAWhQ,GAE9D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoB7C,YAAAs8C,qBAAA,SAAqBv2E,GACjB,IAAMwT,EAASpS,KAAKm4C,+BAA+Bnf,aAAap6B,GAEhE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAY7C,YAAA41C,gBAAA,SAAgB2G,EAA4Cx2E,GACxD,IAAMwT,EAASpS,KAAK8zE,0BAA0BrF,gBAAgB2G,EAAoBx2E,GAElF,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,iBAU7C,YAAAyT,oBAAA,SAAoB9X,EAA8B51B,GAC9C,IAAMwT,EAASpS,KAAK+zE,4BAA4BznC,oBAAoB9X,EAAe51B,GAEnF,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,mBAc7C,YAAAw8C,gBAAA,SAAgBniC,EAA+Bt0C,GAC3C,IAAMwT,EAASpS,KAAKovD,6BAA6BimB,gBAAgBniC,EAAat0C,GAE9E,OAAOoB,KAAKy0E,UAAUriE,IAwB1B,YAAA6kC,eAAA,SAAe/D,EAAkCt0C,GAC7C,IAAMwT,EAASpS,KAAKm4C,+BAA+BlF,OAAOC,EAAat0C,GAEvE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAmB7C,YAAAwe,gBAAA,SAAgBz4C,GACZ,IAAMwT,EAASpS,KAAKm4C,+BAA+BhF,QAAQv0C,GAE3D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoB7C,YAAAviB,oBAAA,SAAoB1X,GAChB,IAAMwT,EAASpS,KAAKiuE,0BAA0B33D,oBAAoB1X,GAElE,OAAOoB,KAAKy0E,UAAUriE,IAsB1B,YAAA0jC,mBAAA,SAAmBl3C,GACf,IAAMwT,EAASpS,KAAK6zE,+BAA+BjlE,WAAWhQ,GAE9D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoB7C,YAAAy8C,qBAAA,SAAqB12E,GACjB,IAAMwT,EAASpS,KAAK6zE,+BAA+B76C,aAAap6B,GAEhE,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoB7C,YAAA/iB,qBAAA,SAAqBG,EAA0BrX,GAC3C,IAAMwT,EAASpS,KAAK6zE,+BAA+B9F,aAAa93D,EAAkBrX,GAElF,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBA4B7C,YAAA2G,sBAAA,SACIviC,EACA2B,GAEA,IAAMwT,EAASpS,KAAK6zE,+BAA+Bh9D,cAAc5Z,EAAS2B,GAE1E,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAgC7C,YAAA9hB,mBAAA,SACI7Z,EACA0B,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0Bl3D,mBAAmB7Z,EAAc0B,GAE/E,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAgB7C,YAAAnjB,kBAAA,SACI4B,EACA1Y,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0Bv4D,kBAAkB4B,EAAe1Y,GAE/E,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAoC7C,YAAApjB,kBAAA,SACIN,EACAvW,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0Bx4D,kBAAkBN,EAAavW,GAE7E,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAc7C,YAAA08C,qBAAA,SACIpgE,EACAvW,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0Bt4D,qBAAqBR,EAAavW,GAEhF,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAc7C,YAAA28C,uBAAA,SACIrgE,EACAvW,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0B/4D,uBAAuBC,EAAavW,GAElF,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAwB7C,YAAA48C,gCAAA,SACIn+D,EACArB,EACArX,GAEA,IAAMwT,EAASpS,KAAKiuE,0BAA0Bv2D,qBAAqB,CAC/Dta,GAAIka,EACJrB,iBAAgB,GACjBrX,GAEH,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,sBAsB7C,YAAA68C,qBAAA,SAAqBz4E,EAA6C2B,QAAA,IAAAA,MAAA,IAC9D,IAAMwT,EAASpS,KAAKovD,6BAA6Bv4C,cAAc5Z,EAAS2B,GAExE,OAAOoB,KAAKy0E,UAAUriE,IAiB1B,YAAA8xC,iBAAA,SAAiBtxB,EAAyBh0B,GACtC,IAAMwT,EAASpS,KAAKsuD,0BAA0BpK,iBAAiBtxB,EAAgBh0B,GAE/E,OAAOoB,KAAKy0E,UAAUriE,IAkB1B,YAAAqgC,YAAA,SAAYnqC,EAAc1J,GACtB,IAAMwT,EAASpS,KAAKwzE,qBAAqB/gC,YAAYnqC,EAAM1J,GAE3D,OAAOoB,KAAKy0E,UAAUriE,IAiB1B,YAAAsgC,aAAA,SAAapqC,EAAc1J,GACvB,IAAMwT,EAASpS,KAAKwzE,qBAAqB9gC,aAAapqC,EAAM1J,GAE5D,OAAOoB,KAAKy0E,UAAUriE,IAiB1B,YAAAygC,qBAAA,SAAqBvqC,EAAc1J,GAC/B,IAAMwT,EAASpS,KAAK0zE,8BAA8B7gC,qBAAqBvqC,EAAM1J,GAE7E,OAAOoB,KAAKy0E,UAAUriE,IAiB1B,YAAA0gC,sBAAA,SAAsBxqC,EAAc1J,GAChC,IAAMwT,EAASpS,KAAK0zE,8BAA8B5gC,sBAAsBxqC,EAAM1J,GAE9E,OAAOoB,KAAKy0E,UAAUriE,IAmB1B,YAAA+4D,gBAAA,WACI,IAAM/4D,EAASpS,KAAK2zE,yBAAyBxI,kBAE7C,OAAOnrE,KAAKy0E,UAAUriE,IAkB1B,YAAAq5D,iBAAA,SAAiBrvE,GAAjB,WACUgW,EAASpS,KAAK2zE,yBAAyBlI,iBAAiBrvE,GAE9D,OAAO4D,KAAKy0E,UAAUriE,GACjBpT,MAAK,WAAM,SAAKmsE,sBAezB,YAAA15B,WAAA,SAAWlyC,GACP,IAAM6S,EAASpS,KAAKyzE,oBAAoBhiC,WAAWlyC,GAEnD,OAAOS,KAAKy0E,UAAUriE,IAsB1B,YAAAujE,yBAAA,SAAyB/2E,GACrB,IAAMwT,EAASpS,KAAKw8C,6BAA6B5tC,WAAWhQ,GAE5D,OAAOoB,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,oBAoB7C,YAAA+8C,iBAAA,WACI,IAAMxjE,EAASpS,KAAKw8C,6BAA6BC,UAEjD,OAAOz8C,KAAKy0E,UAAUriE,EAAQ,CAAEymB,QAAS,oBAUrC,YAAA47C,UAAR,SAAkBriE,EAA2DxT,GAA7E,WACI,OAAOoB,KAAK+3B,OAAOe,SAAS1mB,EAAQxT,GAC/BI,MAAK,WAAM,SAAKsV,cAChBhV,OAAM,SAAAC,GACH,MAAM,EAAK20E,kBAAkBr7D,UAAUtZ,OA3mClCs2E,EAAe,sBADnC,MACoBA,GAArB,G,UEKe,SAASC,GAAsBl3E,GACP,WAA/ByG,SAASqT,SAAS7S,UAClB0sC,IAAmBL,KAAK,uEAGH,eAArBR,KACAa,IAAmBL,KAAK,6HAG5B,IAAM19B,EAAsB,CACxBvV,KAAM,CACF8vB,eAAgBnwB,GAAWA,EAAQmwB,gBAEvC1zB,OAAQ,GACRuiB,SAAU,IAER,QAAE,IAAAu2B,cAAA,IAAS,EAAT,KAAa,IAAAzf,0BAAA,IAAqB,GAArB,EACfiO,EAAgB,8BAAoB,CAAED,KAAM9jC,GAAWA,EAAQ8jC,OAC/DjwB,EAAQ,aAAoB,CAAE+B,OAAM,GAAI,CAAEkgB,mBAAkB,IAC5D6zC,ECxDK,SAA6B91D,GACxC,IAAM81D,EAAgB,0BAatB,OAXA91D,EAAMylB,WACF,SAAA7jB,GACI,IAAMG,EAASH,EAAMG,OAAOkF,iBAExBlF,GACA+zD,EAAcwN,QAAQvhE,EAAOupD,gBAAgBC,kBAGrD,SAAA3pD,GAAS,OAAAA,EAAMG,OAAOkF,oBAGnB6uD,ED0CeyN,CAAoBvjE,GACpCwjE,EAAqB,IAAI,GAAmBtzC,GAC5CmmC,EAAwB,IAAI,IAAsBnmC,GAClD0mC,EAAsB,IAAI,IAAoB,IAAI,IAAoB1mC,IACtE6lC,EAAiBzoB,GAAqB,gCACtCm2B,EAA8B,IAAI,GAA4BvzC,GAC9DqmC,EAA8B,IAAI,GAA4BR,EAAgB0N,GAC9E/X,EAAqB,IAAI,GAC3B8X,EACA,IAAI,GAAkBnN,IAEpBqN,EAA6B,IAAI,KAA2B,IAAI,KAA2BxzC,IAEjG,OAAO,IAAI,GACPlwB,EACA,IAAI,IACA,IAAI,IAA4BkwB,GAChCwzC,GAEJ,IAAI,IAAsBrN,EAAuBO,GACjDA,EACA,IAAI,KAAyB,IAAI,KAAyB1mC,GAAgBmmC,GAC1E,IAAI,GAAqB,IAAI,GAAqBnmC,EAAe,CAAEwR,OAAM,KACzE,IAAI,EAAoB,IAAI,EAAoBxR,IAChD,IAAI,EEzDG,SACXlwB,EACAkwB,GAEA,IAAME,EAAW,IAAI,IACfC,EAAe,4BACfgmC,EAAwB,IAAI,IAAsBnmC,GAClDI,EAAwB,IAAI,IAC9B+lC,EACA,IAAI,IAAoB,IAAI,IAAoBnmC,KAE9CC,EAAa,6BACbumC,EAA6B,IAAI,IAA2B,IAAI,IAA2BxmC,IAC3FyzC,EAA8B,IAAI,GAA4BzzC,GAC9DymC,EAA8B,IAAI,GAA4BgN,GAyHpE,OAvHAvzC,EAAStmB,SAAS,oBAAoB,WAClC,WAAI,GACA9J,EACA22D,EACA,YACI32D,EACA,IAAI,KAERmwB,MAIRC,EAAStmB,SAAS,UAAU,WACxB,WAAI,GACA9J,EACA02D,EACAC,EACAgN,EACA,IAAI,EAAsBtzC,OAIlCD,EAAStmB,SAAS,aAAa,WAC3B,WAAI,GACA9J,EACA22D,EACA,YAAkC32D,OAI1CowB,EAAStmB,SAAS,yBAAyB,WACvC,WAAI,GACA9J,EACAswB,EACAomC,EACA,IAAI,EAA8BtmC,GAClCumC,EACA7zB,EAA4CzS,EAAcH,GAC1D,IAAI,EAAyBG,OAIrCD,EAAStmB,SAAS,YAAY,WAC1B,WAAI,GACA9J,EACA02D,EACAC,EACA,IAAI,EAAqBtmC,GACzBH,EACAC,MAIRC,EAAStmB,SAAS,YAAY,WAC1B,WAAI,GACA9J,EACA,IAAI,GAA4B2jE,OAIxCvzC,EAAStmB,SAAS,cAAc,WAC5B,WAAI,GACA9J,EACA02D,EACAC,EACA,IAAI,IAAuBtmC,OAInCD,EAAStmB,SAAS,yBAAyB,WACvC,WAAI,GACA9J,EACA22D,EACA,YACI32D,EACA,IAAI,KAERmwB,MAIRC,EAAStmB,SAAS,sBAAsB,WACpC,WAAI,GACA9J,EACA22D,EACA,YACI32D,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsBqwB,MAItCF,MAIRC,EAAStmB,SAAS,mBAAmB,WACjC,WAAI,GACA9J,EACA22D,EACA,YACI32D,EACA,IAAI,KAERmwB,MAIRC,EAAStmB,SAAS,WAAW,WACzB,WAAI,GACA9J,EACA,IAAI,GACA,IAAI,GAAsBkwB,GAC1BI,OAKLF,EF9E+BwzC,CAA+B5jE,EAAOkwB,IACxE,IAAI,EACJ,IAAI,EAA6B,IAAI,EAA6BA,IAClE,IAAI,GAAwB,IAAI,GAAwB4lC,EAAe5lC,IACvEw7B,EACA,IAAI,IAA2B,IAAI,IAA2Bx7B,IAC9D,IAAI,GACA2lC,GAA8B71D,EAAO81D,EAAe5lC,EAAe6lC,EAAgBr0B,GACnFgqB,EACA6K,GAEJ,IAAI,GAA6B,IAAI,GAA6BrmC,EAAe,CAAEwR,OAAM,KACzF,IAAI,GGjFG,SACX1hC,EACAkwB,GAEA,IAAME,EAAW,IAAI,IACfimC,EAAwB,IAAI,IAAsBnmC,GAClD2zC,EAA2B,IAAI,KAAyB3zC,GACxD4zC,EAA2B,IAAI,KAAyBD,EAA0BxN,GA4BxF,OA1BAjmC,EAAStmB,SAAS,UAAU,WACxB,WAAI,GACA9J,EACA8jE,EACA,IAAI,IAA2B,IAAI,IAA2B5zC,IAC9D,IAAI,GAA4B,IAAI,GAA4BA,IAChE,IAAI,EAAsB,iCAIlCE,EAAStmB,SAAS,aAAa,WAC3B,WAAI,GACA9J,EACA8jE,EACA,IAAI,IAA2B,IAAI,IAA2B5zC,IAC9D,YAAkClwB,OAI1CowB,EAAStmB,SAAS,WAAW,WACzB,WAAI,GACA9J,EACA8jE,MAID1zC,EH8C+B2zC,CAA+B/jE,EAAOkwB,IACxE,IAAI,GAAyB,IAAI,GAAyBA,IAC1DqmC,EACA,IAAI,GAAyB,IAAI,GAAyBrmC,IAC1DwzC,G,uDIjFa,GAArB,WASI,WACI3hE,EACQiiE,GAAA,KAAAA,UAEF,+BAAEtiC,EAAA,EAAAA,OAAQuiC,EAAA,EAAAA,QAASC,EAAA,EAAAA,aAEzB32E,KAAK8mD,QAAU3S,EACfn0C,KAAK42E,SAAWF,EAChB12E,KAAK62E,cAAgBF,EACrB32E,KAAK82E,YAAc,GAiI3B,OAjHI,YAAAC,QAAA,SAAQ5rC,GAAR,WACI9zC,OAAOsJ,KAAKwqC,GAAMnkC,SAAQ,SAAA9O,GACtB,IAAM8+E,EAAoBC,sBAAc9rC,EAAKjzC,GAE7C,EAAK2+E,cAAiBI,sBAAc/+E,GAAS,EAAK2+E,cAAcG,OASxE,YAAAE,UAAA,WACI,OAAOl3E,KAAKm3E,mBAAqBn3E,KAAK8mD,QA7DvB,MAkFnB,YAAAswB,UAAA,SAAUl/E,EAAa6iB,QAAA,IAAAA,MAAA,IACnB,IAAMs8D,EAAiBJ,sBAAc/+E,EAErC,GAA+C,iBAApC8H,KAAK62E,cAAcQ,GAG1B,OAFAr3E,KAAKy2E,QAAQvkC,KAAK,oBAAoBmlC,EAAW,gBAE1CA,EAGX,IAAKr3E,KAAK82E,YAAYO,GAAc,CAChC,IAAMC,EAAgB,IAAI,KAAct3E,KAAK42E,SAASS,IAEtDr3E,KAAK82E,YAAYO,GAAeC,EAAcC,QAAQv3E,KAAK62E,cAAcQ,IAAgB,IAG7F,OAAOr3E,KAAK82E,YAAYO,GAAar3E,KAAKw3E,eAAez8D,KAGrD,YAAA08D,iBAAR,SAAyBjjE,QAAA,IAAAA,MAAA,IACrB,IAAM/C,EAAyB,CAC3BimE,oBAAqB,GACrBf,aAAc,GACdD,QAAS,GACTviC,OAAQ3/B,EAAO2/B,QAzGJ,MA4GTuiC,EAAUliE,EAAOkiE,SAAW,GAC5BC,EAAe32E,KAAK23E,eAAenjE,EAAOmiE,cAAgB,IAC1De,EAAsB13E,KAAK23E,eAAenjE,EAAOkjE,qBAAuB,IAa9E,OAZwB,iBAAMrgF,OAAOsJ,KAAK+2E,GAAsBrgF,OAAOsJ,KAAKg2E,IAE5D3vE,SAAQ,SAAA9O,GAChBy+E,GAAgBA,EAAaz+E,IAC7BuZ,EAAOklE,aAAaz+E,GAAOy+E,EAAaz+E,GACxCuZ,EAAOilE,QAAQx+E,GAAOw+E,EAAQx+E,IAAQuZ,EAAO0iC,SAE7C1iC,EAAOklE,aAAaz+E,GAAOw/E,EAAoBx/E,GAC/CuZ,EAAOilE,QAAQx+E,GAvHR,SA2HRuZ,GAGH,YAAAkmE,eAAR,SAAuBt/E,EAAsBwI,EAA2B+2E,GAAxE,gBAA6C,IAAA/2E,MAAA,SAA2B,IAAA+2E,MAAA,IACpE,IACIvgF,OAAOsJ,KAAKtI,GAAQ2O,SAAQ,SAAA9O,GACxB,IAAMN,EAAQS,EAAOH,GACf2/E,EAAYD,EAAeA,EAAS,IAAI1/E,EAAQA,EAEtD,GAAI,oBAASN,GACT,OAAO,EAAK+/E,eAAe//E,EAAOiJ,EAAQg3E,GAG9Ch3E,EAAOg3E,GAAajgF,KAE1B,MAAOi5C,GACL7wC,KAAKy2E,QAAQvkC,KAAK,2BAA2BrB,GAGjD,OAAOhwC,GAGH,YAAA22E,eAAR,SAAuBz8D,GACnB,OAAO1jB,OAAOsJ,KAAKoa,GAAMna,QAAO,SAACC,EAAQ3I,GACrC,IAAMN,EAAQmjB,EAAK7iB,GAInB,OAFA2I,EAAO3I,GAAON,QAAwC,GAAKA,EAEpDiJ,IACR,KAGC,YAAAs2E,iBAAR,sBACI,OAAO9/E,OAAOsJ,KAAKX,KAAK42E,UAAU91E,KAAI,SAAA5I,GAAO,SAAK0+E,SAAS1+E,MACtD8K,QAAO,SAAAsF,GAAQ,OAAAA,EAAK2U,MAAM,KAAK,KAAO,EAAK6pC,QAAQ7pC,MAAM,KAAK,MAC9D3f,OAAS,GAjJDw6E,EAAe,sBADnC,MACoBA,GAArB,GCFe,SAASC,GAAsBvjE,GAC1C,YAD0C,IAAAA,MAAA,IACnC,IAAI,GACPA,EACA+9B,KClBR,I,GAAA,WAOI,WACIylC,GAEA,IAAKA,EACD,MAAM,IAAIr9E,MAAM,6BAIhB,IAAA8F,EAAA,EAAAA,cACAw3E,EAAA,EAAAA,eACAC,EAAA,EAAAA,OACAC,EAAA,EAAAA,mBACAC,EAAA,EAAAA,iBAGJ,GAC8B,iBAAnBH,GACW,iBAAXC,GACuB,iBAAvBC,GACqB,iBAArBC,GACkB,iBAAlB33E,EAEP,MAAM,IAAI,KAAqB,sCAGnCT,KAAK8E,eAAiBuzE,SAAS53E,EAAe,IAC9CT,KAAKs4E,gBAAkBL,EACvBj4E,KAAKu4E,QAAUL,EACfl4E,KAAKw4E,oBAAsBL,EAC3Bn4E,KAAKy4E,kBAAoBL,EAyCjC,OAtCI,YAAA1nE,OAAA,SAAOxP,GACH,GAAsB,iBAAXA,EACP,MAAM,IAAI,KAAqB,2BAGnC,IAAMw3E,EAAkB14E,KAAK24E,cAAcz3E,GAErC03E,EAAoB54E,KAAK64E,gBAAgBH,GAE/C,OAAOx3E,EAAS,EACZ,IAAI03E,EACJA,GAGA,YAAAD,cAAR,SAAsBz3E,GAClB,IAAM43E,EAAiB/zE,KAAKg0E,IAAI73E,GAC1B,kDAAEG,EAAA,KAAe,OAAA23E,OAAA,IAAgB,EAAhB,KACjBC,EAAsB53E,EAAcqQ,QAAQ,wBAAyB1R,KAAKw4E,qBAEhF,OAAIx4E,KAAK8E,eAAiB,EACfm0E,EAGJ,CACHA,EACAD,GACF14E,KAAKN,KAAKy4E,oBAGR,YAAAI,gBAAR,SAAwBH,GACpB,MAA+C,SAAvC14E,KAAKs4E,gBAAgB/kC,cACzB,GAAGvzC,KAAKu4E,QAAUG,EAClB,GAAGA,EAAkB14E,KAAKu4E,SAG1B,YAAAW,SAAR,SAAiBthF,EAAeuhF,GAC5B,SAAUp0E,KAAKC,QAAQpN,EAAQ,IAAMuhF,IAAc,KAAOA,IAAYpqC,QAAQoqC,IAEtF,EA7EA,GCKqB,GAArB,WAOI,WACYC,GAAA,KAAAA,eAERp5E,KAAKq5E,mBAAqB,IAAI,GAAkBr5E,KAAKo5E,aAAaE,iBAClEt5E,KAAKu5E,gBAAkB,IAAI,GAAkBv5E,KAAKo5E,aAAajxE,UAYvE,OATI,YAAAqxE,mBAAA,SAAmBt4E,GACf,IAAMu4E,EAAez5E,KAAKo5E,aAAaE,gBAAgBG,aAEvD,OAAOz5E,KAAKq5E,mBAAmB3oE,OAAOxP,EAASu4E,IAGnD,YAAAC,gBAAA,SAAgBx4E,GACZ,OAAOlB,KAAKu5E,gBAAgB7oE,OAAOxP,IArBtBy4E,EAAe,sBADnC,MACoBA,GAArB,GCiBe,SAASC,GACpBplE,GAEA,OAAO,IAAI,GAAgBA,G,ICRnBqlE,G,qBAAZ,SAAYA,GACR,2BACA,2BACA,yBACA,yBAJJ,CAAYA,QAAc,KAO1B,IAAMC,GAAoD,CACtD1yE,SAAUyyE,GAAeE,SACzB9vE,SAAU4vE,GAAeG,SACzBpzD,QAASizD,GAAeI,QACxBzxE,QAASqxE,GAAeK,S,GAG5B,WAWI,WACYC,EACAC,EACAC,EACR,G,IAAEC,QAAA,YAAAA,cAEF,GALQ,KAAAH,kBACA,KAAAC,UACA,KAAAC,YAbJ,KAAAE,kBAA4B,EAC5B,KAAAC,gBAA8C,GAC9C,KAAAC,aAAuD,GACvD,KAAAC,mBAAyC,CAC7C,WACA,WACA,UACA,gBASsB96E,IAAlB06E,EAA6B,CAC7B,GAAIA,EAAcxpD,MAAK,SAAAl5B,GAAS,QAAEA,KAASkiF,OACvC,MAAM,IAAI,KACN,sDAAsD,gBAAKA,IAAgBx5E,KAAK,MAAK,KAG7FN,KAAK06E,mBAAqBJ,GA6XtC,OAxXI,YAAAK,qBAAA,WACI,IAAI36E,KAAKu6E,iBAAT,CAIA,IAAMruE,EAAWlM,KAAK4U,cAEtB,GAAK1I,EAAL,CAKI,IAAApD,EAAA,EAAAA,QACA6B,EAAA,EAAAA,WACAT,EAAA,EAAAA,kBACAM,EAAA,EAAAA,SACA,IAAA6B,KACIhE,EAAA,EAAAA,UACA5E,EAAA,EAAAA,eACArG,EAAA,EAAAA,GAIFw9E,EAAiB56E,KAAK66E,mBAAmBz9E,EAAIiL,GAEnDrI,KAAKq6E,UAAUS,MAAM,mBAAoB96E,KAAK+6E,mBAAmB,CAC7DC,QAASrwE,EACTV,SAAUC,EACV+wE,IAAKzwE,EACLpJ,SAAUqC,EACVqF,QAAO,EACPT,UAAS,EACTuyE,eAAc,KAGlB56E,KAAKu6E,kBAAmB,KAG5B,YAAAW,mBAAA,WACI,IAAMnzE,EAAQ/H,KAAKiZ,WAEnB,GAAKlR,EAAL,CAKI,IAAAiC,EAAA,EAAAA,WACA5B,EAAAL,EAAAK,QACAwC,EAAA7C,EAAA6C,YACAV,EAAA,EAAAA,kBACAM,EAAA,EAAAA,SACA/G,EAAA,EAAAA,eACAqF,EAAA,EAAAA,QACAT,EAAA,EAAAA,UACAg4B,EAAA,EAAAA,OAGJ,GAAKr2B,EAAL,CAIA,IAAM4wE,EAAiB56E,KAAKm7E,mBAAmB96C,GAExB,OAAnBu6C,IAIJ56E,KAAKq6E,UAAUS,MAAM,kBAAmB96E,KAAK+6E,mBAAmB,CAC5D3yE,QAAO,EACP4yE,QAASpwE,EACTX,SAAUC,EACV+wE,IAAKzwE,EACLpJ,SAAUqC,EACVqF,QAAO,EACP8xE,eAAc,EACdvyE,UAAS,KAGbrI,KAAKo7E,mBAAmB/6C,OAG5B,YAAAg7C,gBAAA,SAAgBrwE,GACZ,IAAMswE,EAASt7E,KAAKu7E,cAAcvwE,GAE7BswE,IAAUt7E,KAAKw7E,cAAcF,KAIlCt7E,KAAKy7E,YAAYH,GACjBt7E,KAAK07E,SAASJ,KAGlB,YAAAK,mBAAA,SAAmB3wE,GACf,IAAMswE,EAASt7E,KAAKu7E,cAAcvwE,GAE7BswE,IAAUt7E,KAAK47E,iBAAiBN,KAIrCt7E,KAAK07E,SAASJ,GACdt7E,KAAK67E,eAAeP,KAGhB,YAAAI,SAAR,SAAiBJ,GACb,IAAgB,UAAAt7E,KAAK06E,mBAAL,eAAyB,CAApC,IAAM/jF,EAAC,KACFyG,EAAK4C,KAAKu7E,cAAc5kF,GAE9B,IAAKyG,EACD,MAOJ,GAJK4C,KAAKw7E,cAAcp+E,IACpB4C,KAAKy7E,YAAYr+E,GAGjBA,IAAOk+E,EACP,MAGCt7E,KAAK47E,iBAAiBx+E,IACvB4C,KAAK67E,eAAez+E,KAKxB,YAAAy+E,eAAR,SAAuBP,GACnB,IAAMQ,EAAiB97E,KAAKkvE,4BACpB,kCAAA5mE,KAAA,kBACF4Q,EAAgBlZ,KAAK+7E,uBAErB1pE,EAKF,CACArH,KAAMswE,EACNnzE,SAAQ,GAGR2zE,IACAzpE,EAAQypE,eAAiBA,EAAex3E,aAGxC4U,IACA7G,EAAQ6G,cAAgBA,GAQvB7G,EAAQypE,gBAAmBzpE,EAAQ6G,gBACpC7G,EAAQypE,eAAiB,KAG7B97E,KAAKq6E,UAAUS,MAAM,0BAA2BzoE,GAEhD,IAAM2pE,EAAmBF,EAAiBA,EAAe1+E,GAAK,GACxD6+E,EAAkBX,IAAWzB,GAAeG,SAC3CsB,EAAM,IAAIU,EACbV,EAEJt7E,KAAKw6E,gBAAgByB,IAAmB,GAGpC,YAAAlB,mBAAR,SAA2B,G,IACvB3yE,EAAA,EAAAA,QACA4yE,EAAA,EAAAA,QACA/wE,EAAA,EAAAA,SACAgxE,EAAA,EAAAA,IACA75E,EAAA,EAAAA,SACA0H,EAAA,EAAAA,QACA8xE,EAAA,EAAAA,eACAvyE,EAAA,EAAAA,UAWQ,kCAAAC,YAAA,IAAO,EAAP,KACA,+BAAA48D,UAER,MAAO,CACH98D,QAAO,EACP8zE,iBAJI,IAAY,EAAZ,KAKJlB,QAASh7E,KAAKm8E,kBAAkBnB,GAChC/wE,SAAUjK,KAAKm8E,kBAAkBlyE,GACjCgxE,IAAKj7E,KAAKm8E,kBAAkBlB,GAC5B75E,SAAUpB,KAAKm8E,kBAAkB/6E,GACjCwH,QAASE,GAAW,IAAIhI,KAAI,SAAA8H,GAAU,OAAAA,EAAON,QAAMhI,KAAK,KACxD6H,SAAUG,EACV8zE,SAAUp8E,KAAKq8E,YAAYzB,EAAgBvyE,KAI3C,YAAAuzE,iBAAR,SAAyBN,GACrB,IAAM/hE,EAAiBvZ,KAAKkvE,4BACtB8M,EAAmBziE,EAAiBA,EAAenc,GAAK,GAE9D,OAAO4C,KAAKw6E,gBAAgBhiF,eAAe8iF,IAEnCA,IAAWzB,GAAeG,UAC1Bh6E,KAAKw6E,gBAAgBhiF,eAAkB8iF,EAAM,IAAIU,IAIrD,YAAAR,cAAR,SAAsBF,GAClB,QAASt7E,KAAKy6E,aAAaa,IAGvB,YAAAC,cAAR,SAAsBvwE,GAClB,IAAM9T,EAAO8T,EAAKiS,MAAM,KAExB,OAAO68D,GAAe5iF,EAAK,KAAO,MAG9B,YAAAukF,YAAR,SAAoBH,GAChB,IAAMnzE,EAAWnI,KAAKs8E,qBAEtBt8E,KAAKq6E,UAAUS,MAAM,uBAAwB,CACzC9vE,KAAMswE,EACNnzE,SAAUA,EAAWA,EAASG,KAAO,KAGzCtI,KAAKy6E,aAAaa,IAAU,GAGxB,YAAAriE,SAAR,WAGI,OAAOA,EAFS,qCAAAA,aAKZ,YAAArE,YAAR,WAGI,OAAOA,EAFS,qCAAAA,gBAKZ,YAAA0nE,mBAAR,WACoB,IACV9nE,GAASka,EADC,qCAAAA,aAGhB,OAAOla,GAAUA,EAAO8kE,iBAGpB,YAAAiD,gBAAR,WACoB,IACV/nE,GAASka,EADC,qCAAAA,aAGhB,OAAOla,GAAUA,EAAOoG,cAGpB,YAAAuhE,kBAAR,SAA0Bj7E,GACd,sCAAAu4E,oBAAA,IAAe,EAAf,IAER,OAAO10E,KAAKC,MAAM9D,EAASu4E,EAAe,KAAO,KAG7C,YAAAoB,mBAAR,SAA2Bz9E,EAAYiL,GACnC,IAAM0S,EAAO,yBACN1S,EAAUgD,cACVhD,EAAUiD,cACf1K,QAAO,SAACC,EAAQE,GAMd,OALAF,EAAOE,EAAKkD,WAAa,CACrBH,MAAO/C,EAAK+C,MAAQ/C,EAAK+C,MAAQ,GACjCmqD,SAAUltD,EAAKiD,cAAgBjD,EAAKiD,cAAc1D,KAAK,MAAQ,IAG5DO,IACR,IAEH,IAGI,OAFAb,KAAKo6E,QAAQp0C,QAAQhmC,KAAKw8E,cAAcp/E,GAAK2gC,KAAKC,UAAUjjB,IAErDA,EACT,MAAO81B,GACL,MAAO,KAIP,YAAA2rC,cAAR,SAAsBp/E,GAClB,OAAOA,EAAQq/E,eAA2Br/E,EAAO,IAG7C,YAAA+9E,mBAAR,SAA2B/9E,GACvB,IACI,IAAM2D,EAAOf,KAAKo6E,QAAQr0C,QAAQ/lC,KAAKw8E,cAAcp/E,IAErD,OAAO2D,EAAOg9B,KAAKgS,MAAMhvC,GAAQ,KACnC,MAAO8vC,GACL,OAAO,OAIP,YAAAuqC,mBAAR,SAA2Bh+E,GACvB,IACI4C,KAAKo6E,QAAQ7zC,WAAWvmC,KAAKw8E,cAAcp/E,IAC7C,MAAOyzC,MAKL,YAAAq+B,0BAAR,WACY,IACF31D,EADE,gCAAAwB,KACoBm0D,4BAE5B,OAAQ31D,GAAkBA,EAAenc,IAAMmc,EAAejV,YAC1DiV,EACA,MAGA,YAAAwiE,qBAAR,WACY,IACF7iE,EADE,gCAAA6B,KACmBq0D,2BAE3B,OAAQl2D,GAAiBA,EAAc1E,QACnC0E,EAAc1E,OAAO3C,aACrB,IAGA,YAAAwqE,YAAR,SAAoBK,EAA2Br0E,GAA/C,WACUuP,GAAmCvP,EAAUuP,aAAe,IAAI9W,KAAI,SAAAC,GAAQ,OAC9E47E,WAAY57E,EAAK3D,GACjB2G,IAAKhD,EAAKgD,IACVQ,MAAOxD,EAAK2C,UACZ/B,SAAUZ,EAAKY,SACfzK,KAAM6J,EAAK7J,SAGT0lF,EAA2Cv0E,EAAUwE,iBAAiB/L,KAAI,SAAAC,GAC5E,MAAO,CACH47E,WAAY57E,EAAK3D,GACjBmH,MAAO,EAAK43E,kBAAkBp7E,EAAKG,QACnChK,KAAM6J,EAAK7J,KACXyK,SAAU,MAIZk7E,EAA8C,yBAC7Cx0E,EAAUgD,cACVhD,EAAUiD,cACfxK,KAAI,SAAAC,GACF,IAAI+7E,EAOJ,OALI/7E,EAAKnC,SAAWmC,EAAKnC,QAAQtB,SAC7Bw/E,EAAiB/7E,EAAKnC,QAAQkC,KAAI,SAAAoD,GAAU,OAAGA,EAAOhN,KAAI,IAAIgN,EAAOtM,UACtDslD,OAGZ,CACHy/B,WAAY57E,EAAKkD,UACjBF,IAAKhD,EAAKgD,IACVQ,MAAOxD,EAAK2C,UACZq5E,UAAWh8E,EAAKE,SAChB/J,KAAM6J,EAAK7J,KACXyK,SAAUZ,EAAKY,SACfmC,MAAO44E,EAAU37E,EAAKkD,WAAay4E,EAAU37E,EAAKkD,WAAWH,MAAQ,GACrEmqD,SAAUyuB,EAAU37E,EAAKkD,WAAay4E,EAAU37E,EAAKkD,WAAWgqD,SAAW,GAC3E+uB,SAAUF,GAAkB,IAAIx8E,KAAK,UAI7C,OAAO,yBACAsX,EACAilE,EACAD,IAGf,EApZA,GCjCA,I,GAAA,yBAgBA,OAfI,YAAAjC,qBAAA,aAIA,YAAAO,mBAAA,aAIA,YAAAG,gBAAA,aAIA,YAAAM,mBAAA,aAGJ,EAhBA,GC6Be,SAASsB,GACpB9C,EACA+C,GAEQ,IACF1oE,EADE,aAAAuG,KACY2T,YAEpB,IAAKla,EACD,MAAM,IAAI,IAAiB,IAAqBjb,uBAKpD,OAFQ,mBAAA4jF,oBCxCL,SAAkC1kE,GACrC,OAAOtc,QAASsc,EAAkC4hE,WDyCxB+C,CAAyB3kE,QACxC,IAAI,GACP0hE,EACA,KACA1hE,OAAO4hE,UACP6C,GAID,IAAI,GErDf,4c,+KCcA,WAKI,WACYnlD,EACAoB,EACAkkD,EACAC,EACAluB,EACA6e,EACAvvE,GANA,KAAAq5B,SACA,KAAAoB,8BACA,KAAAkkD,yBACA,KAAAC,wBACA,KAAAluB,+BACA,KAAA6e,4BACA,KAAAvvE,iBAqMhB,OAlMI,YAAAkQ,WAAA,SAAWlP,GAGP,OAFAM,KAAKg/B,UAAYt/B,EAEVM,KAAK67D,oBAGhB,YAAA7iC,aAAA,WACI,OAAOh5B,KAAKs9E,sBAAsBttE,YAGtC,YAAAqrB,aAAA,SACIgG,EACAk8C,EACAC,GAEA,QAHA,IAAAD,MAAyB,IAAWE,YACpC,IAAAD,MAA2B,IAAYE,UAElC19E,KAAK29E,iBACN,MAAM,IAAI,IAAoB,IAAwB3uE,uBAG1D,OAAOhP,KAAK29E,iBAAiBtiD,aAAa,CACtCmiD,YAAW,EACXD,WAAU,EACVl8C,QAAO,KAIf,YAAA/B,cAAA,WACI,IAAKt/B,KAAK29E,iBACN,MAAM,IAAI,IAAoB,IAAwB3uE,uBAG1D,OAAOhP,KAAK29E,iBAAiBC,gBAAgB59E,KAAK69E,2BAGtD,YAAAt+C,cAAA,SAAcnlB,GAAd,WACI,OAAOpa,KAAK00C,UAAU10C,KAAKs9E,sBAAsBpwC,cAAc9yB,IAC1Dpb,MAAK,WAAM,SAAK8+E,sBAAsB1jE,OAG/C,YAAAolB,sBAAA,SAAsBlqB,GAClB,OAAOtV,KAAK+3B,OAAOe,SACf94B,KAAKiuE,0BAA0Bp3D,cAAc7W,KAAK+9E,sCAAsCzoE,MAIxF,YAAAumD,iBAAR,sBACUn8D,EAAWM,KAAKi/B,eAEtB,OAAOj/B,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,IAC1EV,MAAK,SAAAqV,GACF,IAAM6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,GACtDwM,EAAWmI,EAAMnI,SAAS0I,cAC1Bo4B,IAAuB34B,EAAMiB,gBAAgBgE,qBAEnD,IAAKJ,EACD,MAAM,IAAI,IAAiB,IAAqBrf,sBAGpD,IAAKqS,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAG5C,IAAAghC,EAAA,SAAAA,SAER,OAAOjrB,QAAQC,IAAI,CACf,EAAK+tE,uBAAuB19C,OAC5B,EAAK29C,sBAAsB1uE,WAAW1C,EAAUgN,EAAe8zB,KAChEhuC,MAAK,SAAC,G,IAACg/E,EAAA,KAAWC,EAAA,KAIjB,OAHA,EAAKN,iBAAmB,EAAKO,oBAAoBF,EAAW1jD,GAC5D,EAAK6jD,oBAAsBF,EAEpB,EAAKN,iBAAiBS,aAAa,CACtCnwC,sBAAuB,CACnB,CACI/0C,KAAM+kF,EAAmBhwC,sBAAsB,GAAG/0C,KAClDg1C,WAAY,CACRC,mBAAoB8vC,EAAmBhwC,sBAAsB,GAAGC,WAAWC,mBAC3EC,oBAAqB6vC,EAAmBhwC,sBAAsB,GAAGC,WAAWE,uBAIxFT,WAAYswC,EAAmBtwC,WAC/BC,gBAAiBqwC,EAAmBrwC,kBACrC5uC,MAAK,SAAA5D,GACJ,IAAIA,EAASyF,OAIb,MAAM,IAAI,cAMtB,YAAAi0C,oBAAR,SAA4BC,GACxB,MAAO,CACH77C,KAAM67C,EAAgB3H,SACtBkI,OAAQP,EAAgBzH,WAIxB,YAAAuwC,uBAAR,WACI,IAAK79E,KAAKm+E,oBACN,MAAM,IAAI,IAGd,OAAOn+E,KAAKm+E,qBAGR,YAAAD,oBAAR,SAA4BG,EAAsB/jD,GAC9C,QAAiB16B,IAAb06B,EACA,MAAM,IAAI,IAAiB,IAAqBzgC,sBAGpD,IAAMotD,EAA+B3sB,EAAW,OAAS,aAEzD,OAAO,IAAI+jD,EAAOp2E,SAASq2E,IAAIC,eAAe,CAAEt3B,YAAW,KAGvD,YAAAhoB,aAAR,WACI,IAAKj/B,KAAKg/B,UACN,MAAM,IAAI,IAAoB,IAAwBhwB,uBAG1D,OAAOhP,KAAKg/B,WAGR,YAAAw/C,qCAAR,SAA6CpkE,EAAgChd,GACzE,MAAO,CACHA,GAAE,EACFG,UAAW6c,EAAY+yB,kBAAkBh8B,KAAK9J,eAAenQ,KAAK+lB,MAAM,KAAKnM,MAAM,GAAI,GAAGxQ,KAAK,KAC/F9C,SAAU4c,EAAY+yB,kBAAkBh8B,KAAK9J,eAAenQ,KAAK+lB,MAAM,KAAKnM,OAAO,GAAGxQ,KAAK,KAC3F7C,QAAS2c,EAAY+yB,kBAAkBh8B,KAAK9J,eAAeo3E,YAC3D9gF,SAAUyc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAe1J,SAC5DE,SAAUuc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAexJ,SAAWuc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAeq3E,SACzH5gF,KAAMsc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAeguC,SACxDr3C,gBAAiBoc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAes3E,mBACnEzgF,oBAAqBkc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAes3E,mBACvEvgF,WAAYgc,EAAY+yB,kBAAkBh8B,KAAK9J,eAAejJ,WAC9DE,YAAa8b,EAAY+yB,kBAAkBh8B,KAAK9J,eAAe/I,YAC/DC,MAAO6b,EAAY+yB,kBAAkBh8B,KAAK9J,eAAe6tC,YACzD12C,aAAc,GACdkJ,MAAO0S,EAAY1S,QAInB,YAAAq2E,sCAAR,SAA8C9gF,GAC1C,MAAO,CACHM,UAAWN,EAAQ/F,KAAK+lB,MAAM,KAAKnM,MAAM,GAAI,GAAGxQ,KAAK,KACrD9C,SAAUP,EAAQ/F,KAAK+lB,MAAM,KAAKnM,OAAO,GAAGxQ,KAAK,KACjD7C,QAASR,EAAQwhF,YACjB9gF,SAAUV,EAAQU,SAClBE,SAAUZ,EAAQY,SAAWZ,EAAQyhF,SACrC5gF,KAAMb,EAAQo4C,SACdr3C,gBAAiBf,EAAQ0hF,mBACzBzgF,oBAAqBjB,EAAQ0hF,mBAC7BvgF,WAAYnB,EAAQmB,WACpBE,YAAarB,EAAQqB,YACrBC,MAAOtB,EAAQi4C,YACf12C,aAAc,KAId,YAAAk2C,UAAR,SAAkBkqC,GACd,IAAM7pC,EAAkB6pC,EAAgBxgD,QAExC,OAAOp+B,KAAKtB,eAAe2Z,KAAK,gBAAiB,CAC7Cnd,QAAS,CACL+E,OAAQ,YACR,eAAgB,qCAEpBhF,KAAM,CACF2iC,aAAcghD,EAAgB1lF,KAC9Bs6B,MAAOorD,EAAgBprD,MACvB1I,SAAU9qB,KAAKi/B,eACf7sB,OAAQ,wBACRyiC,iBAAkB70C,KAAK80C,oBAAoBC,OAK/C,YAAA+oC,sBAAR,SAA8B1jE,GAC1B,IAAMykE,EAAuB7+E,KAAK+3B,OAAOzjB,WAAWjN,eAAe0R,oBAEnE,IAAK8lE,EACD,MAAM,IAAI,IAAiB,IAAqB1lF,uBAGpD,IAAM2lF,EAAyB9+E,KAAKw+E,qCAAqCpkE,EAAaykE,EAAqBzhF,IAE3G,OAAO4C,KAAK+3B,OAAOe,SACf94B,KAAKovD,6BAA6Bv4C,cAAcioE,KAG5D,EAjNA,G,UCRA,WACI,WACYtxE,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAchB,OAXI,YAAAkyB,KAAA,sBACI,OAAO3/B,KAAKwN,cACPG,WAAW,yCACX3O,MAAK,WACF,IAAK,EAAKyO,QAAQ4wE,OACd,MAAM,IAAI,IAGd,OAAO,EAAK5wE,QAAQ4wE,WAGpC,EAjBA,GCQe,SAASU,EAAgCtsE,EAAsBusE,GAC1E,IAAMr8C,EAAgB,gCAChBG,EAAe,4BAErB,OAAO,IAAI,EACPrwB,EACA,IAAI,IACA,IAAI,IAA2BkwB,IAEnC,IAAI,EAAsBG,GAC1Bk8C,EACA,IAAI,IACA,IAAI,IAA4Br8C,GAChC,IAAI,IACA,IAAI,IAA2BA,KAGvC,IAAI,IACA,IAAI,IAAyBA,GAC7B,IAAI,IAAsBA,IAE9BA,GAnCR,mC,2FCOA,WAII,WACY5K,EACAoB,EACA8lD,GAFA,KAAAlnD,SACA,KAAAoB,8BACA,KAAA8lD,2BAqEhB,OAlEI,YAAArwE,WAAA,SAAWlP,GAGP,OAFAM,KAAKg/B,UAAYt/B,EAEVM,KAAK67D,oBAGhB,YAAA7iC,aAAA,WAGI,OAFAh5B,KAAKk/E,qBAAkBt/E,EAEhByP,QAAQY,WAGnB,YAAA+hD,WAAA,SAAWV,EAAkBtX,EAAmB4X,GAC5C,IAAK5xD,KAAKk/E,gBACN,MAAM,IAAI,IAAoB,IAAwBlwE,uBAG1DhP,KAAKk/E,gBAAgBC,IAAIC,iBAAiB,IAAI9tB,EAAY,CACtD+tB,wBAAyBrlC,EACzB4X,aAAY,KAIpB,YAAAv2B,aAAA,SAAajb,EAAqB5J,GAC9B,IAAKxW,KAAKk/E,gBACN,MAAM,IAAI,IAAoB,IAAwBlwE,uBAG1D,OAAOhP,KAAKk/E,gBAAgBC,IAAIG,aAAal/D,EAAa5J,IAG9D,YAAAyhC,QAAA,SAAQv4C,GAAR,WAYI,OAXAM,KAAKg/B,UAAYt/B,EAEZM,KAAKk/E,gBAMNl/E,KAAKk/E,gBAAgBC,IAAIlnC,UALzBj4C,KAAK67D,mBACA78D,MAAK,WACF,OAAO,EAAKi5C,QAAQv4C,MAMzB2P,QAAQY,WAGL,YAAA4rD,iBAAd,W,4IAEkB,OADRn8D,EAAWM,KAAKi/B,eACR,GAAMj/B,KAAK+3B,OAAOe,SAAS94B,KAAKm5B,4BAA4B15B,kBAAkBC,K,OAG5F,GAHM2U,EAAQ,WACR6E,EAAgB7E,EAAM8E,eAAeC,iBAAiB1Z,IAGxD,MAAM,IAAI,IAAiB,IAAqB7F,sBAG1B,SAAMmG,KAAKi/E,yBAAyBt/C,KAAKzmB,I,cAA7DqmE,EAAoB,SAC1Bv/E,KAAKk/E,gBAAkBK,E,YAGnB,YAAAtgD,aAAR,WACI,IAAKj/B,KAAKg/B,UACN,MAAM,IAAI,IAAoB,IAAwBhwB,uBAG1D,OAAOhP,KAAKg/B,WAEpB,EA5EA,G,kBCAA,WACI,WACYxxB,EACAC,QAAA,IAAAA,MAAA,QADA,KAAAD,gBACA,KAAAC,UAiBhB,OAdU,YAAAkyB,KAAN,SAAWj5B,G,4IAOP,OALI,EACAA,EAAM,mBADgB,cAAkB,GAAE,UAApBg0B,OAAM,IAAG,OAAI,EAGjC8kD,EAAsB,IAA2B9kD,GAEvD,GAAM16B,KAAKwN,cAAcG,WAAW,kBAAkB6xE,EAAiB,qC,OACvE,GADA,UACKx/E,KAAKyN,QAAQimC,OACd,MAAM,IAAI,IAGd,MAAO,CAAP,EAAO1zC,KAAKyN,QAAQimC,gBAE5B,EApBA,GCGe,SAAS+rC,EAAkChtE,GACtD,IAAMkwB,EAAgB,gCAChBG,EAAe,4BAErB,OAAO,IAAI,EACPrwB,EACA,IAAI,IACA,IAAI,IAA2BkwB,IAEnC,IAAI,EAAwBG,IAnBpC,mC,iFCKA,YACI,WAAY1nC,GAAZ,MACI,YAAMA,IAAS,K,OAEf,EAAKlE,KAAO,2BACZ,EAAKgC,KAAO,uB,EAEpB,OAPsD,yBAOtD,EAPA,C,MAAsD,GCKtD,aACI,WACYwmF,GAAA,KAAAA,8BAqBhB,OAlBI,YAAApzC,oBAAA,SACI9X,EACA51B,GAFJ,WAII,OAAO,iBACH,aAAG,uBAAa,IAAwB2f,+BACxC,iBAAM,kE,4EACe,SAAMve,KAAK0/E,4BAA4BpzC,oBAAoB9X,EAAe51B,I,OAE3F,OAFQ3D,EAAS,SAAkF,KAE5F,CAAP,EAAO,uBAAa,IAAwBujB,6BAA8BvjB,eAEhFuX,KACE,sBAAW,SAAAjT,GAAS,mBAChB,IAAwBmf,0BACxB,IAAI,EAAyBnf,SAI7C,EAvBA,G,+FCJA,YACI,WAAY/E,GAAZ,MACI,YAAMA,GAAW,6EAA2E,K,OAE5F,EAAKtD,KAAO,+BACZ,EAAKgC,KAAO,8B,EAEpB,OAP0D,yBAO1D,EAPA,C,MAA0D,GCW1D,aACI,WACYwF,EACAihF,GADA,KAAAjhF,iBACA,KAAAihF,6BAgIhB,OA7HI,YAAAtK,gBAAA,SACIniC,EACAt0C,GAFJ,WAII,OAAO,SAAA6T,GACH,IAAM4B,EAAQ5B,EAAM6B,WACdpI,EAAWmI,EAAMnI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpD,IAAM8N,EAAWiN,EAAMjN,SAAS4R,cAEhC,GAAI5R,IAAaA,EAASI,QACtB,MAAM,IAAI,EAGd,IAEIo4E,EAFEv4E,EAAiBgN,EAAMhN,eAAe0R,oBAI5C,GAAK1R,EAEE,CACK,EAAAhJ,QAAA,IAAS,kCAEjBuhF,EAA4B,yCACrBC,GACA3sC,QANP0sC,EAA4B1sC,EAUhC,OAAO,gBACH,iBACI,aAAG,uBAAa,IAAyBz0B,2BACzC,iBAAM,kE,4EACe,SAAMze,KAAK8/E,8BACxB5zE,EAAS9O,GACTwiF,EACAhhF,I,OAGJ,OANQ3D,EAAS,SAIhB,KAEM,CAAP,EAAO,uBAAa,IAAyBkjB,yBAA0BljB,eAE7EuX,KACE,sBAAW,SAAAjT,GAAS,mBAAiB,IAAyBof,sBAAuBpf,OAEzF,EAAKwgF,uBAAuB7sC,EAAat0C,MAKrD,YAAAiY,cAAA,SACI5Z,EACA2B,GAFJ,WAII,OAAO,SAAA6T,GAAS,oBAAWxa,QAAO,SAAC4G,GAC/B,IAAMwV,EAAQ5B,EAAM6B,WACdpI,EAAWmI,EAAMnI,SAAS0I,cAEhC,IAAK1I,EACD,MAAM,IAAI,IAAiB,IAAqB5S,iBAGpDuF,EAASC,KAAK,uBAAa,IAAyBuf,gCAEpD,IAAMhX,EAAiBgN,EAAMhN,eAAe0R,oBAOtC6mE,EAA4B,yCAC3B3iF,GAAO,CACVyK,WAAgC,IAAlBzK,EAAQyK,OAAyBL,EAAiBA,EAAeK,MAAQzK,EAAQyK,QAG/FL,GAAkBA,EAAejK,KACjCwiF,EAA0BxiF,GAAKiK,EAAejK,IAGlD,EAAK0iF,8BAA8B5zE,EAAS9O,GAAIwiF,EAA2BhhF,GACtEI,MAAK,SAAC,G,IAAE/D,EAAA,EAAAA,KACL4D,EAASC,KAAK,uBAAa,IAAyBof,8BAA+BjjB,IACnF4D,EAASQ,cAEZC,OAAM,SAAAlE,GACHyD,EAASU,MAAM,4BAAkB,IAAyB+e,2BAA4BljB,YAK9F,YAAA2kF,uBAAR,SACI,EAKAnhF,G,IAJI8I,EAAA,EAAAA,MACAs4E,EAAA,EAAAA,2BACAC,EAAA,EAAAA,2BAIJ,OAAI,MAACD,GACD,MAACC,EACM,kBAGJjgF,KAAK2/E,2BAA2BrzC,oBAAoB,CACvD5kC,MAAK,EACLu4E,2BAA4BA,IAA8B,EAC1DD,2BAA4BA,IAA8B,GAC3DphF,IAGC,YAAAkhF,8BAAR,SACIprE,EACAzX,EACA2B,GAEA,OAAK3B,EAAQG,GAIN4C,KAAKtB,eAAemY,cAAcnC,EAAYzX,EAAS2B,GAHnDoB,KAAKtB,eAAe8tC,cAAc93B,EAAYzX,EAAS2B,IAK1E,EAnIA,G","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 188);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedContentOptions } from './iframe-content';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"card-validator\");","module.exports = require(\"@bigcommerce/request-sender\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { FormattedPayload, FormattedVaultedInstrument, HostedVaultedInstrument, PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(instrument: PaymentInstrument): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !instrument.hasOwnProperty('ccNumber') &&\n        !instrument.hasOwnProperty('ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(instrument: PaymentInstrument): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>).formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorData, PaymentErrorResponseBody } from '../../common/error';\nimport HostedFieldType from '../hosted-field-type';\n\nimport HostedInputInitializeErrorData from './hosted-input-initialize-error-data';\nimport HostedInputValidateResults from './hosted-input-validate-results';\n\n// Event types\nexport enum HostedInputEventType {\n    AttachSucceeded = 'HOSTED_INPUT:ATTACH_SUCCEEDED',\n    AttachFailed = 'HOSTED_INPUT:ATTACH_FAILED',\n    BinChanged = 'HOSTED_INPUT:BIN_CHANGED',\n    Blurred = 'HOSTED_INPUT:BLURRED',\n    Changed = 'HOSTED_INPUT:CHANGED',\n    CardTypeChanged = 'HOSTED_INPUT:CARD_TYPE_CHANGED',\n    Entered = 'HOSTED_INPUT:ENTERED',\n    Focused = 'HOSTED_INPUT:FOCUSED',\n    SubmitSucceeded = 'HOSTED_INPUT:SUBMIT_SUCCEEDED',\n    SubmitFailed = 'HOSTED_INPUT:SUBMIT_FAILED',\n    Validated = 'HOSTED_INPUT:VALIDATED',\n}\n\n// Event mapping\nexport interface HostedInputEventMap {\n    [HostedInputEventType.AttachSucceeded]: HostedInputAttachSuccessEvent;\n    [HostedInputEventType.AttachFailed]: HostedInputAttachErrorEvent;\n    [HostedInputEventType.BinChanged]: HostedInputBinChangeEvent;\n    [HostedInputEventType.Blurred]: HostedInputBlurEvent;\n    [HostedInputEventType.Changed]: HostedInputChangeEvent;\n    [HostedInputEventType.CardTypeChanged]: HostedInputCardTypeChangeEvent;\n    [HostedInputEventType.Entered]: HostedInputEnterEvent;\n    [HostedInputEventType.Focused]: HostedInputFocusEvent;\n    [HostedInputEventType.SubmitSucceeded]: HostedInputSubmitSuccessEvent;\n    [HostedInputEventType.SubmitFailed]: HostedInputSubmitErrorEvent;\n    [HostedInputEventType.Validated]: HostedInputValidateEvent;\n}\n\n// Events\nexport type HostedInputEvent = (\n    HostedInputAttachSuccessEvent |\n    HostedInputAttachErrorEvent |\n    HostedInputBinChangeEvent |\n    HostedInputBlurEvent |\n    HostedInputChangeEvent |\n    HostedInputCardTypeChangeEvent |\n    HostedInputEnterEvent |\n    HostedInputFocusEvent |\n    HostedInputSubmitSuccessEvent |\n    HostedInputSubmitErrorEvent |\n    HostedInputValidateEvent\n);\n\nexport interface HostedInputAttachSuccessEvent {\n    type: HostedInputEventType.AttachSucceeded;\n}\n\nexport interface HostedInputAttachErrorEvent {\n    type: HostedInputEventType.AttachFailed;\n    payload: {\n        error: HostedInputInitializeErrorData;\n    };\n}\n\nexport interface HostedInputBinChangeEvent {\n    type: HostedInputEventType.BinChanged;\n    payload: {\n        bin?: string;\n    };\n}\n\nexport interface HostedInputBlurEvent {\n    type: HostedInputEventType.Blurred;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputChangeEvent {\n    type: HostedInputEventType.Changed;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputCardTypeChangeEvent {\n    type: HostedInputEventType.CardTypeChanged;\n    payload: {\n        cardType?: string;\n    };\n}\n\nexport interface HostedInputFocusEvent {\n    type: HostedInputEventType.Focused;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputEnterEvent {\n    type: HostedInputEventType.Entered;\n    payload: {\n        fieldType: HostedFieldType;\n    };\n}\n\nexport interface HostedInputSubmitSuccessEvent {\n    type: HostedInputEventType.SubmitSucceeded;\n}\n\nexport interface HostedInputSubmitErrorEvent {\n    type: HostedInputEventType.SubmitFailed;\n    payload: {\n        error: PaymentErrorData;\n        response?: Response<PaymentErrorResponseBody>;\n    };\n}\n\nexport interface HostedInputValidateEvent {\n    type: HostedInputEventType.Validated;\n    payload: HostedInputValidateResults;\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { isBillingAddressLike, BillingAddress } from '../billing';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { Address } from '../address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerUnitPrice: amountTransformer.toInteger(item.amount),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"shallowequal\");","import { CardInstrument } from '../payment/instrument';\n\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport enum HostedFieldEventType {\n    AttachRequested = 'HOSTED_FIELD:ATTACH_REQUESTED',\n    SubmitRequested = 'HOSTED_FIELD:SUBMITTED_REQUESTED',\n    ValidateRequested = 'HOSTED_FIELD:VALIDATE_REQUESTED',\n}\n\nexport interface HostedFieldEventMap {\n    [HostedFieldEventType.AttachRequested]: HostedFieldAttachEvent;\n    [HostedFieldEventType.SubmitRequested]: HostedFieldSubmitRequestEvent;\n    [HostedFieldEventType.ValidateRequested]: HostedFieldValidateRequestEvent;\n}\n\nexport type HostedFieldEvent = (\n    HostedFieldAttachEvent |\n    HostedFieldSubmitRequestEvent |\n    HostedFieldValidateRequestEvent\n);\n\nexport interface HostedFieldAttachEvent {\n    type: HostedFieldEventType.AttachRequested;\n    payload: {\n        accessibilityLabel?: string;\n        cardInstrument?: CardInstrument;\n        fontUrls?: string[];\n        placeholder?: string;\n        styles?: HostedFieldStylesMap;\n        type: HostedFieldType;\n    };\n}\n\nexport interface HostedFieldSubmitRequestEvent {\n    type: HostedFieldEventType.SubmitRequested;\n    payload: {\n        data: HostedFormOrderData;\n        fields: HostedFieldType[];\n    };\n}\n\nexport interface HostedFieldValidateRequestEvent {\n    type: HostedFieldEventType.ValidateRequested;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        integerUnitPrice: amountTransformer.toInteger(item.listPrice),\n        integerUnitPriceAfterDiscount: amountTransformer.toInteger(item.salePrice),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        sku: item.sku,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"reselect\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    merchantId: string;\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n    placement: AmazonPayV2Placement;\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n    productType?: string;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    url: string;\n    method?: string;\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    amazonCheckoutSessionId: string;\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    es_ES = 'es_ES',\n    en_GB = 'en_GB',\n    en_US = 'en_US',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    Home = 'Home',\n    Product = 'Product',\n    Cart = 'Cart',\n    Checkout = 'Checkout',\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    eu = 'EUR',\n    jp = 'JPY',\n    uk = 'GBP',\n    us = 'USD',\n}\n\nexport enum AmazonPayV2PayOptions {\n    PayAndShip = 'PayAndShip',\n    PayOnly = 'PayOnly',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import CardExpiryDate from './card-expiry-date';\n\nconst NUMBER_SEPARATOR = '/';\n\nexport default class CardExpiryFormatter {\n    format(value: string): string {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n        const trimmedMonth = month.slice(0, 2);\n        const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n        // i.e.: '1'\n        if (value.length < 2) {\n            return month;\n        }\n\n        // ie.: '10 /' (without trailing space)\n        if (value.length > 3 && !trimmedYear) {\n            return trimmedMonth;\n        }\n\n        return `${trimmedMonth} ${NUMBER_SEPARATOR} ${trimmedYear}`;\n    }\n\n    toObject(value: string): CardExpiryDate {\n        const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${NUMBER_SEPARATOR}\\\\s*`));\n\n        if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n            return { month: '', year: '' };\n        }\n\n        return {\n            month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n            year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n        };\n    }\n}\n","import { creditCardType, number } from 'card-validator';\nimport { max } from 'lodash';\n\nconst NUMBER_SEPARATOR = ' ';\n\nexport default class CardNumberFormatter {\n    format(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        const maxLength = max(creditCardType(value).map(info => max(info.lengths)));\n        const unformattedValue = this.unformat(value).slice(0, maxLength);\n\n        return card.gaps\n            .filter(gapIndex => unformattedValue.length > gapIndex)\n            .reduce((output, gapIndex, index) => (\n                [\n                    output.slice(0, gapIndex + index),\n                    output.slice(gapIndex + index),\n                ].join(NUMBER_SEPARATOR)\n            ), unformattedValue);\n    }\n\n    unformat(value: string): string {\n        const { card } = number(value);\n\n        if (!card) {\n            return value;\n        }\n\n        return value.replace(new RegExp(NUMBER_SEPARATOR, 'g'), '');\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { HostedFormOrderData } from '../hosted-form';\nimport { CardExpiryFormatter, CardNumberFormatter, HostedInputValues } from '../hosted-form/iframe-content';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument, { isFormattedVaultedInstrument } from './is-vaulted-instrument';\nimport Payment, { CreditCardInstrument, HostedCreditCardInstrument, HostedVaultedInstrument, VaultedInstrument } from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    private _cardExpiryFormatter = new CardExpiryFormatter();\n    private _cardNumberFormatter = new CardNumberFormatter();\n\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = checkoutState.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData &&\n            (isVaultedInstrument(payment.paymentData) || isFormattedVaultedInstrument(payment.paymentData)) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction: payment.additionalAction,\n            authToken,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    transformWithHostedFormData(values: HostedInputValues, data: HostedFormOrderData): PaymentRequestBody {\n        const { authToken, checkout, config, order, orderMeta, payment = {}, paymentMethod, paymentMethodMeta } = data;\n        const consignment = checkout && checkout.consignments[0];\n        const shippingAddress = consignment && consignment.shippingAddress;\n        const shippingOption = consignment && consignment.selectedShippingOption;\n\n        return {\n            authToken,\n            paymentMethod: paymentMethod && this._transformPaymentMethod(paymentMethod),\n            customer: order && order.billingAddress && checkout && mapToInternalCustomer(checkout.customer, order.billingAddress),\n            billingAddress: order && order.billingAddress && mapToInternalAddress(order.billingAddress),\n            shippingAddress: shippingAddress && checkout && mapToInternalAddress(shippingAddress, checkout.consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: this._transformHostedInputValues(values, payment),\n            quoteMeta: {\n                request: {\n                    ...paymentMethodMeta,\n                    geoCountryCode: config && config.context.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: config && pick(config.storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _transformPaymentMethod(paymentMethod: PaymentMethod): PaymentMethod {\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n\n    private _transformHostedInputValues(values: HostedInputValues, payment: HostedCreditCardInstrument | HostedVaultedInstrument): CreditCardInstrument | VaultedInstrument {\n        return 'instrumentId' in payment ?\n            {\n                ...payment,\n                ccCvv: values.cardCodeVerification,\n                ccNumber: values.cardNumberVerification && this._cardNumberFormatter.unformat(values.cardNumberVerification),\n            } :\n            {\n                ...payment,\n                ccCvv: values.cardCode,\n                ccExpiry: this._cardExpiryFormatter.toObject(values.cardExpiry || ''),\n                ccName: values.cardName || '',\n                ccNumber: this._cardNumberFormatter.unformat(values.cardNumber || ''),\n            };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody, target?: string): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload, null, target);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | ContinueAsGuestAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    stripev3: {\n        provider: 'stripev3',\n        method: 'credit_card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { AccountInstrument, CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.method === 'credit_card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const cardInstruments = flatMap(supportedInstruments, card =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is CardInstrument => {\n                    return card.method === 'credit_card' && isMatch(instrument, card);\n                })\n            );\n\n            const accountInstruments = flatMap(supportedInstruments, account =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is AccountInstrument => {\n                    return isMatch(instrument, account);\n                })\n            );\n\n            return [...cardInstruments, ...accountInstruments];\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { fromEvent } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\n\nimport { parseUrl } from '../url';\n\nimport IframeEvent from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport interface IframeEventPostOptions<TSuccessEvent extends IframeEvent, TErrorEvent extends IframeEvent> {\n    errorType?: TErrorEvent['type'];\n    successType?: TSuccessEvent['type'];\n}\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent>;\n    post<TSuccessEvent extends IframeEvent = IframeEvent, TErrorEvent extends IframeEvent = IframeEvent>(\n        event: TEvent,\n        options?: IframeEventPostOptions<TSuccessEvent, TErrorEvent>\n    ): Promise<TSuccessEvent> | void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message because target window is not set.');\n        }\n\n        const result = options && fromEvent<MessageEvent>(window, 'message')\n            .pipe(\n                filter(event =>\n                    event.origin === this._targetOrigin &&\n                    isIframeEvent(event.data, event.data.type) &&\n                    [options.successType, options.errorType].indexOf(event.data.type) !== -1\n                ),\n                map(event => {\n                    if (options.errorType === event.data.type) {\n                        throw event.data;\n                    }\n\n                    return event.data;\n                }),\n                take(1)\n            )\n            .toPromise();\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n\n        return result;\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { parseUrl } from '../url';\nimport { bindDecorator as bind } from '../utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        if (listeners.indexOf(listener) === -1) {\n            listeners.push(listener);\n        }\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    /**\n     * @internal\n     */\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\nimport { kebabCase } from 'lodash';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptOptions, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce(options: PaypalCommerceScriptOptions): Promise<PaypalCommerceSDK> {\n        if (!options || !options.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        const { disableFunding } = options;\n        const updatedOptions = disableFunding\n            ? { ...options, disableFunding: disableFunding.join(',') }\n            : options;\n\n        const params = (Object.keys(updatedOptions) as Array<keyof PaypalCommerceScriptOptions>)\n            .map(key => `${kebabCase(key)}=${options[key]}`)\n            .join('&');\n\n        const scriptSrc = `https://www.paypal.com/sdk/js?${params}`;\n\n        await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes: {} });\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","\nexport interface ApproveDataOptions {\n    orderID: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\n/**\n * @internal\n */\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\n/**\n * @internal\n */\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\n/**\n * @internal\n */\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\n/**\n * @internal\n */\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\n/**\n * @internal\n */\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    createOrder(): Promise<string>;\n    onApprove(data: ApproveDataOptions): void;\n    onClick(data: ClickDataOptions): void;\n}\n\nexport interface PaypalCommerceSDK {\n    Buttons({createOrder, onApprove}: ButtonsOptions): {\n        render(id: string): void;\n    };\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n}\n\nexport type DisableFundingType = Array<'credit' | 'card'>;\n\nexport interface PaypalCommerceScriptOptions {\n    clientId: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    disableFunding?: DisableFundingType;\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._amazonPayV2PaymentProcessor.initialize(methodId);\n\n        this._walletButton = this._createSignInButton(containerId, methodId);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string, methodId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n        const cart = state.cart.getCart();\n        const config = state.config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                region,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId) {\n            throw new InvalidArgumentError();\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: !!testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            region,\n            productType: cart && cart.lineItems.physicalItems.length === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            createCheckoutSession: {\n                method: checkoutSessionMethod,\n                url: `${config.storeProfile.shopPath}/remote-checkout/${methodId}/payment-session`,\n                extractAmazonCheckoutSessionId,\n            },\n            placement: AmazonPayV2Placement.Cart,\n        };\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, DisableFundingType, PaypalButtonStyleOptions, PaypalCommerceInitializationData, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceScriptOptions, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape  } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    providerId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _formPoster: FormPoster,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const {\n            id: providerId,\n            initializationData,\n        } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n        this.providerId = providerId;\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const paypalOptions = options.paypalCommerce;\n\n        const buttonParams: ButtonsOptions = {\n            onClick: data => this._handleClickButtonProvider(providerId, data),\n            createOrder: () => this._setupPayment(cart.id),\n            onApprove: data => this._tokenizePayment(data),\n        };\n\n        if (paypalOptions && paypalOptions.style) {\n            buttonParams.style = this._validateStyleParams(paypalOptions.style);\n        }\n\n        const paramsScript = this._getParamsScript(initializationData, cart);\n        const paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript);\n\n        return paypal.Buttons(buttonParams).render(`#${options.containerId}`);\n    }\n\n    deinitialize(): Promise<void> {\n        this.providerId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider(providerId: string, { fundingSource }: ClickDataOptions): void {\n        this.providerId = fundingSource === 'credit' ? 'paypalcommercecredit' : providerId;\n    }\n\n    private async _setupPayment(cartId: string): Promise<string> {\n        if (!this.providerId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(this.providerId, cartId);\n\n        return orderId;\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this.providerId,\n            order_id: orderID,\n        });\n    }\n\n    private _validateStyleParams(style: PaypalButtonStyleOptions): PaypalButtonStyleOptions {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptOptions {\n        const { clientId, intent, isPayPalCreditAvailable } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            clientId,\n            commit: false,\n            currency: cart.currency.code,\n            disableFunding,\n            intent,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalCommerceScriptLoader(scriptLoader),\n            formPoster,\n            new PaypalCommerceRequestSender(requestSender)\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor(store)\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster, IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, isIframeEvent, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport { EmbeddedCheckoutCompleteEvent, EmbeddedCheckoutErrorEvent, EmbeddedCheckoutEvent, EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType, EmbeddedCheckoutFrameErrorEvent, EmbeddedCheckoutFrameLoadedEvent, EmbeddedCheckoutLoadedEvent, EmbeddedCheckoutSignedOutEvent } from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer, IframeEventListener, IframeEventPoster } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload, TokenizeType } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return {\n            type: type as TokenizeType,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        };\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload, TokenizeType } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return {\n            type: type as TokenizeType,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        };\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormConfigError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to invalid configuration provided for the hosted payment form.');\n\n        this.name = 'InvalidHostedFormConfigError';\n        this.type = 'invalid_hosted_form_config';\n    }\n}\n","import { flatMap, map, values } from 'lodash';\n\nimport { StandardError } from '../../common/error/errors';\nimport { HostedInputValidateErrorDataMap } from '../iframe-content';\n\nexport default class InvalidHostedFormValueError extends StandardError {\n    constructor(\n        public errors: HostedInputValidateErrorDataMap\n    ) {\n        super([\n            'Unable to proceed due to invalid user input values',\n            ...flatMap(values(errors), fieldErrors => map(fieldErrors, ({ message }) => message)),\n        ].join('. '));\n\n        this.name = 'InvalidHostedFormValueError';\n        this.type = 'invalid_hosted_form_value';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\n\nimport { OrderData } from './paypal-commerce-sdk';\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(provider: string, cartId: string): Promise<OrderData> {\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body;\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    /* eslint-disable-next-line import/no-internal-modules */\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport { CustomerStrategyActionType, CustomerStrategyDeinitializeAction, CustomerStrategyInitializeAction, CustomerStrategySignInAction, CustomerStrategySignOutAction, CustomerStrategyWidgetAction } from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<void> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport { VisaCheckoutAddress, VisaCheckoutInitOptions, VisaCheckoutPaymentSuccessPayload, VisaCheckoutTokenizedPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ChasePayHostWindow, JPMC } from './chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) {}\n\n    async initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!amazonpay) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonpay\" argument is not provided.');\n        }\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n        await this._amazonPayV2PaymentProcessor.initialize(methodId);\n        this._walletButton = this._createSignInButton(amazonpay.container, methodId);\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.'\n        );\n    }\n\n    async signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        await this._amazonPayV2PaymentProcessor.signout(payment.providerId);\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string, methodId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                region,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid merchant ID.');\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: !!testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            region,\n            productType: cart && cart.lineItems.physicalItems.length === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            createCheckoutSession: {\n                method: checkoutSessionMethod,\n                url: `${config.storeProfile.shopPath}/remote-checkout/${methodId}/payment-session`,\n                extractAmazonCheckoutSessionId,\n            },\n            placement: AmazonPayV2Placement.Checkout,\n        };\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutPaymentSuccessPayload, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam check.\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam check. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { SpamProtectionNotCompletedError } from '../spam-protection/errors';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (checkout.shouldExecuteSpamCheck) {\n                    throw new SpamProtectionNotCompletedError();\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    ADYENV2_GOOGLEPAY = 'googlepayadyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    AUTHORIZENET_GOOGLE_PAY = 'googlepayauthorizenet',\n    AMAZONPAYV2 = 'amazonpay',\n    BLUESNAPV2 = 'bluesnapv2',\n    BOLT = 'bolt',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    KLARNAV2 = 'klarnav2',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    /**\n     * @internal\n     */\n    PAYPAL_COMMERCE = 'paypalcommerce',\n    /**\n     * @internal\n     */\n    PAYPAL_COMMERCE_CREDIT = 'paypalcommercecredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from '../spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport { PaymentStrategyActionType, PaymentStrategyDeinitializeAction, PaymentStrategyExecuteAction, PaymentStrategyFinalizeAction, PaymentStrategyInitializeAction, PaymentStrategyWidgetAction } from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._spamProtectionActionCreator.execute()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection challenge. Please try again.');\n\n        this.name = 'SpamProtectionChallengeNotCompletedError';\n        this.type = 'spam_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class CardingProtectionChallengeNotCompletedError extends StandardError {\n    constructor() {\n        super('Please complete our human verification challenge and try again.');\n\n        this.name = 'CardingProtectionChallengeNotCompletedError';\n        this.type = 'carding_protection_challenge_not_completed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class CardingProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to verify that you are not a robot. Please try again.');\n\n        this.name = 'CardingProtectionFailedError';\n        this.type = 'carding_protection_failed';\n    }\n}\n","import { switchMap, take } from 'rxjs/operators';\n\nimport { RequestError } from '../common/error/errors';\nimport { PaymentAdditionalAction } from '../payment';\n\nimport { CardingProtectionChallengeNotCompletedError, CardingProtectionFailedError, SpamProtectionChallengeNotCompletedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\n\nexport default class PaymentHumanVerificationHandler {\n\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    async handle(error: RequestError): Promise<PaymentAdditionalAction> {\n\n        if (!this._isPaymentHumanVerificationRequest(error)) {\n            throw error;\n        }\n\n        await this._initialize(error.body.additional_action_required.data.key);\n\n        return this._googleRecaptcha.execute()\n            .pipe(take(1))\n            .pipe(switchMap(async ({ error, token }) => {\n                if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                    throw new CardingProtectionChallengeNotCompletedError();\n                }\n\n                if (error || !token) {\n                    throw new CardingProtectionFailedError();\n                }\n\n                return {\n                    type: 'recaptcha_v2_verification',\n                    data: {\n                        human_verification_token: token,\n                    },\n                };\n            })).toPromise();\n    }\n\n    private _initialize(recaptchaSitekey: string): Promise<void> {\n        const cardingProtectionElementId = 'cardingProtectionContainer';\n\n        let cardingProtectionElement = document.getElementById(cardingProtectionElementId);\n        if (cardingProtectionElement && cardingProtectionElement.parentNode) {\n            cardingProtectionElement.parentNode.removeChild(cardingProtectionElement);\n        }\n\n        cardingProtectionElement = document.createElement('div');\n        cardingProtectionElement.setAttribute('id', cardingProtectionElementId);\n        document.body.appendChild(cardingProtectionElement);\n\n        return this._googleRecaptcha.load(cardingProtectionElementId, recaptchaSitekey);\n    }\n\n    private _isPaymentHumanVerificationRequest(error: RequestError): boolean {\n        const { additional_action_required, status } = error.body;\n\n        return status === 'additional_action_required'\n            && additional_action_required\n            && additional_action_required.type === 'recaptcha_v2_verification';\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete your spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../common/dom';\nimport { NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError, SpamProtectionNotLoadedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nconst TIMEOUT = 7000;\nconst RETRY_INTERVAL = 250;\nconst MAX_RETRIES = TIMEOUT / RETRY_INTERVAL;\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n    private _memoized: (recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => Subject<RecaptchaResult>;\n    private _widgetId?: number;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {\n        this._memoized = memoize((recaptcha: ReCaptchaV2.ReCaptcha, sitekey: string, container: HTMLElement | null) => {\n            const event$ = new Subject<RecaptchaResult>();\n\n            if (!container) {\n                throw new Error();\n            }\n\n            this._widgetId = recaptcha.render(container.id, {\n                sitekey,\n                size: 'invisible',\n                callback: () => {\n                    event$.next({\n                        token: recaptcha.getResponse(this._widgetId),\n                    });\n                    recaptcha.reset(this._widgetId);\n                },\n                'error-callback': () => {\n                    event$.next({\n                        error: new SpamProtectionFailedError(),\n                    });\n                },\n            });\n\n            return event$;\n        }, { isEqual: (a, b) => a === b });\n    }\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                this._event$ = this._memoized(recaptcha, sitekey, document.getElementById(containerId));\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        return defer(() => {\n            const event$ = this._event$;\n            const recaptcha = this._recaptcha;\n\n            if (!event$ || !recaptcha) {\n                throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n            }\n\n            return defer(() => {\n                const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n                return element ? of(element) : throwError(new SpamProtectionNotLoadedError());\n            })\n                .pipe(\n                    retryWhen(errors => errors.pipe(\n                        delay(RETRY_INTERVAL),\n                        switchMap((error, index) =>\n                            index < MAX_RETRIES ? of(error) : throwError(error)\n                        )\n                    )),\n                    switchMap(element => {\n                        this._watchRecaptchaChallengeWindow(event$, element);\n                        recaptcha.execute(this._widgetId);\n\n                        return event$;\n                    }),\n                    catchError(error => of({ error }))\n                );\n        });\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionChallengeNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../common/dom';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class InvalidHostedFormError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed due to an unknown error with the hosted payment form.');\n\n        this.name = 'InvalidHostedFormError';\n        this.type = 'invalid_hosted_form';\n    }\n}\n","import { values } from 'lodash';\nimport { fromEvent } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { mapFromPaymentErrorResponse } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { CardInstrument } from '../payment/instrument';\n\nimport { InvalidHostedFormConfigError, InvalidHostedFormError, InvalidHostedFormValueError } from './errors';\nimport { HostedFieldEvent, HostedFieldEventType } from './hosted-field-events';\nimport HostedFieldType from './hosted-field-type';\nimport { HostedFieldStylesMap } from './hosted-form-options';\nimport HostedFormOrderData from './hosted-form-order-data';\nimport { HostedInputAttachErrorEvent, HostedInputEventMap, HostedInputEventType, HostedInputSubmitErrorEvent, HostedInputValidateEvent } from './iframe-content';\n\nexport const RETRY_INTERVAL = 60 * 1000;\nexport const LAST_RETRY_KEY = 'lastRetry';\n\nexport default class HostedField {\n    private _iframe: HTMLIFrameElement;\n\n    constructor(\n        host: string,\n        formId: string,\n        private _type: HostedFieldType,\n        private _containerId: string,\n        private _placeholder: string,\n        private _accessibilityLabel: string,\n        private _styles: HostedFieldStylesMap,\n        private _eventPoster: IframeEventPoster<HostedFieldEvent>,\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _cardInstrument?: CardInstrument\n    ) {\n        this._iframe = document.createElement('iframe');\n\n        this._iframe.src = `${host}/pay/hosted_forms/${formId}/field?version=${LIBRARY_VERSION}`;\n        this._iframe.style.border = 'none';\n        this._iframe.style.height = '100%';\n        this._iframe.style.overflow = 'hidden';\n        this._iframe.style.width = '100%';\n    }\n\n    getType(): HostedFieldType {\n        return this._type;\n    }\n\n    attach(): Promise<void> {\n        const container = document.getElementById(this._containerId);\n\n        if (!container) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the provided container ID is not valid.');\n        }\n\n        container.appendChild(this._iframe);\n        this._eventListener.listen();\n\n        return fromEvent(this._iframe, 'load')\n            .pipe(\n                switchMap(async ({ target }) => {\n                    const contentWindow = target && (target as HTMLIFrameElement).contentWindow;\n\n                    if (!contentWindow) {\n                        throw new Error('The content window of the iframe cannot be accessed.');\n                    }\n\n                    this._eventPoster.setTarget(contentWindow);\n\n                    await this._eventPoster.post({\n                        type: HostedFieldEventType.AttachRequested,\n                        payload: {\n                            accessibilityLabel: this._accessibilityLabel,\n                            cardInstrument: this._cardInstrument,\n                            fontUrls: this._getFontUrls(),\n                            placeholder: this._placeholder,\n                            styles: this._styles,\n                            type: this._type,\n                        },\n                    }, {\n                        successType: HostedInputEventType.AttachSucceeded,\n                        errorType: HostedInputEventType.AttachFailed,\n                    });\n                }),\n                catchError(error => {\n                    if (this._isAttachErrorEvent(error)) {\n                        return this._handleAttachErrorEvent(error);\n                    }\n\n                    throw error;\n                }),\n                take(1)\n            ).toPromise();\n    }\n\n    detach(): void {\n        if (!this._iframe.parentElement) {\n            return;\n        }\n\n        this._iframe.parentElement.removeChild(this._iframe);\n        this._eventListener.stopListen();\n    }\n\n    async submitForm(\n        fields: HostedFieldType[],\n        data: HostedFormOrderData\n    ): Promise<void> {\n        try {\n            await this._eventPoster.post({\n                type: HostedFieldEventType.SubmitRequested,\n                payload: { fields, data },\n            }, {\n                successType: HostedInputEventType.SubmitSucceeded,\n                errorType: HostedInputEventType.SubmitFailed,\n            });\n        } catch (event) {\n            if (this._isSubmitErrorEvent(event)) {\n                if (event.payload.error.code === 'hosted_form_error') {\n                    throw new InvalidHostedFormError(event.payload.error.message);\n                }\n\n                if (event.payload.response) {\n                    throw mapFromPaymentErrorResponse(event.payload.response);\n                }\n\n                throw new Error(event.payload.error.message);\n            }\n\n            throw event;\n        }\n    }\n\n    async validateForm(): Promise<void> {\n        const { payload } = await this._eventPoster.post<HostedInputValidateEvent>({\n            type: HostedFieldEventType.ValidateRequested,\n        }, {\n            successType: HostedInputEventType.Validated,\n        });\n\n        if (!payload.isValid) {\n            throw new InvalidHostedFormValueError(payload.errors);\n        }\n    }\n\n    private async _handleAttachErrorEvent(event: HostedInputAttachErrorEvent): Promise<void> {\n        const lastRetry = Number(this._storage.getItem(LAST_RETRY_KEY));\n\n        // This is to prevent the possibility of getting into a retry loop, in\n        // case there is something unexpected that prevents the shopper from\n        // being able to recover from an invalid hosted payment form error.\n        if (!lastRetry || Date.now() - lastRetry > RETRY_INTERVAL) {\n            this._storage.setItem(LAST_RETRY_KEY, Date.now());\n            this._location.replace(event.payload.error.redirectUrl);\n\n            return new Promise(() => {});\n        }\n\n        throw new InvalidHostedFormError(event.payload.error.message);\n    }\n\n    private _getFontUrls(): string[] {\n        const hostname = 'fonts.googleapis.com';\n        const links = document.querySelectorAll(`link[href*='${hostname}'][rel='stylesheet']`);\n\n        return Array.prototype.slice.call(links)\n            .filter(link => parseUrl(link.href).hostname === hostname)\n            .filter(link => values(this._styles)\n                .map(style => style && style.fontFamily)\n                .filter((family): family is string => typeof family === 'string')\n                .some(family => family.split(/,\\s/).some(name => link.href.indexOf(name.replace(' ', '+')) !== -1))\n            )\n            .map(link => link.href);\n    }\n\n    private _isSubmitErrorEvent(event: any): event is HostedInputSubmitErrorEvent {\n        return event.type === HostedInputEventType.SubmitFailed;\n    }\n\n    private _isAttachErrorEvent(event: any): event is HostedInputAttachErrorEvent {\n        return event.type === HostedInputEventType.AttachFailed;\n    }\n}\n","import { noop, without } from 'lodash';\n\nimport { IframeEventListener } from '../common/iframe';\nimport { OrderPaymentRequestBody } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport { InvalidHostedFormConfigError } from './errors';\nimport HostedField from './hosted-field';\nimport HostedFormOptions from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\nimport { HostedInputEnterEvent, HostedInputEventMap, HostedInputEventType } from './iframe-content';\n\ntype HostedFormEventCallbacks = Pick<HostedFormOptions, 'onBlur' | 'onCardTypeChange' | 'onFocus' | 'onEnter' | 'onValidate'>;\n\nexport default class HostedForm {\n    private _bin?: string;\n    private _cardType?: string;\n\n    constructor(\n        private _fields: HostedField[],\n        private _eventListener: IframeEventListener<HostedInputEventMap>,\n        private _payloadTransformer: HostedFormOrderDataTransformer,\n        private _eventCallbacks: HostedFormEventCallbacks,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {\n        const { onBlur = noop, onCardTypeChange = noop, onFocus = noop, onValidate = noop } = this._eventCallbacks;\n\n        this._eventListener.addListener(HostedInputEventType.Blurred, ({ payload }) => onBlur(payload));\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => onCardTypeChange(payload));\n        this._eventListener.addListener(HostedInputEventType.Focused, ({ payload }) => onFocus(payload));\n        this._eventListener.addListener(HostedInputEventType.Validated, ({ payload }) => onValidate(payload));\n        this._eventListener.addListener(HostedInputEventType.Entered, this._handleEnter);\n\n        this._eventListener.addListener(HostedInputEventType.CardTypeChanged, ({ payload }) => this._cardType = payload.cardType);\n        this._eventListener.addListener(HostedInputEventType.BinChanged, ({ payload }) => this._bin = payload.bin);\n    }\n\n    getBin(): string | undefined {\n        return this._bin;\n    }\n\n    getCardType(): string | undefined {\n        return this._cardType;\n    }\n\n    async attach(): Promise<void> {\n        this._eventListener.listen();\n\n        const field = this._getFirstField();\n        const otherFields = without(this._fields, field);\n\n        await field.attach();\n        await Promise.all(otherFields.map(otherField => otherField.attach()));\n    }\n\n    detach(): void {\n        this._eventListener.stopListen();\n\n        this._fields.forEach(field => {\n            field.detach();\n        });\n    }\n\n    async submit(payload: OrderPaymentRequestBody): Promise<void> {\n        try {\n            return await this._getFirstField().submitForm(\n                this._fields.map(field => field.getType()),\n                this._payloadTransformer.transform(payload)\n            );\n        } catch (error) {\n            const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n            return await this._getFirstField().submitForm(\n                this._fields.map(field => field.getType()),\n                this._payloadTransformer.transform(payload, additionalAction)\n            );\n        }\n    }\n\n    async validate(): Promise<void> {\n        return await this._getFirstField().validateForm();\n    }\n\n    private _getFirstField(): HostedField {\n        const field = this._fields[0];\n\n        if (!field) {\n            throw new InvalidHostedFormConfigError('Unable to proceed because the payment form has no field defined.');\n        }\n\n        return field;\n    }\n\n    private _handleEnter: (event: HostedInputEnterEvent) => Promise<void> = async ({ payload }) => {\n        try {\n            await this.validate();\n        } catch (error) {\n            // Catch form validation error because we want to trigger `onEnter`\n            // irrespective of the validation result.\n            if (error.name !== 'InvalidHostedFormValueError') {\n                throw error;\n            }\n        }\n\n        const { onEnter = noop } = this._eventCallbacks;\n\n        onEnter(payload);\n    };\n}\n","import { omit } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { OrderPaymentRequestBody } from '../order';\nimport { isVaultedInstrument, HostedCreditCardInstrument, PaymentAdditionalAction } from '../payment';\n\nimport HostedFormOrderData from './hosted-form-order-data';\n\nexport default class HostedFormOrderDataTransformer {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    transform(payload: OrderPaymentRequestBody, additionalAction?: PaymentAdditionalAction): HostedFormOrderData {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const order = state.order.getOrder();\n        const orderMeta = state.order.getOrderMeta();\n        const payment = omit(payload.paymentData, 'ccExpiry', 'ccName', 'ccNumber', 'ccCvv') as HostedCreditCardInstrument;\n        const paymentMethod = state.paymentMethods.getPaymentMethod(payload.methodId, payload.gatewayId);\n        const paymentMethodMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const authToken = instrumentMeta && payment && isVaultedInstrument(payment) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            additionalAction,\n            authToken,\n            checkout,\n            config,\n            order,\n            orderMeta,\n            payment,\n            paymentMethod,\n            paymentMethodMeta,\n        };\n    }\n}\n","import { createScriptLoader } from '@bigcommerce/script-loader';\nimport { pick } from 'lodash';\n\nimport { ReadableCheckoutStore } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { IframeEventListener, IframeEventPoster } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { CardInstrument } from '../payment/instrument';\nimport { createSpamProtection, PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport HostedField from './hosted-field';\nimport HostedFieldType from './hosted-field-type';\nimport HostedForm from './hosted-form';\nimport HostedFormOptions, { HostedCardFieldOptionsMap, HostedStoredCardFieldOptionsMap } from './hosted-form-options';\nimport HostedFormOrderDataTransformer from './hosted-form-order-data-transformer';\n\nconst STORAGE_NAMESPACE = 'BigCommerce.HostedField';\n\nexport default class HostedFormFactory {\n    constructor(\n        private _store: ReadableCheckoutStore\n    ) {}\n\n    create(host: string, formId: string, options: HostedFormOptions): HostedForm {\n        const fieldTypes = Object.keys(options.fields) as HostedFieldType[];\n        const fields = fieldTypes.reduce<HostedField[]>((result, type) => {\n            const fields = options.fields as HostedStoredCardFieldOptionsMap & HostedCardFieldOptionsMap;\n            const fieldOptions = fields[type];\n\n            if (!fieldOptions) {\n                return result;\n            }\n\n            return [\n                ...result,\n                new HostedField(\n                    host,\n                    formId,\n                    type,\n                    fieldOptions.containerId,\n                    fieldOptions.placeholder || '',\n                    fieldOptions.accessibilityLabel || '',\n                    options.styles || {},\n                    new IframeEventPoster(host),\n                    new IframeEventListener(host),\n                    new BrowserStorage(STORAGE_NAMESPACE),\n                    window.location,\n                    'instrumentId' in fieldOptions ?\n                        this._getCardInstrument(fieldOptions.instrumentId) :\n                        undefined\n                ),\n            ];\n        }, []);\n\n        return new HostedForm(\n            fields,\n            new IframeEventListener(host),\n            new HostedFormOrderDataTransformer(this._store),\n            pick(options, 'onBlur', 'onEnter', 'onFocus', 'onCardTypeChange', 'onValidate'),\n            new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()))\n        );\n    }\n\n    private _getCardInstrument(instrumentId: string): CardInstrument {\n        const { instruments: { getCardInstrument } } = this._store.getState();\n        const instrument = getCardInstrument(instrumentId);\n\n        if (!instrument) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentInstrument);\n        }\n\n        return instrument;\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport { SpamProtectionChallengeNotCompletedError, SpamProtectionFailedError } from './errors';\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\nimport SpamProtectionRequestSender from './spam-protection-request-sender';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha,\n        private _requestSender: SpamProtectionRequestSender\n    ) {}\n\n    initialize(options?: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(SpamProtectionActionType.InitializeRequested, undefined)),\n            defer(async () => {\n                const spamProtectionElementId = options ? options.containerId : 'spamProtectionContainer';\n\n                if (!options && !document.getElementById(spamProtectionElementId)) {\n                    const spamProtectionElement = document.createElement('div');\n                    spamProtectionElement.setAttribute('id', spamProtectionElementId);\n                    document.body.appendChild(spamProtectionElement);\n                }\n\n                const state = store.getState();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const recaptchaSitekey = storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n                await this._googleRecaptcha.load(spamProtectionElementId, recaptchaSitekey);\n\n                return createAction(SpamProtectionActionType.InitializeSucceeded);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SpamProtectionActionType.InitializeFailed, error))\n        );\n    }\n\n    execute(): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const { checkout } = store.getState();\n            const { id: checkoutId, shouldExecuteSpamCheck } = checkout.getCheckoutOrThrow();\n\n            if (!shouldExecuteSpamCheck) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n                this.initialize()(store),\n                this._googleRecaptcha.execute()\n                    .pipe(take(1))\n                    .pipe(switchMap(async ({ error, token }) => {\n                        if (error instanceof SpamProtectionChallengeNotCompletedError) {\n                            throw error;\n                        }\n\n                        if (error || !token) {\n                            throw new SpamProtectionFailedError();\n                        }\n\n                        const { body } = await this._requestSender.validate(checkoutId, token);\n\n                        return createAction(SpamProtectionActionType.ExecuteSucceeded, body);\n                    }))\n            ).pipe(\n                catchError(error => throwErrorAction(SpamProtectionActionType.ExecuteFailed, error))\n            );\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class SpamProtectionRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    validate(checkoutId: string, token: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/spam-protection`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: { token }, headers, timeout });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\nimport { PaymentHumanVerificationHandler } from '../spam-protection';\n\nimport Payment, { FormattedHostedInstrument, FormattedPayload, FormattedVaultedInstrument } from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer,\n        private _paymentHumanVerificationHandler: PaymentHumanVerificationHandler\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            defer(async () => {\n                try {\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform(payment, store.getState())\n                    );\n                } catch (error) {\n                    const additionalAction = await this._paymentHumanVerificationHandler.handle(error);\n\n                    return await this._paymentRequestSender.submitPayment(\n                        this._paymentRequestTransformer.transform({ ...payment, additionalAction }, store.getState())\n                    );\n                }\n            })\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string,\n        instrumentId?: string,\n        shouldSaveInstrument?: boolean,\n        target?: string,\n        promise?: Promise<undefined>\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            let paymentData: FormattedPayload<FormattedHostedInstrument | FormattedVaultedInstrument> | undefined;\n\n            if (instrumentId) {\n                paymentData = { formattedPayload: { bigpay_token: instrumentId } };\n            } else if (shouldSaveInstrument) {\n                paymentData = { formattedPayload: { vault_payment_instrument: shouldSaveInstrument } };\n            }\n\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId, paymentData }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                Promise.race([this._paymentRequestSender.initializeOffsitePayment(payload, target), promise].filter(Boolean))\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry, RegistryOptions } from '../common/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        if (paymentMethod.gateway === 'klarna') {\n            return PaymentStrategyType.KLARNAV2;\n        }\n\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen' || paymentMethod.gateway === 'barclaycard') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    return {\n        color_depth: screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language: navigator.language || (navigator as any).userLanguage,\n        screen_height: screen.height,\n        screen_width: screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export enum AdyenActionType {\n    /*\n    * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n    * or the challenge flow.\n    * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n    * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n    * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n    * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n    * */\n    Redirect = 'redirect',\n\n    /*\n    * The Component presents the QR code and calls the onAdditionalDetails event.\n    * */\n    QRCode = 'qrCode',\n\n    /*\n    * The Component displays the voucher which the shopper uses to complete the payment.\n    * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    iDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n}\n\nexport interface AdyenAction {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [\n        {\n            code: string;\n        }\n    ];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenComponentState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(action: AdyenAction, componentOptions?: ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: CardState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: CardState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenCreditCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions extends AdyenBaseCardComponentOptions, AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport type AdyenComponentState = (\n    CardState | WechatState\n);\n\nexport type AdyenComponentOptions = (\n    AdyenCreditCardComponentOptions | AdyenIdealComponentOptions | AdyenCustomCardComponentOptions\n);\n\nexport default function isCardState(param: any): param is CardState {\n    return param && typeof param.data.paymentMethod.encryptedSecurityCode === 'string' ||\n        typeof param.data.paymentMethod.encryptedExpiryMonth === 'string';\n}\n\nexport function isAccountState(param: any): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf(param.data.paymentMethod.type) !== -1;\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { getBrowserInfo } from '../../../common/browser-info';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport isCardState, { isAccountState, AdyenAction, AdyenActionType, AdyenAdditionalAction, AdyenAdditionalActionState, AdyenClient, AdyenComponent, AdyenComponentState, AdyenComponentType, AdyenError, AdyenPaymentMethodType } from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: AdyenV2ScriptLoader,\n        private _locale: string\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                const componentState = this._componentState;\n\n                if (!componentState) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    let bigpayToken = {};\n                    if (isCardState(componentState)) {\n                        const { encryptedCardNumber, encryptedSecurityCode, encryptedExpiryMonth, encryptedExpiryYear } = componentState.data.paymentMethod;\n\n                        bigpayToken = {\n                            credit_card_number_confirmation: encryptedCardNumber,\n                            expiry_month: encryptedExpiryMonth,\n                            expiry_year: encryptedExpiryYear,\n                            verification_value: encryptedSecurityCode,\n                        };\n                    }\n\n                    if (isCardState(componentState) || isAccountState(componentState)) {\n                        return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            ...payment,\n                            paymentData: {\n                                formattedPayload: {\n                                    bigpay_token: {\n                                        ...bigpayToken,\n                                        token: paymentData.instrumentId,\n                                    },\n                                    browser_info: getBrowserInfo(),\n                                },\n                            },\n                        }));\n                    }\n                }\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                    methodId: payment.methodId,\n                    paymentData: {\n                        formattedPayload: {\n                            credit_card_token: {\n                                token: JSON.stringify({\n                                    ...componentState.data.paymentMethod,\n                                    origin: window.location.origin,\n                                }),\n                            },\n                            browser_info: getBrowserInfo(),\n                            vault_payment_instrument: shouldSaveInstrument,\n                        },\n                    },\n                }));\n            })\n            .catch(error => this._processAdditionalAction(error, shouldSaveInstrument));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getPaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(adyenAction.type === AdyenActionType.ThreeDS2Challenge ||\n                    adyenAction.type === AdyenActionType.QRCode);\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    onChange: componentState => this._updateComponentState(componentState),\n                    onError: componentState => this._updateComponentState(componentState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact:\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: componentState => this._updateComponentState(componentState),\n                        }\n                    );\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.iDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                                ...adyenv2.options,\n                                onChange: componentState => this._updateComponentState(componentState),\n                            }\n                        );\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                        }\n\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(error: unknown, shouldSaveInstrument?: boolean): Promise<InternalCheckoutSelectors> {\n        if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'additional_action_required'})) {\n            return Promise.reject(error);\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._store.dispatch(this._paymentActionCreator.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                },\n            }));\n        } catch (error) {\n            return this._processAdditionalAction(error, shouldSaveInstrument);\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentState) {\n        this._componentState = componentState;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { AdyenClient, AdyenConfiguration, AdyenHostWindow } from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenHostWindow = window\n    ) { }\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.8.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.8.0/adyen.js`),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { LineItemCategory } from '../../../cart';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderIncludes, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean | undefined, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({ useStoreCredit }, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '.';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId, amazonpay } = options;\n\n        if (!amazonpay) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonpay\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._amazonPayV2PaymentProcessor.initialize(methodId);\n\n        const { paymentToken } = paymentMethod.initializationData;\n        const buttonId = amazonpay.walletButton;\n\n        if (paymentToken && buttonId) {\n            this._bindEditButton(buttonId, paymentToken, 'changePayment');\n        } else {\n            this._walletButton = this._createSignInButton(amazonpay.container, paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { paymentToken } = paymentMethod.initializationData;\n\n        if (paymentToken) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken },\n            };\n\n            await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n            try {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            } catch (error) {\n                if (error instanceof RequestError && error.body.status === 'additional_action_required') {\n                    return new Promise(() => {\n                        window.location.replace(error.body.additional_action_required.data.redirect_url);\n                    });\n                }\n\n                throw error;\n            }\n        }\n\n        return this._showLoadingSpinner(this._signInCustomer);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(_options?: PaymentRequestOptions | undefined): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _signInCustomer = () => {\n        if (!this._walletButton) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._walletButton.click();\n\n        return new Promise<never>(noop);\n    };\n\n    private _bindEditButton(id: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        const button = document.getElementById(id);\n\n        if (!button) {\n            return;\n        }\n\n        const clone = button.cloneNode(true);\n        button.replaceWith(clone);\n\n        clone.addEventListener('click', () => this._showLoadingSpinner(() => new Promise(noop)));\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(callback?: () => Promise<void> | Promise<never>): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n\n            if (callback) {\n                return callback();\n            }\n\n            return Promise.reject();\n        }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, paymentMethod: PaymentMethod): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n        const config = state.config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                region,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        let productType = AmazonPayV2PayOptions.PayAndShip;\n\n        if (cart && cart.lineItems.physicalItems.length === 0) {\n            productType = AmazonPayV2PayOptions.PayOnly;\n        }\n\n        const amazonButtonOptions = {\n            merchantId,\n            sandbox: !!testMode,\n            checkoutLanguage,\n            ledgerCurrency,\n            region,\n            productType,\n            createCheckoutSession: {\n                method: checkoutSessionMethod,\n                url: `${config.links.siteLink}/remote-checkout/${paymentMethod.id}/payment-session`,\n                extractAmazonCheckoutSessionId,\n            },\n            placement: AmazonPayV2Placement.Checkout,\n        };\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { noop } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BlueSnapV2StyleProps } from './bluesnapv2';\nimport { BlueSnapV2PaymentInitializeOptions } from './bluesnapv2-payment-options';\n\nconst IFRAME_NAME = 'bluesnapv2_hosted_payment_page';\n\nexport default class BlueSnapV2PaymentStrategy implements PaymentStrategy {\n\n    private _initializeOptions?: BlueSnapV2PaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    async execute(orderRequest: OrderRequestBody, options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(\n                NotInitializedErrorType.PaymentNotInitialized\n            );\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(orderRequest, options));\n\n        const { onLoad, style } = this._initializeOptions;\n        const frame = this._createIframe(IFRAME_NAME, style);\n        const promise = new CancellablePromise<undefined>(new Promise(noop));\n\n        onLoad(frame, () => promise.cancel(new PaymentMethodCancelledError()));\n\n        return this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n            payment.methodId,\n            payment.gatewayId,\n            undefined,\n            false,\n            frame.name,\n            promise.promise\n        ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._initializeOptions = options && options.bluesnapv2;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _createIframe(name: string, style?: BlueSnapV2StyleProps): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        iframe.name = name;\n\n        if (style) {\n            const { border, height, width } = style;\n\n            iframe.style.border = border as string;\n            iframe.style.height = height as string;\n            iframe.style.width = width as string;\n        }\n\n        return iframe;\n    }\n}\n","import { isNonceLike } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class BoltPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) { }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, _options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, paymentData } = payment;\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentData || !isNonceLike(paymentData)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, _options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({\n            methodId,\n            paymentData,\n        }));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { NonceInstrument, PaymentInstrument } from './payment';\n\nexport default function isNonceLike(instrument: PaymentInstrument): instrument is NonceInstrument {\n    return Boolean((instrument as NonceInstrument).nonce);\n}\n","import getOverlayStyle from './overlay-style';\n\nexport interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    hasCloseButton?: boolean;\n    innerHtml?: HTMLElement | DocumentFragment;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n    onClickClose?(event: MouseEvent): void;\n}\n\nexport interface Elements {\n    element: HTMLElement;\n    mainElement: HTMLElement;\n    closeElement?: HTMLElement;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _mainElement: HTMLElement;\n    private _closeElement?: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        const { element, closeElement, mainElement } = this._createElements(options);\n\n        this._element = element;\n        this._closeElement = closeElement;\n        this._mainElement = mainElement;\n    }\n\n    show(options?: OverlayShowOptions): void {\n\n        if (this._mainElement.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._mainElement);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._mainElement.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElements(options?: OverlayOptions): Elements {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = 'checkoutOverlay',\n            transitionDuration = 400,\n            hasCloseButton,\n            innerHtml,\n        } = options || {};\n        let mainElement = element;\n        let closeElement: HTMLElement | undefined;\n        let classLayout: string | undefined;\n        let classClose: string | undefined;\n        let classOverlayText: string | undefined;\n\n        if (id) {\n            element.id = id;\n        }\n\n        if (innerHtml) {\n            const overlayText = document.createElement('div');\n            classOverlayText = `${id}--overlayText`;\n            overlayText.className = classOverlayText;\n            overlayText.appendChild(innerHtml);\n\n            element.appendChild(overlayText);\n        }\n\n        if (hasCloseButton) {\n            classClose = `${id}--close`;\n            closeElement = document.createElement('div');\n            closeElement.className =  classClose;\n\n            classLayout = `${id}--layout`;\n            mainElement = document.createElement('div');\n            mainElement.className = classLayout;\n\n            mainElement.appendChild(element);\n            mainElement.appendChild(closeElement);\n        }\n\n        mainElement.appendChild(getOverlayStyle({ id, background, transitionDuration, classLayout, classOverlayText, classClose }));\n\n        return { element, closeElement, mainElement };\n    }\n\n    private _addEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n           return;\n        }\n\n        element.addEventListener('click', onClick);\n    }\n\n    private _removeEventListener(element?: HTMLElement, onClick?: (event: MouseEvent) => void): void {\n        if (!element || !onClick) {\n            return;\n        }\n\n        element.removeEventListener('click', onClick);\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options) {\n            const { onClick, onClickClose } = options;\n\n            this._addEventListener(this._element, onClick);\n            this._addEventListener(this._closeElement, onClickClose);\n\n            this._unregisterClick = () => {\n                this._removeEventListener(this._element, onClick);\n                this._removeEventListener(this._closeElement, onClickClose);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handleTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._mainElement.parentElement) {\n                this._mainElement.remove();\n            }\n\n            this._element.removeEventListener('transitionend', handleTransition);\n        };\n\n        this._element.addEventListener('transitionend', handleTransition);\n    }\n}\n","interface OverlayStyleOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n    classLayout?: string;\n    classOverlayText?: string;\n    classClose?: string;\n}\n\nexport default function getOverlayStyle(options: OverlayStyleOptions): HTMLElement {\n    const { id, background, transitionDuration, classLayout, classOverlayText, classClose } = options;\n    const styles = document.createElement('style');\n    const addClassLayout = classLayout ? `, .${classLayout}` : '';\n\n    styles.id = `${id}--styles`;\n    styles.type = 'text/css';\n    styles.innerText = `\n        #${id}${addClassLayout} {\n            display: block;\n            height: 100%;\n            width: 100%;\n            left: 0;\n            top: 0;\n            position: fixed;\n            z-index: 2147483647;\n        }\n        #${id} {\n            transition: opacity ${transitionDuration}ms ease-out;\n            background: ${background};\n            opacity: 0;\n        }\n    `;\n\n    if (classOverlayText) {\n        styles.innerText += `\n             #${id} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n             }\n             #${id} .${classOverlayText} {\n                color: white;\n                max-width: 330px;\n                font-size: 1.2em;\n                text-align: center;\n             }\n        `;\n    }\n\n    if (classClose) {\n        styles.innerText += `\n            #${id} {\n                opacity: 1;\n            }\n            .${classLayout} .${classClose} {\n                position: fixed;\n                right: 16px;\n                top: 16px;\n                width: 16px;\n                height: 16px;\n                opacity: 0.6;\n                cursor: pointer;\n                z-index: 3147483647;\n            }\n            .${classLayout} .${classClose}::after, .${classLayout} .${classClose}::before {\n                position: absolute;\n                left: 8px;\n                content: '';\n                height: 16px;\n                width: 2px;\n                background-color: #fff;\n            }\n            .${classLayout} .${classClose}::after {\n                transform: rotate(-45deg);\n            }\n            .${classLayout} .${classClose}::before {\n                transform: rotate(45deg);\n            }\n        `;\n    }\n\n    return styles;\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData, BraintreeShippingAddressOverride, BraintreeTokenizePayload, BraintreeVerifyPayload } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport interface PaypalConfig {\n    amount: number;\n    currency: string;\n    locale: string;\n    offerCredit?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    shouldSaveInstrument?: boolean;\n}\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal({ shouldSaveInstrument, ...config }: PaypalConfig): Promise<BraintreeTokenizePayload> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    enableShippingAddress: true,\n                    flow: shouldSaveInstrument ? 'vault' : 'checkout',\n                    useraction: 'commit',\n                    ...config,\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<BraintreeVerifyPayload> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    getSessionId(): Promise<string | undefined> {\n        return this._braintreeSDKCreator.getDataCollector()\n            .then(({ deviceData }) => deviceData);\n    }\n\n    /**\n     * @deprecated Use getSessionId() and combine them in the consumer.\n     */\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument, { isHostedVaultedInstrument } from '../../is-vaulted-instrument';\nimport Payment, { FormattedPayload, PaypalInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\nimport mapToBraintreeShippingAddressOverride from './map-to-braintree-shipping-address-override';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { nonce, config: { isVaultingEnabled } } = this._paymentMethod;\n        const { paymentData = {} } = payment;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: this._formattedPayload(nonce) });\n        }\n\n        if (isVaultedInstrument(paymentData) || isHostedVaultedInstrument(paymentData)) {\n            if (!isVaultingEnabled) {\n                throw new InvalidArgumentError('Vaulting is disabled but a vaulted instrument was being used for this transaction');\n            }\n\n            return Promise.resolve(payment);\n        }\n\n        if (paymentData.shouldSaveInstrument && !isVaultingEnabled) {\n            throw new InvalidArgumentError('Vaulting is disabled but shouldSaveInstrument is set to true');\n        }\n\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        const shippingAddressOverride = shippingAddress ? mapToBraintreeShippingAddressOverride(shippingAddress) : undefined;\n\n        return Promise.all([\n            this._braintreePaymentProcessor.paypal({\n                amount: grandTotal,\n                locale: storeLanguage,\n                currency: currency.code,\n                offerCredit: this._credit,\n                shippingAddressOverride,\n                shouldSaveInstrument: paymentData.shouldSaveInstrument || false,\n            }),\n            this._braintreePaymentProcessor.getSessionId(),\n        ]).then(([\n            { nonce, details },\n            sessionId,\n        ]) => ({\n            ...payment,\n            paymentData: this._formattedPayload(nonce, details.email, sessionId, paymentData.shouldSaveInstrument),\n        }));\n    }\n\n    private _formattedPayload(token: string, email?: string, sessionId?: string, vaultPaymentInstrument?: boolean): FormattedPayload<PaypalInstrument> {\n        return {\n            formattedPayload: {\n                vault_payment_instrument: vaultPaymentInstrument || null,\n                device_info: sessionId || null,\n                paypal_account: {\n                    token,\n                    email: email || null,\n                },\n            },\n        };\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { Address } from '../../../address';\n\nimport { BraintreeShippingAddressOverride } from './braintree';\n\nexport default function mapToBraintreeShippingAddressOverride(address: Address): BraintreeShippingAddressOverride {\n    return {\n        recipientName: `${address.firstName} ${address.lastName}`,\n        line1: address.address1,\n        line2: address.address2,\n        city: address.city,\n        state: address.stateOrProvinceCode,\n        postalCode: address.postalCode,\n        countryCode: address.countryCode,\n        phone: address.phone,\n    };\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedForm } from '../../../hosted-form';\nimport { OrderRequestBody } from '../../../order';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm\n    ): Promise<InternalCheckoutSelectors> {\n        const { instruments: { getCardInstrument }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument = isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(merge(payload, {\n                payment: {\n                    paymentData: {\n                        threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                    },\n                },\n            }), options);\n        } catch (error) {\n            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData());\n\n            if (!hostedForm) {\n                return await this._store.dispatch(this._paymentActionCreator.submitPayment(merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                })));\n            }\n\n            await hostedForm.submit(merge(payload.payment, {\n                paymentData: { threeDSecure },\n            }));\n\n            return this._store.getState();\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(method.id)\n        );\n\n        return getPaymentMethodOrThrow(method.id).clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddressOrThrow();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckoutOrThrow();\n        const order = state.order.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport { CardinalAccount, CardinalAddress, CardinalConsumer, CardinalEventType, CardinalInitializationType, CardinalPartialOrder, CardinalPaymentBrand, CardinalSignatureValidationErrors, CardinalSignatureVerification, CardinalSDK, CardinalTriggerEvents, CardinalValidatedAction, CardinalValidatedData } from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n    private _isConfigured: boolean = false;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._isConfigured) {\n            return Promise.resolve();\n        }\n\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    this._isConfigured = true;\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { HostedForm, HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(\n        protected _store: CheckoutStore,\n        protected _orderActionCreator: OrderActionCreator,\n        protected _paymentActionCreator: PaymentActionCreator,\n        protected _hostedFormFactory: HostedFormFactory\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._isHostedPaymentFormEnabled() && this._shouldRenderHostedForm ?\n            this._executeWithHostedForm(payload, options) :\n            this._executeWithoutHostedForm(payload, options);\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isHostedPaymentFormEnabled() || !this._isHostedFieldAvailable(options)) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve(this._store.getState());\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const { config } = this._store.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } = config.getStoreConfig() || {};\n        const { payment: { formId = '' } = {} } = config.getContextConfig() || {};\n\n        if (!formOptions || !formId) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._hostedFormFactory.create(host, formId, formOptions);\n\n        return form.attach()\n            .then(() => {\n                this._shouldRenderHostedForm = true;\n                this._hostedForm = form;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _executeWithoutHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _executeWithHostedForm(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>  {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return form.validate()\n            .then(() => this._store.dispatch(this._orderActionCreator.submitOrder(order, options)))\n            .then(() => form.submit(payment))\n            .then(() => this._store.dispatch(this._orderActionCreator.loadCurrentOrder()));\n    }\n\n    private _isHostedPaymentFormEnabled(): boolean {\n        const { config } = this._store.getState();\n        const { checkoutSettings: { isHostedPaymentFormEnabled = false } = {} } = config.getStoreConfig() || {};\n\n        return isHostedPaymentFormEnabled;\n    }\n\n    private _isHostedFieldAvailable(options?: PaymentInitializeOptions): boolean {\n        return !(values(options && options.creditCard && options.creditCard.form.fields).every(isNil));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class CyberSourcePaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport { AdyenPaymentMethodType } from '../adyenv2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepayadyenv2' && options.googlepayadyenv2) {\n            return options.googlepayadyenv2;\n        }\n\n        if (options.methodId === 'googlepayauthorizenet' && options.googlepayauthorizenet) {\n            return options.googlepayauthorizenet;\n        }\n\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        let nonce;\n\n        if (this._methodId === 'googlepayadyenv2') {\n            nonce = JSON.stringify({\n                type: AdyenPaymentMethodType.GooglePay,\n                googlePayToken: paymentMethod.initializationData.nonce,\n            });\n        } else {\n            nonce = paymentMethod.initializationData.nonce;\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private async _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n\n        return await Promise.all([\n            this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n        ]);\n    }\n}\n","export const supportedCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH', 'NZ'];\nexport const supportedCountriesRequiringStates = ['AU'];\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { supportedCountries, supportedCountriesRequiringStates } from '../klarnav2';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaPayments, { KlarnaAddress, KlarnaAuthorizationResponse, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-payments';\nimport { supportedCountries, supportedCountriesRequiringStates } from './klarna-supported-countries';\nimport KlarnaV2ScriptLoader from './klarnav2-script-loader';\n\nexport default class KlarnaV2PaymentStrategy implements PaymentStrategy {\n    private _klarnaPayments?: KlarnaPayments;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnav2ScriptLoader: KlarnaV2ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnav2ScriptLoader.load()\n            .then(klarnaPayments => { this._klarnaPayments = klarnaPayments; })\n            .then(() => this._loadPaymentsWidget(options))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n        const { gatewayId } = paymentPayload;\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        return this._authorize(paymentPayload.methodId)\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(gatewayId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    useStoreCredit: payload.useStoreCredit,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadPaymentsWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarnav2) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarnav2\" argument is not provided.');\n        }\n\n        const { methodId, gatewayId, klarnav2: { container, onLoad } } = options;\n        const state = this._store.getState();\n\n        if (!gatewayId) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.gatewayId\" argument is not provided.');\n        }\n\n        return this._updateOrder(gatewayId).then(() => new Promise<KlarnaLoadResponse>(resolve => {\n            const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(methodId);\n\n            if (!this._klarnaPayments || !paymentMethod.clientToken) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.init({ client_token: paymentMethod.clientToken });\n            this._klarnaPayments.load({ container, payment_method_category: paymentMethod.id }, response => {\n                if (onLoad) {\n                    onLoad(response);\n                }\n\n                resolve(response);\n            });\n        }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes([...supportedCountries, ...supportedCountriesRequiringStates], billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _needsStateCode(countryCode: string) {\n        return includes(supportedCountriesRequiringStates, countryCode);\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: this._needsStateCode(address.countryCode) ? address.stateOrProvinceCode : address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private async _updateOrder(gatewayId: string) {\n        await this._paymentMethodActionCreator.loadPaymentMethod(gatewayId).toPromise();\n    }\n\n    private _authorize(methodId: string): Promise<KlarnaAuthorizationResponse> {\n        return new Promise<KlarnaAuthorizationResponse>((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            if (!this._klarnaPayments) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaPayments.authorize({ payment_method_category: methodId }, updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaPayments from './klarna-payments';\nimport KlarnaV2Window from './klarnav2-window';\n\nconst SDK_URL = 'https://x.klarnacdn.net/kp/lib/v1/api.js';\n\nexport default class KlarnaV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaPayments> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaV2Window).Klarna.Payments);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport { HostedInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId = paymentData && (paymentData as VaultedInstrument).instrumentId;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(\n                    payment.methodId,\n                    payment.gatewayId,\n                    instrumentId,\n                    shouldSaveInstrument))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { ACKNOWLEDGE } from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {\n        super(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        );\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        await super.initialize(options);\n\n        const { paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n        const paymentMethod = getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this._threeDSecureFlow.prepare(paymentMethod);\n        }\n\n        return this._store.getState();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment: { methodId = '' } = {} } = payload;\n        const { payment: { getPaymentStatus }, paymentMethods: { getPaymentMethodOrThrow } } = this._store.getState();\n\n        if (getPaymentStatus() === ACKNOWLEDGE) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: { methodId },\n                }, options)\n            );\n        }\n\n        if (getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this._threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender } from './index';\n\nexport default class PaypalCommercePaymentStrategy implements PaymentStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    initialize({ paypalcommerce }: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._paypalCommercePaymentProcessor.initialize({ overlay: paypalcommerce && paypalcommerce.overlay });\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const orderId = paymentMethod.initializationData.orderId || await this._getOrderId(options.methodId);\n\n        const paymentData =  {\n            formattedPayload: {\n                vault_payment_instrument: null,\n                device_info: null,\n                paypal_account: {\n                    order_id: orderId,\n                },\n            },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paypalCommercePaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private async _getOrderId(methodId: string): Promise<string> {\n        const state = this._store.getState();\n        const cart = state.cart.getCartOrThrow();\n        const { approveUrl, orderId } = await this._paypalCommerceRequestSender.setupPayment(methodId, cart.id);\n\n        if (approveUrl) {\n            await this._paypalCommercePaymentProcessor.paymentPayPal(approveUrl);\n        }\n\n        return orderId;\n    }\n}\n","import { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\n\nconst modalWidth = 450;\nconst modalHeight = 600;\n\nexport interface ProcessorOptions {\n    overlay?: {\n        helpText?: string;\n        continueText?: string;\n    };\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _window = window;\n    private _popup?: WindowProxy | null;\n    private _overlay?: Overlay;\n\n    constructor() {}\n\n    initialize({ overlay }: ProcessorOptions) {\n        this._overlay = new Overlay({ hasCloseButton: true, innerHtml: this._getOverlayElements(overlay) });\n    }\n\n    paymentPayPal(approveUrl: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            const paramsWindow =  this._getParamsWindow();\n\n            const closeWindow = (isResolve: boolean, isRemoveOverlay: boolean = true) => {\n                this._window.removeEventListener('message', messageHandler);\n\n                if (this._popup) {\n                    this._popup.close();\n                    this._popup = undefined;\n                }\n\n                if (isRemoveOverlay && this._overlay) {\n                    this._overlay.remove();\n                }\n\n                isResolve\n                    ? resolve(true)\n                    : reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n            };\n\n            const messageHandler = (event: MessageEvent) => {\n                if (event.origin !== 'https://www.sandbox.paypal.com' && event.origin !== 'https://www.paypal.com') {\n                    return;\n                }\n\n                const data = JSON.parse(event.data);\n\n                if (data.operation === 'return_to_merchant' && data.updateParent) {\n                    this._window.removeEventListener('message', messageHandler);\n                    closeWindow(true);\n                }\n            };\n\n            this._window.addEventListener('message', messageHandler);\n            this._popup = this._window.open(approveUrl, 'PPFrame', paramsWindow);\n\n            const popupTick = setInterval(() => {\n                if (!this._popup || this._popup.closed) {\n                    clearInterval(popupTick);\n\n                    closeWindow(false);\n                }\n            }, 500);\n\n            if (this._overlay) {\n                this._overlay.show({\n                    onClick: () => this._popup ? this._popup.focus() : closeWindow(false),\n                    onClickClose: () => closeWindow(false, false),\n                });\n            }\n        });\n    }\n\n    deinitialize(): void {\n        this._overlay = undefined;\n    }\n\n    private _getOverlayElements(options: ProcessorOptions['overlay'] = {}): DocumentFragment {\n        const fragment = document.createDocumentFragment();\n        const helpText = document.createElement('div');\n        const continueText = document.createElement('strong');\n\n        helpText.className = 'paypal-commerce-overlay_text';\n        helpText.innerText = options.helpText || 'Don\\'t see the secure PayPal browser? We\\'ll help you re-launch the window to complete your flow. You might need to enable pop-ups in your browser in order to continue.';\n\n        continueText.className = 'paypal-commerce-overlay_link';\n        continueText.innerText = options.continueText || 'Click to continue';\n        continueText.style.marginTop = '15px';\n        continueText.style.display = 'block';\n        continueText.style.color = 'white';\n        continueText.style.textDecoration = 'underline';\n\n        fragment.appendChild(helpText);\n        fragment.appendChild(continueText);\n\n        return fragment;\n    }\n\n    private _getParamsWindow(): string {\n        return `\n            left=${Math.round((window.screen.height - modalWidth) / 2)},\n            top=${Math.round((window.screen.width - modalHeight) / 2)},\n            height=${modalHeight},width=${modalWidth},status=yes,toolbar=no,menubar=no,resizable=yes,scrollbars=no\n        `;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nexport default class SagePayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _formPoster: FormPoster\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return super.execute(payload, options)\n            .catch((error: Error) => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    }, undefined, '_top');\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize(options);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, TimeoutError, UnsupportedBrowserError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { CardData, Contact, DigitalWalletType, NonceGenerationError, SquareFormElement, SquareFormOptions, SquarePaymentRequest } from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { StripeAddress, StripeBillingDetails, StripeCardElement, StripeHandleCardPaymentOptions, StripePaymentMethodData, StripeShippingDetails, StripeV3Client } from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._stripeV3Client = await this._stripeScriptLoader.load(\n            paymentMethod.initializationData.stripePublishableKey,\n            paymentMethod.initializationData.stripeConnectedAccount);\n        const elements = this._stripeV3Client.elements();\n        const cardElement = elements.create('card', {\n            style: stripeOptions.style,\n        });\n        cardElement.mount(`#${stripeOptions.containerId}`);\n        this._cardElement = cardElement;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string, stripeAccount: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                    stripeAccount,\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { HostedFormFactory } from '../../../hosted-form';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CreditCardPaymentStrategy } from '../credit-card';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        hostedFormFactory: HostedFormFactory,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator, hostedFormFactory);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader, getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { HostedFormFactory } from '../hosted-form';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { createSpamProtection, GoogleRecaptcha, PaymentHumanVerificationHandler, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor, AmazonPayV2PaymentStrategy } from './strategies/amazon-pay-v2';\nimport { BlueSnapV2PaymentStrategy } from './strategies/bluesnapv2';\nimport { BoltPaymentStrategy } from './strategies/bolt';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, BraintreeCreditCardPaymentStrategy, BraintreePaypalPaymentStrategy, BraintreeScriptLoader, BraintreeSDKCreator, BraintreeVisaCheckoutPaymentStrategy, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { CardinalClient, CardinalScriptLoader, CardinalThreeDSecureFlow } from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayPaymentStrategy, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { KlarnaV2PaymentStrategy, KlarnaV2ScriptLoader } from './strategies/klarnav2';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { PaypalCommercePaymentProcessor, PaypalCommercePaymentStrategy, PaypalCommerceRequestSender } from './strategies/paypal-commerce';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(\n        new BillingAddressRequestSender(requestSender),\n        new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender))\n    );\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, new SpamProtectionRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentHumanVerificationHandler = new PaymentHumanVerificationHandler(createSpamProtection(createScriptLoader()));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer, paymentHumanVerificationHandler);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator, spamProtectionActionCreator);\n    const formPoster = createFormPoster();\n    const hostedFormFactory = new HostedFormFactory(store);\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader, getStylesheetLoader()),\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.ADYENV2_GOOGLEPAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AUTHORIZENET_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZONPAYV2, () =>\n        new AmazonPayV2PaymentStrategy(\n            store,\n            paymentStrategyActionCreator,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            createAmazonPayV2PaymentProcessor(store)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BLUESNAPV2, () =>\n        new BlueSnapV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNAV2, () =>\n        new KlarnaV2PaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaV2ScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_COMMERCE, () =>\n        new PaypalCommercePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new PaypalCommerceRequestSender(requestSender),\n            new PaypalCommercePaymentProcessor()\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_COMMERCE_CREDIT, () =>\n        new PaypalCommercePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new PaypalCommerceRequestSender(requestSender),\n            new PaypalCommercePaymentProcessor()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            hostedFormFactory,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BOLT, () =>\n        new BoltPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n);\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport PaymentInstrument, { VaultAccessToken } from './instrument';\nimport { AccountInternalInstrument, CardInternalInstrument, InstrumentsResponseBody, InstrumentErrorResponseBody, InternalInstrument, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody, InternalVaultAccessTokenResponseBody } from './instrument-response-body';\nimport { mapToAccountInstrument } from './map-to-account-instrument';\nimport { mapToCardInstrument } from './map-to-card-instrument';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): PaymentInstrument[] {\n        return vaultedInstruments\n            .map(instrument => this._isAccountInstrument(instrument) ? mapToAccountInstrument(instrument) : mapToCardInstrument(instrument) );\n    }\n\n    private _isAccountInstrument(instrument: AccountInternalInstrument | CardInternalInstrument): instrument is AccountInternalInstrument {\n        return instrument.method_type === 'bank' || instrument.method_type === 'account';\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { AccountInstrument } from './instrument';\nimport { AccountInternalInstrument } from './instrument-response-body';\n\nexport function mapToAccountInstrument(instrument: AccountInternalInstrument): AccountInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        externalId: instrument.external_id,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method: instrument.method,\n        type: instrument.method_type,\n        iban: instrument.iban,\n        issuer: instrument.issuer,\n    };\n}\n","import { CardInstrument } from './instrument';\nimport { CardInternalInstrument } from './instrument-response-body';\n\nexport function mapToCardInstrument(instrument: CardInternalInstrument): CardInstrument {\n    return {\n        bigpayToken: instrument.bigpay_token,\n        defaultInstrument: instrument.default_instrument,\n        provider: instrument.provider,\n        iin: instrument.iin,\n        last4: instrument.last_4,\n        expiryMonth: instrument.expiry_month,\n        expiryYear: instrument.expiry_year,\n        brand: instrument.brand,\n        trustedShippingAddress: instrument.trusted_shipping_address,\n        method:  instrument.method,\n        type: 'card',\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody, InternalInstrumentsResponseBody, InternalInstrumentErrorResponseBody } from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport { ShippingStrategyActionType, ShippingStrategyDeinitializeAction, ShippingStrategyInitializeAction, ShippingStrategySelectOptionAction, ShippingStrategyUpdateAddressAction } from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        const updateAddressRequestBody = {\n            ...this._store.getState().shippingAddress.getShippingAddress(),\n            customFields: address.customFields,\n        } as AddressRequestBody;\n\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(updateAddressRequestBody, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\n\nimport { ConsignmentActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayV2ChangeActionType, AmazonPayV2PaymentProcessor } from '../../../payment/strategies/amazon-pay-v2';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class AmazonPayV2ShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) {}\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    async initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazonpay, methodId } = options;\n\n        if (!amazonpay || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazonpay\" argument is not provided.');\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._amazonPayV2PaymentProcessor.initialize(methodId);\n\n        const { paymentToken } = this._paymentMethod.initializationData;\n        const buttonId = amazonpay.walletButton;\n\n        if (paymentToken && buttonId) {\n            this._bindEditButton(buttonId, paymentToken, 'changeAddress');\n        }\n\n        return this._store.getState();\n    }\n\n    async deinitialize(): Promise<InternalCheckoutSelectors> {\n        await this._amazonPayV2PaymentProcessor.deinitialize();\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _bindEditButton(id: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        const button = document.getElementById(id);\n\n        if (!button) {\n            return;\n        }\n\n        const clone = button.cloneNode(true);\n        button.replaceWith(clone);\n\n        clone.addEventListener('click', () => this._showLoadingSpinner());\n\n        this._amazonPayV2PaymentProcessor.bindButton(id, sessionId, changeAction);\n    }\n\n    private _showLoadingSpinner(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { SignInEmailRequestBody } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailRequestSender from './signin-email-request-sender';\n\nexport default class SignInEmailActionCreator {\n    constructor(\n        private _requestSender: SignInEmailRequestSender\n    ) {}\n\n    sendSignInEmail(\n        emailRequest: SignInEmailRequestBody,\n        options?: RequestOptions\n    ): Observable<SendSignInEmailAction> {\n        return concat(\n            of(createAction(SignInEmailActionType.SendSignInEmailRequested)),\n            defer(async () => {\n                const { body } = await this._requestSender.sendSignInEmail(emailRequest, options);\n\n                return createAction(SignInEmailActionType.SendSignInEmailSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(SignInEmailActionType.SendSignInEmailFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\nimport { parseUrl } from '../common/url';\n\nimport { SignInEmail, SignInEmailRequestBody } from './signin-email';\n\nexport default class SignInEmailRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    sendSignInEmail(\n        {\n            email,\n            redirectUrl,\n        }: SignInEmailRequestBody,\n        {\n            timeout,\n        }: RequestOptions = {}\n    ): Promise<Response<SignInEmail>> {\n        const url = '/login.php?action=passwordless_login';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: {\n            email,\n            redirect_url: redirectUrl || parseUrl(window.top.location.href).pathname,\n        }, headers, timeout });\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { createCheckoutStoreErrorSelectorFactory, createCheckoutStoreSelectorFactory, createCheckoutStoreStatusSelectorFactory, CheckoutSelectors, InternalCheckoutSelectors } from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { omit, values } from 'lodash';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { FlashMessage, FlashMessageType, StoreConfig } from '../config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { CardInstrument, PaymentInstrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\nimport { SignInEmail } from '../signin-email';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type Instrument = CardInstrument;\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the sign-in email.\n     *\n     * @returns The sign-in email object if sent, otherwise undefined\n     */\n    getSignInEmail(): SignInEmail | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the available flash messages.\n     *\n     * Flash messages contain messages set by the server,\n     * e.g: when trying to sign in using an invalid email link.\n     *\n     * @param type - The type of flash messages to be returned. Optional\n     * @returns The flash messages if available, otherwise undefined.\n     */\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n    getInstruments(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getBillingAddress, getContextConfig) => clone(() => {\n            const billingAddress = getBillingAddress();\n            const context = getContextConfig();\n            const isEmptyBillingAddress = !billingAddress ||\n                values(omit(billingAddress, 'shouldSaveAddress', 'email', 'id'))\n                    .every(val => !val || !val.length);\n\n            if (isEmptyBillingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return billingAddress;\n                }\n\n                return {\n                    id: billingAddress ? billingAddress.id : '',\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    email: billingAddress ? billingAddress.email : '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return billingAddress;\n        })\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const getSignInEmail = createSelector(\n        ({ signInEmail }: InternalCheckoutSelectors) => signInEmail.getEmail,\n        getEmail => clone(getEmail)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstrumentsByPaymentMethod,\n        (getInstruments, getInstrumentsByPaymentMethod) => {\n            function getInstrumentsSelector(): Instrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n            function getInstrumentsSelector(paymentMethod?: PaymentMethod): PaymentInstrument[] | undefined {\n                return paymentMethod ? getInstrumentsByPaymentMethod(paymentMethod) : getInstruments();\n            }\n\n            return clone(getInstrumentsSelector);\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    const getFlashMessages = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getFlashMessages,\n        getFlashMessages => clone(getFlashMessages)\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getSignInEmail: getSignInEmail(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update subscriptions.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateSubscriptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to send sign-in email.\n     *\n     * @returns The error object if unable to send email, otherwise undefined.\n     */\n    getSignInEmailError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateSubscriptionsError: state.subscriptions.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n            getSignInEmailError: state.signInEmail.getSendError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether spam check is executing.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isExecutingSpamCheck(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether a sign-in email is being sent.\n     *\n     * @returns True if sending a sign-in email, otherwise false\n     */\n    isSendingSignInEmail(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n\n    /**\n     * Checks whether the subscriptions are being updated.\n     *\n     * @returns True if updating subscriptions, otherwise false.\n     */\n    isUpdatingSubscriptions(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ checkout }: InternalCheckoutSelectors) => checkout.isExecutingSpamCheck, // Remove this when CheckoutService#initializeSpamProtection is deprecated\n        (isExecuting, isExecutingSpamCheck) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isExecutingSpamCheck()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isExecutingSpamCheck: state.checkout.isExecutingSpamCheck,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isUpdatingSubscriptions: state.subscriptions.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isSendingSignInEmail: state.signInEmail.isSending,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestBody } from '../signin-email';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../spam-protection';\nimport { StoreCreditActionCreator } from '../store-credit';\nimport { Subscriptions, SubscriptionsActionCreator } from '../subscription';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _signInEmailActionCreator: SignInEmailActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _subscriptionsActionCreator: SubscriptionsActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Sends a email that contains a single-use sign-in link. When clicked, this link\n     * signs in the customer without requiring any password.\n     *\n     * @internal\n     * @param signInEmailRequest - The sign-in email request values.\n     * @param options - Options for the send email request.\n     * @returns A promise that resolves to the current state.\n     */\n    sendSignInEmail(signInEmailRequest: SignInEmailRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._signInEmailActionCreator.sendSignInEmail(signInEmailRequest, options);\n\n        return this._dispatch(action, { queueId: 'signInEmail' });\n    }\n\n    /**\n     * Updates the subscriptions associated to an email.\n     *\n     * @param subscriptions - The email and associated subscriptions to update.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    updateSubscriptions(subscriptions: Subscriptions, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._subscriptionsActionCreator.updateSubscriptions(subscriptions, options);\n\n        return this._dispatch(action, { queueId: 'subscriptions' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use, with optional subscriptions.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(\n        address: Partial<AddressRequestBody>,\n        options?: ShippingRequestOptions<CheckoutParams>\n    ): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action)\n            .then(() => this.loadInstruments());\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * Note: Use `CheckoutService#executeSpamCheck` instead.\n     * You do not need to call this method before calling\n     * `CheckoutService#executeSpamCheck`.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection();\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     * @deprecated - Use CheckoutService#executeSpamCheck instead.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Verifies whether the current checkout is created by a human.\n     *\n     * Note: this method will do the initialization, therefore you do not\n     * need to call `CheckoutService#initializeSpamProtection`\n     * before calling this method.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.executeSpamCheck();\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    executeSpamCheck(): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.execute();\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { SignInEmailActionCreator, SignInEmailRequestSender } from '../signin-email';\nimport { createSpamProtection, SpamProtectionActionCreator, SpamProtectionRequestSender } from '../spam-protection';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../subscription';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionRequestSender = new SpamProtectionRequestSender(requestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection, spamProtectionRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender)\n    );\n    const subscriptionsActionCreator = new SubscriptionsActionCreator(new SubscriptionsRequestSender(requestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            subscriptionsActionCreator\n        ),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator,\n            spamProtectionActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        new SignInEmailActionCreator(new SignInEmailRequestSender(requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender)),\n        subscriptionsActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { createBraintreeVisaCheckoutPaymentProcessor, BraintreeScriptLoader, BraintreeSDKCreator, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { AmazonPayV2CustomerStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('googlepayadyenv2', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazonpay', () =>\n        new AmazonPayV2CustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createAmazonPayV2PaymentProcessor(store)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepayauthorizenet', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { AmazonPayV2ShippingStrategy } from './strategies/amazon-pay-v2';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('amazonpay', () =>\n        new AmazonPayV2ShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            createAmazonPayV2PaymentProcessor(store)\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { isObject, union } from 'lodash';\nimport MessageFormat from 'messageformat';\n\nimport { Logger } from '../common/log';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { keys } from 'lodash';\n\nimport { LineItemMap } from '../cart';\nimport { Checkout, CheckoutService } from '../checkout';\nimport { InvalidArgumentError } from '../common/error/errors';\nimport { ShopperCurrency, StoreProfile } from '../config';\nimport { Coupon } from '../coupon';\nimport { Order } from '../order';\nimport { ShippingOption } from '../shipping';\n\nimport { AnalyticsTracker } from './analytics-tracker-window';\nimport StepTracker from './step-tracker';\n\nexport interface StepTrackerConfig {\n    checkoutSteps?: AnalyticStepType[];\n}\n\nexport type AnalyticStepType = 'customer' | 'shipping' | 'billing' | 'payment';\n\nconst ORDER_ITEMS_STORAGE_KEY = 'ORDER_ITEMS';\n\nexport enum AnalyticStepId {\n    CUSTOMER = 1,\n    SHIPPING,\n    BILLING,\n    PAYMENT,\n}\n\nconst ANALYTIC_STEPS: { [key: string]: AnalyticStepId } = {\n    customer: AnalyticStepId.CUSTOMER,\n    shipping: AnalyticStepId.SHIPPING,\n    billing: AnalyticStepId.BILLING,\n    payment: AnalyticStepId.PAYMENT,\n};\n\nexport default class AnalyticsStepTracker implements StepTracker {\n    private _checkoutStarted: boolean = false;\n    private _completedSteps: { [key: string]: boolean } = {};\n    private _viewedSteps: { [key in AnalyticStepId]?: boolean; } = {};\n    private _analyticStepOrder: AnalyticStepType[] = [\n        'customer',\n        'shipping',\n        'billing',\n        'payment',\n    ];\n\n    constructor(\n        private checkoutService: CheckoutService,\n        private storage: StorageFallback,\n        private analytics: AnalyticsTracker,\n        { checkoutSteps }: StepTrackerConfig = {}\n    ) {\n        if (checkoutSteps !== undefined) {\n            if (checkoutSteps.some(value => !(value in ANALYTIC_STEPS))) {\n                throw new InvalidArgumentError(\n                    `Invalid checkout steps provided. Valid values are: ${keys(ANALYTIC_STEPS).join(', ')}.`\n                );\n            }\n            this._analyticStepOrder = checkoutSteps;\n\n        }\n    }\n\n    trackCheckoutStarted(): void {\n        if (this._checkoutStarted) {\n            return;\n        }\n\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const {\n            coupons,\n            grandTotal,\n            shippingCostTotal,\n            taxTotal,\n            cart: {\n                lineItems,\n                discountAmount,\n                id,\n            },\n        } = checkout;\n\n        const extraItemsData = this.saveExtraItemsData(id, lineItems);\n\n        this.analytics.track('Checkout Started', this.getTrackingPayload({\n            revenue: grandTotal,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            lineItems,\n            extraItemsData,\n        }));\n\n        this._checkoutStarted = true;\n    }\n\n    trackOrderComplete(): void {\n        const order = this.getOrder();\n\n        if (!order) {\n            return;\n        }\n\n        const {\n            isComplete,\n            orderId,\n            orderAmount,\n            shippingCostTotal,\n            taxTotal,\n            discountAmount,\n            coupons,\n            lineItems,\n            cartId,\n        } = order;\n\n        if (!isComplete) {\n            return;\n        }\n\n        const extraItemsData = this.readExtraItemsData(cartId);\n\n        if (extraItemsData === null) {\n            return;\n        }\n\n        this.analytics.track('Order Completed', this.getTrackingPayload({\n            orderId,\n            revenue: orderAmount,\n            shipping: shippingCostTotal,\n            tax: taxTotal,\n            discount: discountAmount,\n            coupons,\n            extraItemsData,\n            lineItems,\n        }));\n\n        this.clearExtraItemData(cartId);\n    }\n\n    trackStepViewed(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepViewed(stepId)) {\n            return;\n        }\n\n        this.trackViewed(stepId);\n        this.backfill(stepId);\n    }\n\n    trackStepCompleted(step: AnalyticStepType): void {\n        const stepId = this.getIdFromStep(step);\n\n        if (!stepId || this.hasStepCompleted(stepId)) {\n            return;\n        }\n\n        this.backfill(stepId);\n        this.trackCompleted(stepId);\n    }\n\n    private backfill(stepId: AnalyticStepId): void {\n        for (const i of this._analyticStepOrder) {\n            const id = this.getIdFromStep(i);\n\n            if (!id) {\n                break;\n            }\n\n            if (!this.hasStepViewed(id)) {\n                this.trackViewed(id);\n            }\n\n            if (id === stepId) {\n                break;\n            }\n\n            if (!this.hasStepCompleted(id)) {\n                this.trackCompleted(id);\n            }\n        }\n    }\n\n    private trackCompleted(stepId: AnalyticStepId): void {\n        const shippingMethod = this.getSelectedShippingOption();\n        const { code: currency = '' } = this.getShopperCurrency() || {};\n        const paymentMethod = this.getPaymentMethodName();\n\n        const payload: {\n            step: number;\n            currency: string;\n            shippingMethod?: string;\n            paymentMethod?: string;\n        } = {\n            step: stepId,\n            currency,\n        };\n\n        if (shippingMethod) {\n            payload.shippingMethod = shippingMethod.description;\n        }\n\n        if (paymentMethod) {\n            payload.paymentMethod = paymentMethod;\n        }\n\n        // due to an issue with the way the segment library works, we must send at least one of the two\n        // options--otherwise it rejects the track call with no diagnostic messages. however, if we blindly\n        // include both options, it sends a single comma for the value, which is undesireable. by only adding\n        // one of the two (shippingMethod here being arbitrarily chosen), we always have at least one value, but\n        // never send two empty values.\n        if (!payload.shippingMethod && !payload.paymentMethod) {\n            payload.shippingMethod = ' ';\n        }\n\n        this.analytics.track('Checkout Step Completed', payload);\n\n        const shippingMethodId = shippingMethod ? shippingMethod.id : '';\n        const completedStepId = stepId === AnalyticStepId.SHIPPING ?\n            `${stepId}-${shippingMethodId}` :\n            stepId;\n\n        this._completedSteps[completedStepId] = true;\n    }\n\n    private getTrackingPayload({\n        orderId,\n        revenue,\n        shipping,\n        tax,\n        discount,\n        coupons,\n        extraItemsData,\n        lineItems,\n    }: {\n        orderId?: number;\n        revenue: number;\n        shipping: number;\n        tax: number;\n        discount: number;\n        coupons: Coupon[];\n        extraItemsData: ExtraItemsData;\n        lineItems: LineItemMap;\n    }) {\n        const { code = '' } = this.getShopperCurrency() || {};\n        const { storeName = '' } = this.getStoreProfile() || {};\n\n        return {\n            orderId,\n            affiliation: storeName,\n            revenue: this.toShopperCurrency(revenue),\n            shipping: this.toShopperCurrency(shipping),\n            tax: this.toShopperCurrency(tax),\n            discount: this.toShopperCurrency(discount),\n            coupon: (coupons || []).map(coupon => coupon.code).join(','),\n            currency: code,\n            products: this.getProducts(extraItemsData, lineItems),\n        };\n    }\n\n    private hasStepCompleted(stepId: AnalyticStepId): boolean {\n        const shippingOption = this.getSelectedShippingOption();\n        const shippingMethodId = shippingOption ? shippingOption.id : '';\n\n        return this._completedSteps.hasOwnProperty(stepId) ||\n            (\n                stepId === AnalyticStepId.SHIPPING &&\n                this._completedSteps.hasOwnProperty(`${stepId}-${shippingMethodId}`)\n            );\n    }\n\n    private hasStepViewed(stepId: AnalyticStepId): boolean {\n        return !!this._viewedSteps[stepId];\n    }\n\n    private getIdFromStep(step: string): AnalyticStepId | null {\n        const name = step.split('.');\n\n        return ANALYTIC_STEPS[name[0]] || null;\n    }\n\n    private trackViewed(stepId: AnalyticStepId): void {\n        const currency = this.getShopperCurrency();\n\n        this.analytics.track('Checkout Step Viewed', {\n            step: stepId,\n            currency: currency ? currency.code : '',\n        });\n\n        this._viewedSteps[stepId] = true;\n    }\n\n    private getOrder(): Order | undefined {\n        const { data: { getOrder } } = this.checkoutService.getState();\n\n        return getOrder();\n    }\n\n    private getCheckout(): Checkout | undefined {\n        const { data: { getCheckout } } = this.checkoutService.getState();\n\n        return getCheckout();\n    }\n\n    private getShopperCurrency(): ShopperCurrency | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.shopperCurrency;\n    }\n\n    private getStoreProfile(): StoreProfile | undefined {\n        const { data: { getConfig } } = this.checkoutService.getState();\n        const config = getConfig();\n\n        return config && config.storeProfile;\n    }\n\n    private toShopperCurrency(amount: number): number {\n        const { exchangeRate = 1 } = this.getShopperCurrency() || {};\n\n        return Math.round(amount * exchangeRate * 100) / 100;\n    }\n\n    private saveExtraItemsData(id: string, lineItems: LineItemMap): ExtraItemsData {\n        const data = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].reduce((result, item) => {\n            result[item.productId] = {\n                brand: item.brand ? item.brand : '',\n                category: item.categoryNames ? item.categoryNames.join(', ') : '',\n            };\n\n            return result;\n        }, {} as ExtraItemsData);\n\n        try {\n            this.storage.setItem(this.getStorageKey(id), JSON.stringify(data));\n\n            return data;\n        } catch (err) {\n            return {};\n        }\n    }\n\n    private getStorageKey(id: string): string {\n        return id ? `${ORDER_ITEMS_STORAGE_KEY}_${id}` : '';\n    }\n\n    private readExtraItemsData(id: string): ExtraItemsData | null {\n        try {\n            const item = this.storage.getItem(this.getStorageKey(id));\n\n            return item ? JSON.parse(item) : null;\n        } catch (err) {\n            return null;\n        }\n    }\n\n    private clearExtraItemData(id: string): void {\n        try {\n            this.storage.removeItem(this.getStorageKey(id));\n        } catch (err) {\n            // silently ignore the failure\n        }\n    }\n\n    private getSelectedShippingOption(): ShippingOption | null {\n        const { data } = this.checkoutService.getState();\n        const shippingOption = data.getSelectedShippingOption();\n\n        return (shippingOption && shippingOption.id && shippingOption.description) ?\n            shippingOption :\n            null;\n    }\n\n    private getPaymentMethodName(): string {\n        const { data } = this.checkoutService.getState();\n        const paymentMethod = data.getSelectedPaymentMethod();\n\n        return (paymentMethod && paymentMethod.config) ?\n            paymentMethod.config.displayName || '' :\n            '';\n    }\n\n    private getProducts(itemsData: ExtraItemsData, lineItems: LineItemMap): AnalyticsProduct[] {\n        const customItems: AnalyticsProduct[] = (lineItems.customItems || []).map(item => ({\n            product_id: item.id,\n            sku: item.sku,\n            price: item.listPrice,\n            quantity: item.quantity,\n            name: item.name,\n        }));\n\n        const giftCertificateItems: AnalyticsProduct[] = lineItems.giftCertificates.map(item => {\n            return {\n                product_id: item.id,\n                price: this.toShopperCurrency(item.amount),\n                name: item.name,\n                quantity: 1,\n            };\n        });\n\n        const physicalAndDigitalItems: AnalyticsProduct[] = [\n            ...lineItems.physicalItems,\n            ...lineItems.digitalItems,\n        ].map(item => {\n            let itemAttributes;\n\n            if (item.options && item.options.length) {\n                itemAttributes = item.options.map(option => `${option.name}:${option.value}`);\n                itemAttributes.sort();\n            }\n\n            return {\n                product_id: item.productId,\n                sku: item.sku,\n                price: item.listPrice,\n                image_url: item.imageUrl,\n                name: item.name,\n                quantity: item.quantity,\n                brand: itemsData[item.productId] ? itemsData[item.productId].brand : '',\n                category: itemsData[item.productId] ? itemsData[item.productId].category : '',\n                variant: (itemAttributes || []).join(', '),\n            };\n        });\n\n        return [\n            ...customItems,\n            ...physicalAndDigitalItems,\n            ...giftCertificateItems,\n        ];\n    }\n}\n\nexport interface AnalyticsProduct {\n    product_id: string | number;\n    price: number;\n    quantity: number;\n    name: string;\n    sku?: string;\n    image_url?: string;\n    category?: string;\n    variant?: string;\n    brand?: string;\n}\n\nexport interface ExtraItemsData {\n    [productId: string]: {\n        brand: string;\n        category: string;\n    };\n}\n","import StepTracker from './step-tracker';\n\nexport default class NoopStepTracker implements StepTracker {\n    trackCheckoutStarted(): void {\n        return;\n    }\n\n    trackOrderComplete(): void {\n        return;\n    }\n\n    trackStepViewed(): void {\n        return;\n    }\n\n    trackStepCompleted(): void {\n        return;\n    }\n}\n","import localStorageFallback from 'local-storage-fallback';\n\nimport { CheckoutService } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\n\nimport AnalyticsStepTracker, { StepTrackerConfig } from './analytics-step-tracker';\nimport { isAnalyticsTrackerWindow } from './is-analytics-step-tracker-window';\nimport NoopStepTracker from './noop-step-tracker';\nimport StepTracker from './step-tracker';\n\n/**\n * Creates an instance of `StepTracker`.\n *\n * @remarks\n * ```js\n * const checkoutService = createCheckoutService();\n * await checkoutService.loadCheckout();\n * const stepTracker = createStepTracker(checkoutService);\n *\n * stepTracker.trackCheckoutStarted();\n * ```\n *\n * @alpha\n * Please note that `StepTracker` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param CheckoutService - An instance of CheckoutService\n * @param StepTrackerConfig - A step tracker config object\n * @returns an instance of `StepTracker`.\n */\nexport default function createStepTracker(\n    checkoutService: CheckoutService,\n    stepTrackerConfig?: StepTrackerConfig\n): StepTracker {\n    const { data } = checkoutService.getState();\n    const config = data.getConfig();\n\n    if (!config) {\n        throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n    }\n\n    const { isAnalyticsEnabled } = config.checkoutSettings;\n\n    if (isAnalyticsEnabled && isAnalyticsTrackerWindow(window)) {\n        return new AnalyticsStepTracker(\n            checkoutService,\n            localStorageFallback,\n            window.analytics,\n            stepTrackerConfig\n        );\n    }\n\n    return new NoopStepTracker();\n}\n","import AnalyticsTrackerWindow from './analytics-tracker-window';\n\nexport function isAnalyticsTrackerWindow(window: Window): window is AnalyticsTrackerWindow {\n    return Boolean((window as AnalyticsTrackerWindow).analytics);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from '../checkout';\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\nexport { embedCheckout } from '../embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from '../embedded-checkout/iframe-content';\nexport { createLanguageService } from '../locale';\nexport { createCurrencyService } from '../currency';\nexport { createStepTracker } from '../analytics';\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { AmazonPayV2ButtonParams, AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n    private _methodId?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._amazonPayV2SDK.Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK.Pay.renderButton(containerId, params);\n    }\n\n    signout(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        if (!this._amazonPayV2SDK) {\n            this._configureWallet()\n                .then(() => {\n                    return this.signout(methodId);\n                });\n        } else {\n            this._amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId));\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const amazonPayV2Client = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n        this._amazonPayV2SDK = amazonPayV2Client;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region  = (AmazonPayV2Regions as any)[region];\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutStore } from '../../../checkout';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(store: CheckoutStore): AmazonPayV2PaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new AmazonPayV2PaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new AmazonPayV2ScriptLoader(scriptLoader)\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}